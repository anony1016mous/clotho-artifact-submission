{"code": "# Python code\ndef sum_sequence(sequence):\n  sum = 0\n  for num in sequence:\n    sum += num\n  return sum", "line_number": null, "bug_type": null}
{"code": "[x*x for x in [1, 2, 3, 5, 8, 13]]", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(s):\n    '''This function returns True if the string s is a palindrome and False if it isn't.''' \n    return s == s[::-1]  # Checks if s is the same as its reverse.", "line_number": null, "bug_type": null}
{"code": "def double_add(num1, num2): \n    return (num1 + num2) * 2", "line_number": null, "bug_type": null}
{"code": "def find_numbers_divisible_by(m, n, divisor):\n    divisible_numbers = []\n    for i in range(m, n+1):\n        if i % divisor == 0:\n            divisible_numbers.append(i)\n    return divisible_numbers", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n if n == 0:\n  return 1\n else:\n  return n * factorial(n-1)", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_password():\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.choice(chars) for _ in range(8))\n\npassword = generate_password()\nprint(password)", "line_number": null, "bug_type": null}
{"code": "my_list = []\n\nnum = 0\n\nwhile num < 10:\n    my_list.append(num)\n    num += 1\n\nprint(my_list)", "line_number": null, "bug_type": null}
{"code": "def printMax(parameter_1, parameter_2):\n    if parameter_1 > parameter_2:\n        print(parameter_1)\n    else:\n      print(parameter_2)", "line_number": null, "bug_type": null}
{"code": "even_numbers = [i for i in range(1, 21) if i % 2 == 0]", "line_number": null, "bug_type": null}
{"code": "def sum_digits(num):\n    total = 0\n    while num > 0:\n        digit = num % 10\n        total += digit\n        num = num // 10\n    return total", "line_number": null, "bug_type": null}
{"code": "people_dict = {'John': 20, 'Jane': 40, 'Alex': 18, 'Peter': 45}", "line_number": null, "bug_type": null}
{"code": "# Python code\narr = [1, 2, 3, 4, 5]\n\nfor item in arr:\n print(item * 2)", "line_number": null, "bug_type": null}
{"code": "string1 = \"Hello\"\nstring2 = \"World\"\n\nprint(string1 + \" \" + string2)", "line_number": null, "bug_type": null}
{"code": "if int(10) == int(10):\n    print(\"The two integers are equal\")\nelse:\n    print(\"The two integers are not equal\")", "line_number": null, "bug_type": null}
{"code": "nums = []\nfor i in range(5):\n    nums.append(int(input(\"Please enter number: \")))\n\n#Calculate average\naverage = sum(nums) / len(nums)\n\n#Print average\nprint(\"The average is \", average)", "line_number": null, "bug_type": null}
{"code": "d = {}\n\nfor i in range(1, 16):\n    d[i] = i**2\n\nprint(d)", "line_number": null, "bug_type": null}
{"code": "def Fibonacci(n): \n\tif n==0: \n\t\treturn 0\n\tif n==1: \n\t\treturn 1\n\telse: \n\t\treturn Fibonacci(n-1)+Fibonacci(n-2)", "line_number": null, "bug_type": null}
{"code": "def is_array_even(arr): \n  if len(arr)%2 == 0:\n    return True\n  else:\n    return False", "line_number": null, "bug_type": null}
{"code": "def avg_list(lst):\n sum = 0\n count = 0\n for i in lst:\n  sum += i\n  count += 1\n avg = sum / count\n return avg", "line_number": null, "bug_type": null}
{"code": "def str_to_lower(string):\n    new_string = \"\"\n\n    for char in string:\n        new_string += char.lower()\n\n    return new_string", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef shuffle_list(list): \n    # Initialize the random number generator\n    random.seed()\n\n    # Shuffle the list\n    random.shuffle(list) \n\n    # Return the list\n    return list", "line_number": null, "bug_type": null}
{"code": "from faker import Faker\n\nfake = Faker()\nfor _ in range(10):\n print(fake.name(), fake.email(), fake.random_int(min=18, max=60))", "line_number": null, "bug_type": null}
{"code": "def fibonacci(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n \nprint(fibonacci(10))", "line_number": null, "bug_type": null}
{"code": "numbers = [1, 2, 3, 4, 5] \n\ndict_numbers = {num: num**2 for num in numbers}\nprint(dict_numbers)", "line_number": null, "bug_type": null}
{"code": "import math\n\nn = 100\n\n#Calculate the square root of a number\nsquare_root = math.sqrt(n)\n\nprint(f'Square root of {n} is {square_root}')", "line_number": null, "bug_type": null}
{"code": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width", "line_number": null, "bug_type": null}
{"code": "def FahrenheitToCelsius(temp_fahrenheit):\n    temp_celsius = (temp_fahrenheit - 32) * 5/9\n    return temp_celsius", "line_number": null, "bug_type": null}
{"code": "def dict_sum(dict):\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum", "line_number": null, "bug_type": null}
{"code": "def fibonacci_seq(n): \n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return fibonacci_seq(n-1)+fibonacci_seq(n-2)", "line_number": null, "bug_type": null}
{"code": "def print_reverse_array(arr):\n for i in range(len(arr)-1, -1, -1): \n  print(arr[i])", "line_number": null, "bug_type": null}
{"code": "for i in range(10):\n    print(\"hello\")\n    i += 1\n    if i == 10:\n        print(\"You've got it!\")", "line_number": null, "bug_type": null}
{"code": "def print_numbers():\n    for i in range(1, 51):\n        print(i)\n\nprint_numbers()", "line_number": null, "bug_type": null}
{"code": "def num_common_chars(str1, str2):\n    common = 0\n    for c in str1:\n        if c in str2:\n            common += 1\n    return common", "line_number": null, "bug_type": null}
{"code": "class IntList:\n    def __init__(self):\n        self.values = []\n   \n    def add_value(self, value):\n        self.values.append(value)\n    \n    def find_min(self):\n        return min(self.values)", "line_number": null, "bug_type": null}
{"code": "def remove_whitespace(word_list):\n    return [word.strip() for word in word_list]\n\nstripped_list = remove_whitespace(['Hello  World  ', 'Hi  there', 'Good  Morning'])\nprint(stripped_list)", "line_number": null, "bug_type": null}
{"code": "def find_total_surfacearea(length, breadth, height):\n   return (2*(length*breadth + breadth*height + height*length))\n\nprint(find_total_surfacearea(2, 3, 4))\n\nOutput: 52", "line_number": null, "bug_type": null}
{"code": "words = \"Hello \"\nwords2 = \"world!\"\n\ncombined = words + words2\nresult = combined[::-1]\n\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def sort_list(unsorted_list):\n    sorted_list = []\n    while unsorted_list:\n        min_elem = min(unsorted_list)\n        unsorted_list.remove(min_elem)\n        sorted_list.append(min_elem)\n    return sorted_list", "line_number": null, "bug_type": null}
{"code": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nperson = Person(\"John\", 25)", "line_number": null, "bug_type": null}
{"code": "def filter_vowels(string):\n     vowels = ('a', 'e', 'i', 'o', 'u')\n     return ''.join(c for c in string if c not in vowels)", "line_number": null, "bug_type": null}
{"code": "list_items = [3, 7, 5, 8, 10]\n\nlist_items.sort(reverse=True)\n\nprint(list_items) # Output: [10, 8, 7, 5, 3]", "line_number": null, "bug_type": null}
{"code": "def divisibleBy3(li):\n total = 0\n for num in li:\n  if num % 3 == 0:\n   total += num\n return total\n# Output: 24", "line_number": null, "bug_type": null}
{"code": "import random\n\nrandom_list = []\nfor i in range(10):\n number = random.randint(1, 100)\n random_list.append(number)", "line_number": null, "bug_type": null}
{"code": "def replace_string(input_string, target_string, replacement_string):\n    return input_string.replace(target_string, replacement_string)\n\nprint(replace_string(\"Hello World!\", \"World\", \"Python\"))", "line_number": null, "bug_type": null}
{"code": "response = {\n  \"status\": 200,\n  \"data\": {\"name\": \"John\",\"age\":28},\n  \"message\": \"Success\"\n}", "line_number": null, "bug_type": null}
{"code": "def replace_all_occurrences(str, char, replacement):\n  return str.replace(char, replacement)\n\nprint(replace_all_occurrences(\"Hello World!\", 'l', 'X'))", "line_number": null, "bug_type": null}
{"code": "strings = ['cat', 'dog', 'apple', 'banana']\n\nstrings.sort()\n\nfor string in strings:\n    print(string)", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\nlength = 8\nchars = string.ascii_uppercase + string.digits\npassword = ''.join(random.choice(chars) for i in range(length))\n\nprint (password)", "line_number": null, "bug_type": null}
{"code": "def square_root(x):\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    return x**0.5", "line_number": null, "bug_type": null}
{"code": "# get the list of contents\nimport os\ndirectory_contents = os.listdir()\n\n# print the contents\nfor content in directory_contents:\n    print(content)", "line_number": null, "bug_type": null}
{"code": "list1 = [45, 12, 52, 89, 33, 99]\nfiltered_list = list(filter(lambda x: x > 50, list1))\n\nprint(filtered_list)", "line_number": null, "bug_type": null}
{"code": "def odd_numbers_list(numbers):\n    return [num for num in numbers if num % 2 != 0]", "line_number": null, "bug_type": null}
{"code": "def add(a, b):\n    sum = a + b\n    print(sum)\n\nadd(5,7)", "line_number": null, "bug_type": null}
{"code": "array = [1, 10, 50, 3, 8]\n\n# Get the maximum element\nmax_element = max(array)\n\nprint(max_element) # Output: 50", "line_number": null, "bug_type": null}
{"code": "filtered_list = [email for email in list if email.endswith(\"@gmail.com\")]\n\nprint(filtered_list)\n# Output: [\"john@gmail.com\", \"sophie@gmail.com\"]", "line_number": null, "bug_type": null}
{"code": "import json\n\ndata = '{\"name\": \"John\",\"age\": 30,\"address\": {\"city\": \"New York\",\"state\": \"NY\"}}'\n\ndata_dict = json.loads(data)", "line_number": null, "bug_type": null}
{"code": "import requests\n\ndef read_url(url):\n  r = requests.get(url)\n  if r.status_code == 200:\n    return r.text\n  else:\n    return None", "line_number": null, "bug_type": null}
{"code": "def top_three(numbers):\n    sorted_numbers = sorted(numbers, reverse=True)\n    return sorted_numbers[:3]\n\nprint(top_three([7, 13, 5, 8, 50, 11, 64, 48]))", "line_number": null, "bug_type": null}
{"code": "items = {1: 'one', 2: 'two', 3: 'three', 4: 'four'}\n\nfor key, value in items.items():\n print(value)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_random_numbers(length, min_value, max_value):\n    return [random.uniform(min_value, max_value) for _ in range(length)]", "line_number": null, "bug_type": null}
{"code": "def sum_ints(*args):\n    total = 0\n    for num in args:\n        total += num\n    \n    return total\n\nprint(sum_ints(3, 5, 7))", "line_number": null, "bug_type": null}
{"code": "def sum_list(input_list):\n  sum = 0\n  for i in input_list:\n    sum += i\n  return sum", "line_number": null, "bug_type": null}
{"code": "numbers = [1, 2, 3, 4, 5, 6]\n\nprint(*numbers, sep='\\n')", "line_number": null, "bug_type": null}
{"code": "def vowelCheck(inputString): \n    vowels = ['a','e','i','o','u','A','E','I','O','U'] \n    for x in inputString: \n        if x in vowels: \n            return x", "line_number": null, "bug_type": null}
{"code": "def removeDuplicates(arr):\n result = [] \n  \n # traverse for all elements \n for i in arr: \n  \n  # check if exists in result \n  if i not in result: \n   result.append(i) \n  \n # return result \n return result", "line_number": null, "bug_type": null}
{"code": "import random\nimport string\n\ndef random_string(length):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(length))\n\nrandom_string(6)", "line_number": null, "bug_type": null}
{"code": "def convert_to_negative(x): \n    return ~x + 1 \n  \ndef convert_to_positive(x): \n    return ~(x-1)", "line_number": null, "bug_type": null}
{"code": "def count_x(x, y):\n    count = 0\n    for i in y:\n        if i == x:\n            count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "my_list = [1, 6, 3, 8, 7, 4]\nlargest_three = sorted(my_list)[-3:]\nprint(largest_three)", "line_number": null, "bug_type": null}
{"code": "x = 5\ny = 10\n\n# Swapping process \nx, y = y, x \n\nprint(\"x:\", x) \nprint(\"y:\", y)", "line_number": null, "bug_type": null}
{"code": "def removeDuplicates(array): \n    finalArray = []\n    for element in array: \n        if element not in finalArray: \n            finalArray.append(element)\n    return finalArray", "line_number": null, "bug_type": null}
{"code": "def even_or_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"", "line_number": null, "bug_type": null}
{"code": "def calculate_mean(numbers):\n    total_sum = 0\n    for num in numbers:\n        total_sum += num\n    mean = total_sum / len(numbers)\n    return mean\n\nprint(calculate_mean([10, 20, 30]))", "line_number": null, "bug_type": null}
{"code": "for i in range(1, 11):\n    if i % 2 != 0:\n        print(i)", "line_number": null, "bug_type": null}
{"code": "def just_me(name):\n    print(\"Hi, my name is \"+name+\". I am special and nothing else matters.\")\n    print(\"What about you?\")", "line_number": null, "bug_type": null}
{"code": "number = int(input(\"Please enter a number: \"))\ncube = number**3\nprint(\"The cube of the number is: \" + str(cube))", "line_number": null, "bug_type": null}
{"code": "for i in range(7):\n    for j in range(7):\n        if (i + j) % 2 == 0:\n            print('#', end='')\n        else:\n            print(' ', end='')\n    print()", "line_number": null, "bug_type": null}
{"code": "def sum_array(array):\n    '''A function that takes in an array of numbers and returns the sum of all the numbers'''\n    return sum(array)", "line_number": null, "bug_type": null}
{"code": "strings = [\"Hello\", \"Yes\", \"No\", \"World\"]\n\nstrings.sort()\n\nprint(strings)", "line_number": null, "bug_type": null}
{"code": "import numpy as np\n\nsize = 10\nrandom_array = np.random.randint(0, 100, size)\nprint(random_array)", "line_number": null, "bug_type": null}
{"code": "import numpy as np \n\na = np.random.randint(1, 6, size=(3,3)) \nprint(a)", "line_number": null, "bug_type": null}
{"code": "words = [\"Hello\",\"World!\",\"Good\",\"Morning\"]\n\nwords.sort(key=len)\n\nprint(words)", "line_number": null, "bug_type": null}
{"code": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = '<your website url>'\npage = requests.get(url)\nsoup = BeautifulSoup(page.text, 'html.parser')\n\n# Scraping code goes here....", "line_number": null, "bug_type": null}
{"code": "class Student:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender", "line_number": null, "bug_type": null}
{"code": "def rev_string(s): \n   return s[::-1] \n  \ns = \"Hello World!\"\nprint(rev_string(s))", "line_number": null, "bug_type": null}
{"code": "def sum_list(lst):\n  total = 0\n  for num in lst:\n    total += num\n  return total\n\nsum_list([1,2,3,4,5])", "line_number": null, "bug_type": null}
{"code": "for i in range(1,6):\n    for j in range(1,i+1):\n        print(j, end=\"\")\n    print()", "line_number": null, "bug_type": null}
{"code": "phone_numbers = ['0834567', '0945678', '07123456', '08901234', '07890123']\nresult = [number for number in phone_numbers if number.startswith('08')]\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def reverse_array(arr):\n  return arr[::-1]  # Returns a slice of the list in reverse order", "line_number": null, "bug_type": null}
{"code": "def linear_search(arr, x):\n    for index, item in enumerate(arr):\n        if item == x:\n            return index\n    return -1", "line_number": null, "bug_type": null}
{"code": "nums = [2, 60, 5, 4, 78, 32, 99]\n\nfor num in nums:\n    if num > 50:\n        print(num)", "line_number": null, "bug_type": null}
{"code": "def countEvenNum(list):\n    return len([x for x in list if x % 2 == 0])\n\nlist = [1, 2, 3, 4, 5]\nprint(countEvenNum(list))", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_random_string(length):\n chars = string.ascii_letters + string.digits\n return ''.join(random.choice(chars) for _ in range(length))", "line_number": null, "bug_type": null}
{"code": "def add(x, y): \n \"\"\"Returns the sum of x and y\"\"\"\n return x + y", "line_number": null, "bug_type": null}
{"code": "def determine_commission_rate(gross_sales):\n    if gross_sales >= 10000:\n        return 0.1\n    elif gross_sales >= 5000:\n        return 0.07\n    else:\n        return 0.05", "line_number": null, "bug_type": null}
{"code": "def celsiusToFahrenheit(temp):\n    return round((temp * 9/5) + 32, 2)", "line_number": null, "bug_type": null}
{"code": "def get_max_value(numbers): \n    return max(numbers)\n\nprint(get_max_value(list))  # 6", "line_number": null, "bug_type": null}
{"code": "list_numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n\nfor num in list_numbers:\n    print(num**3)", "line_number": null, "bug_type": null}
{"code": "def max_num(list):\n  max_num = list[0]\n\n  for num in list:\n    if num > max_num:\n      max_num = num\n  \n  return max_num", "line_number": null, "bug_type": null}
{"code": "def deleteDuplicates(list): \n    final_list = [] \n    for num in list: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list", "line_number": null, "bug_type": null}
{"code": "my_list = ['A', 'B', 'C', 'D']\n\nfor item in my_list:\n    print(\"The item is: {}\".format(item))", "line_number": null, "bug_type": null}
{"code": "def exponential_series(x,n):\n    sum = 0\n    for i in range(n+1):\n        sum += x ** i\n    return sum", "line_number": null, "bug_type": null}
{"code": "class Sum:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        \n    def add(self):\n        return self.x + self.y", "line_number": null, "bug_type": null}
{"code": "import random\nimport string\n\ndef generate_password():\n password_characters = string.ascii_letters + string.digits + string.punctuation\n password = ''.join(random.choice(password_characters) for i in range(8))\n print(password)\n\ngenerate_password()", "line_number": null, "bug_type": null}
{"code": "def check_number(num):\n  if (num > 0 and num < 11):\n    return True\n  else:\n    return False", "line_number": null, "bug_type": null}
{"code": "def count_vowels(string):\n    count = 0\n    vowels = set(\"aeiouAEIOU\")\n    for letter in string:\n        if letter in vowels:\n            count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "def f(n):\n    for i in range(1, 11):\n        print(\"{} * {} = {}\".format(n, i, n*i))", "line_number": null, "bug_type": null}
{"code": "def list_generator(input_list):\n    for item in input_list:\n        yield item\n\ngen = list_generator([1,3,5,7,9])\nfor item in gen:\n    print(item)", "line_number": null, "bug_type": null}
{"code": "def print_unique(my_list):\n    seen = set()\n    for x in my_list:\n        if x not in seen:\n            print(x)\n            seen.add(x)", "line_number": null, "bug_type": null}
{"code": "def count_vowels(string): \n    vowels = \"aeiou\"\n    count = 0\n    for s in string:\n        if s.lower() in vowels:\n            count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "sentence = \"I love walking on the beach\"\nold_word = \"walking\"\nnew_word = \"swimming\"\n\nnew_sentence = sentence.replace(old_word, new_word)\n\nprint(\"The new sentence is: '{}'\".format(new_sentence))", "line_number": null, "bug_type": null}
{"code": "student_marks = { \n    \"John\" : 90, \n    \"Levi\" : 85, \n    \"Jill\" : 95, \n    \"Sara\" : 75\n}", "line_number": null, "bug_type": null}
{"code": "def sum_list(list):\n    sum_list = 0\n    for num in list:\n        sum_list += num\n    return sum_list", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n fact = 1\n for i in range(2,n+1):\n  fact = fact * i\n return fact", "line_number": null, "bug_type": null}
{"code": "num = int(input(\"Enter a positive integer: \"))\n\nwhile num > 0:\n    print(num)\n    num -= 1\n\nprint(\"Done!\")", "line_number": null, "bug_type": null}
{"code": "def reverse_string(input_string):\n    reversed_string = ''\n    for i in range(len(input_string)-1, -1, -1):\n        reversed_string += input_string[i]\n    return reversed_string", "line_number": null, "bug_type": null}
{"code": "def check_sum(numbers, target):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False", "line_number": null, "bug_type": null}
{"code": "for x in [1,2,3]:\n  for y in [4,5,6]:\n      for z in [7,8,9]:\n          print(x,y,z)", "line_number": null, "bug_type": null}
{"code": "def product_of_list(list):\n    output = {}\n    for element in list:\n        output[element] = element * element\n    return output\n\nprint(product_of_list([7, 8, 5]))", "line_number": null, "bug_type": null}
{"code": "import random\nrandom_numbers = set()\nwhile len(random_numbers) < 10:\n    random_numbers.add(random.randint(0, 10))\n\nprint(random_numbers)", "line_number": null, "bug_type": null}
{"code": "def find_common_elements(list1, list2):\n    common = [x for x in list1 if x in list2]\n    return common", "line_number": null, "bug_type": null}
{"code": "my_list = [x for x in range(0, 51) if x % 3 == 0 and x % 5 == 0]", "line_number": null, "bug_type": null}
{"code": "class ListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None", "line_number": null, "bug_type": null}
{"code": "def find_max(nums):\n    '''Returns the maximum number in the list.'''\n    max_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n    \n    return max_val", "line_number": null, "bug_type": null}
{"code": "alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef identify_characters(alphabet):\n    char_list = []\n    for c in alphabet:\n        char_list.append(c)\n    return char_list", "line_number": null, "bug_type": null}
{"code": "def sort_list_of_dicts_by_key(my_list, key):\n    return sorted(my_list, key=lambda k: k[key])", "line_number": null, "bug_type": null}
{"code": "def remove_element(arr, element):\n    arr = [x for x in arr if x != element]\n    return arr", "line_number": null, "bug_type": null}
{"code": "import scipy.optimize as opt \n  \ndef optimize_function(function, initial_guess): \n    result = opt.minimize(function, initial_guess) \n    return result.x", "line_number": null, "bug_type": null}
{"code": "def is_digit_only(string):\n    for char in string:\n        if not char.isdigit():\n            return False\n    return True\n\nprint(is_digit_only(\"0123\"))", "line_number": null, "bug_type": null}
{"code": "def sum_of_squares(n):\n    result = 0\n    for i in range(n+1):\n        result += i**2\n    return result", "line_number": null, "bug_type": null}
{"code": "nums = [5, 10, 20, 6, 8]\nmax_num = max(nums)\nmax_index = nums.index(max_num)\n\nprint(max_index)", "line_number": null, "bug_type": null}
{"code": "def convertToCamelCase(list):\n    camelCaseList = []\n\n    for string in list:\n        string = string.capitalize()\n        camelCaseList.append(string)\n\n    return ''.join(camelCaseList)", "line_number": null, "bug_type": null}
{"code": "def sum_elements(arr):\n    return sum(arr) # return sum of elements of arr with one line of code.", "line_number": null, "bug_type": null}
{"code": "def absolute_difference(A, B): \n    return abs(A - B) \n  \n# Driver Code \nA = 9\nB = 5\nprint(absolute_difference(A, B))", "line_number": null, "bug_type": null}
{"code": "data = [1, 2, 3, 4]\n\nresult = [x for x in data if x > 2]", "line_number": null, "bug_type": null}
{"code": "def func(a, b): \n  c = a + b \n  return c \n\na = 4 \nb = 5 \n\nres = func(a, b) \nprint(res)", "line_number": null, "bug_type": null}
{"code": "import pyttsx3\n\ndef text_to_speech(sentence):\n    engine = pyttsx3.init()\n    engine.say(sentence)\n    engine.runAndWait()\n    \ntext_to_speech(\"Hello, this is a simple sentence\")", "line_number": null, "bug_type": null}
{"code": "def merge_dict(dict_a, dict_b):\n    merged_dict = {**dict_a, **dict_b}\n    return merged_dict", "line_number": null, "bug_type": null}
{"code": "list_of_ints = [1, 3, 6, 8, 10]\n\nlist_of_ints.reverse()\n\nprint(list_of_ints) # [10, 8, 6, 3, 1]", "line_number": null, "bug_type": null}
{"code": "def sum_tree(root):\n    if root is None:\n        return 0\n\n    return root.val + sum_tree(root.left) + sum_tree(root.right)", "line_number": null, "bug_type": null}
{"code": "def item_counts(fruits):\n    counts = {}\n    for k, v in fruits.items():\n        counts[k] = v\n    return counts", "line_number": null, "bug_type": null}
{"code": "def convert_string_case(string):\n    new_string = string.swapcase()\n    return new_string\n\nstring = \"this Is A TeST\"\nnew_string = convert_string_case(string)\nprint(new_string)", "line_number": null, "bug_type": null}
{"code": "def remove_duplicate_characters(string):\n    result = \"\"\n    seen = set()\n    for char in string:\n        if char not in seen:\n            seen.add(char)\n            result += char\n    return result\n\nprint(remove_duplicate_characters(\"bufferoverflow\"))", "line_number": null, "bug_type": null}
{"code": "def two_sum(numbers, given):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == given:\n                return True\n    return False", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef random_num(start, stop):\n    return random.randint(start, stop)\n\n\n# Example\nnum = random_num(0, 10)\nprint(num)", "line_number": null, "bug_type": null}
{"code": "def is_even(n):\n    if n % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n\nis_even(4)", "line_number": null, "bug_type": null}
{"code": "def sort_names(names):\n    names.sort()\n    return names\n\nnames = [\"John\", \"Harry\", \"Robert\"]\nresult = sort_names(names)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "import requests\n\nurl = \"https://www.example.com/\" \nresponse = requests.get(url) \n\nif response.status_code == 200: \n    print(response.content) \nelse:\n    print(\"Error fetching the page\")", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef shuffle(arr):\n    random.shuffle(arr)\n    return arr \n\nmy_arr = [1, 5, 9, 4, 2]\n\nprint(shuffle(my_arr))", "line_number": null, "bug_type": null}
{"code": "def fahrenheit_to_celsius(temp):\n    celsius = (temp - 32) * 5/9 \n    return round(celsius, 2)", "line_number": null, "bug_type": null}
{"code": "class Employee:\n    def __init__(self, name, job_title, job_number):\n        self.name = name\n        self.job_title = job_title\n        self.job_number = job_number", "line_number": null, "bug_type": null}
{"code": "def get_string_length(string_1, string_2):\n    return len(string_1 + string_2)", "line_number": null, "bug_type": null}
{"code": "def count_occurrences(haystack, needle):\n    count = 0\n    for char in haystack:\n        if char == needle:\n            count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "formatted = '{\\n  \"name\":\"John\",\\n  \"age\":30,\\n  \"city\":\"New York\"\\n}'", "line_number": null, "bug_type": null}
{"code": "total = 0\nfor i in range(1, 10):\n    if i % 2 != 0:\n        total += i\nprint(total)", "line_number": null, "bug_type": null}
{"code": "import numpy as np\nsequence = np.array([1, 4, 6, 5, 9], dtype=np.float64)\ndef calculate_mean(sequence):\n    return np.mean(sequence)", "line_number": null, "bug_type": null}
{"code": "from collections import Counter\n\ntext = \" Python is a high-level programming language.\"\nwords = text.split()\n\nfrequencies = Counter(words)\n\n# printing five most frequent words \nfrequent_words = frequencies.most_common(5)\n\nprint(frequent_words)", "line_number": null, "bug_type": null}
{"code": "def calculate_bmi(weight, height):\n    bmi = weight/(height**2)\n    return bmi", "line_number": null, "bug_type": null}
{"code": "list_of_numbers = [24, 14, 67, 89, 34, 52]\nprint(min(list_of_numbers))", "line_number": null, "bug_type": null}
{"code": "def search_substring(string, substring):\n    index = string.find(substring)\n    return index \n\nresult = search_substring(\"hello world\", \"or\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "import requests\n\nurl = 'https://www.example.com/users'\nresponse = requests.get(url)\ndata = response.json()\n\nfor user in data:\n    print(user['name'])", "line_number": null, "bug_type": null}
{"code": "def remove_item(item, list): \n    list.remove(item) \n    return list\n  \nlist_org = [8, 4, 5, 9, 2]\n  \nresult = remove_item(5, list_org)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "for i in range(100):\n    if (i > 10):\n        break\n    print(i)", "line_number": null, "bug_type": null}
{"code": "class Employee:\n    def __init__(self, emp_id, name, department, salary):\n        self.emp_id = emp_id\n        self.name = name\n        self.department = department\n        self.salary = salary", "line_number": null, "bug_type": null}
{"code": "def sum_cubes(n): \n    sum = 0\n    for i in range(1,n+1): \n        sum += i**3 \n    return sum", "line_number": null, "bug_type": null}
{"code": "def GCD(x, y):\n    while(y != 0):\n        temp = y\n        y = x % y\n        x = temp\n    return x", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(lst):\n  result = []\n  curr = lst[0]\n\n  for num in lst:\n    if num != curr:\n      result.append(num)\n      curr = num\n  return result", "line_number": null, "bug_type": null}
{"code": "def combine_lists(list1, list2):\n    combined_list = [(list1[i], list2[i]) for i in range(len(list1))]\n    return combined_list", "line_number": null, "bug_type": null}
{"code": "def is_even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "def createDict(keys, values):\n  dict = {}\n  for i in range(len(keys)):\n    dict[keys[i]] = values[i]\n  return dict", "line_number": null, "bug_type": null}
{"code": "import json\n\njson_str = '{\"name\": \"GPT\", \"type\": \"AI\"}'\n\ndict_x = json.loads(json_str)\nprint(dict_x)", "line_number": null, "bug_type": null}
{"code": "def check_duplicates(A):\n    seen = set()\n    for elem in A:\n        if elem in seen:\n            return True\n        seen.add(elem)\n    return False", "line_number": null, "bug_type": null}
{"code": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello World!\"\n\napp.run()", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef shuffle(lst):\n    random.shuffle(lst)\n    return lst\n\narr = [i for i in range(10)]\nprint(shuffle(arr))", "line_number": null, "bug_type": null}
{"code": "def is_even(n):\n   if n % 2 == 0:\n    return True\n   else:\n    return False", "line_number": null, "bug_type": null}
{"code": "def mean(nums):\n    total = 0\n    for num in nums:\n        total += num\n    # Return the mean by dividing by the number of elements \n    return total / len(nums)", "line_number": null, "bug_type": null}
{"code": "def string_lengths(arr):\n    lengths = [len(s) for s in arr]\n    return lengths\n\nresult = string_lengths(['hello', 'world'])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def power_of_3(matrix):\n    for i in range(len(matrix)):\n       for j in range(len(matrix[0])): \n            matrix[i][j] = matrix[i][j] ** 3\n    return matrix", "line_number": null, "bug_type": null}
{"code": "def extract_long_words(s):\n words = s.split()\n filtered = [w for w in words if len(w) > 3]\n return filtered", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(string):\n    result = \"\"\n    for char in string:\n        if string.count(char) == 1:\n            result += char\n    return result", "line_number": null, "bug_type": null}
{"code": "def clean_string(s):\n clean_s = ''.join(c for c in s if c.isalnum())\n print(clean_s)", "line_number": null, "bug_type": null}
{"code": "def reverse_list(list):\n    return list[::-1]\n\nresult = reverse_list([1,2,3,4])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "class Node:\n  def __init__(self, data):\n   self.data = data\n   self.next = None\n\n  def add(self, new_node):\n   self.next = new_node", "line_number": null, "bug_type": null}
{"code": "dictionary = {\"apple\": 1, \"banana\": 2, \"carrot\": 3}\n\nfor item in dictionary:\n  print(\"{}: {}\".format(item, dictionary[item]))", "line_number": null, "bug_type": null}
{"code": "import detect_language\n\ntext = \"Bonjour tout le monde\"\nlanguage = detect_language.detect(text)\nprint(language) # fr", "line_number": null, "bug_type": null}
{"code": "def celsius_to_fahrenheit(celsius):\n    \"\"\"\n    This function converts the given celsius value to its corresponding fahrenheit value\n    \"\"\"\n    fahrenheit = (celsius * (9/5)) + 32\n    return fahrenheit", "line_number": null, "bug_type": null}
{"code": "{\n 'apple': 'This apple is not fresh.',\n 'orange': 'This orange has gone bad.',\n 'banana': 'This banana is too ripe.'\n}", "line_number": null, "bug_type": null}
{"code": "def add_numbers(a, b):\n    return a + b\n\nprint(\"The sum of 2 and 20 is: \", add_numbers(2, 20))", "line_number": null, "bug_type": null}
{"code": "def factorial(n): \n    if n == 0: \n        return 1 \n    else: \n        return n * factorial(n-1)", "line_number": null, "bug_type": null}
{"code": "def fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\nprint(fibonacci(10)) # outputs 55", "line_number": null, "bug_type": null}
{"code": "def get_even_numbers(lst):\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst", "line_number": null, "bug_type": null}
{"code": "s = 'abcdefghijklmnopqrstuvwxyz'\n\ndef func(s):\n    s_list = set()\n    for c in s:\n        s_list.add(c)\n    \n    return list(s_list)", "line_number": null, "bug_type": null}
{"code": "def average(a, b): \n    return (a + b) / 2\n\nprint(average(2, 3))", "line_number": null, "bug_type": null}
{"code": "#This code prints the numbers from 0 to 5.\nfor i in range(6):\n    print(i)", "line_number": null, "bug_type": null}
{"code": "a, b = 0, 1\nwhile b < 100:\n    print(a)\n    a, b = b, a + b", "line_number": null, "bug_type": null}
{"code": "def product(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product\n\nproduct([1, 2, 3, 4])", "line_number": null, "bug_type": null}
{"code": "from bs4 import BeautifulSoup\n\n\nclass HTMLParser:\n    def __init__(self, html_doc):\n        self.html_doc = html_doc\n\n    def parse(self):\n        soup = BeautifulSoup(self.html_doc, 'html.parser')\n        return soup", "line_number": null, "bug_type": null}
{"code": "def first_last(lst):\n    first_element = lst[0]\n    last_element = lst[-1]\n    return [first_element, last_element]\n\nprint(first_last([5,3,1,7,9]))", "line_number": null, "bug_type": null}
{"code": "list_of_string = [\"good\",\"weird\",\"great\",\"amazing\"]\n\nfiltered_list = [s for s in list_of_string if \"bad\" not in s]\n\nprint(filtered_list)", "line_number": null, "bug_type": null}
{"code": "class Object:\n  def __init__(self,attr1,attr2,attr3):\n    self.attr1 = attr1\n    self.attr2 = attr2\n    self.attr3 = attr3", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(lst): \n\treturn list(dict.fromkeys(lst)) \n\nresult = remove_duplicates([1, 2, 2, 4, 5]) \nprint(result)", "line_number": null, "bug_type": null}
{"code": "data = {\"name\": \"John\", \"age\": 25, \"hobby\": \"programming\"}\n\nlist = list(data.values())\n \nprint(list)\n# Output: [\"John\", 25, \"programming\"]", "line_number": null, "bug_type": null}
{"code": "class Student:\n def __init__(self, name, age, grade, major):\n  self.name = name\n  self.age = age\n  self.grade = grade\n  self.major = major", "line_number": null, "bug_type": null}
{"code": "def print_grid(grid_size):\n    for x in range(grid_size):\n        for y in range(grid_size):\n            print(grid_size, end=\" \")\n        print()\n\ngrid_size = 3\nprint_grid(grid_size)", "line_number": null, "bug_type": null}
{"code": "def char_count(string): \n    count = 0\n    for char in string: \n        count += 1\n    print(\"Number of characters:\", count)", "line_number": null, "bug_type": null}
{"code": "import calendar\n\n# Input the year and month\nyear = int(input('Enter year: '))\nmonth = int(input('Enter month: '))\n\n# Generate the calendar\ncal = calendar.month(year, month)\n\n# Print the calendar\nprint(cal)", "line_number": null, "bug_type": null}
{"code": "class Employee():\n    def __init__(self, name, salary, age):\n        self.name = name\n        self.salary = salary\n        self.age = age", "line_number": null, "bug_type": null}
{"code": "def remove_arr(arr):\n    result = []\n    for a in arr:\n        if a != 'b':\n            result.append(a)\n    return result", "line_number": null, "bug_type": null}
{"code": "def backwards_for_loop(n):\n  for i in range(n, 0, -1):\n    # Do something with i\n    print(i)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef coin_toss():\n    coin_side = random.choice(['Heads', 'Tails'])\n    print('The coin landed on', coin_side)\n\ncoin_toss()", "line_number": null, "bug_type": null}
{"code": "def find_average(a, b, c):\n  return (a + b + c) / 3\n\nresult = find_average(10, 20, 30)\nprint(result) # 20", "line_number": null, "bug_type": null}
{"code": "import random\n\nrandom_numbers = [random.randint(1,50) for _ in range(10)]", "line_number": null, "bug_type": null}
{"code": "text = \"the Cat in the hat\"\ntext = text.replace('  ', ' ').strip()\nprint(text)", "line_number": null, "bug_type": null}
{"code": "def is_divisible(n, m):\n    if (n % m == 0):\n        return True\n    else:\n        return False\n    \nprint(is_divisible(7, 2))  # Outputs False", "line_number": null, "bug_type": null}
{"code": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def print_person(self):\n        print('Name:', self.name, ', Age:', self.age)", "line_number": null, "bug_type": null}
{"code": "def is_perfect_square(n):\n  if n < 0: \n    return False\n  x = n\n  while x*x > n:\n      x = (x + n/x) // 2\n  return x*x == n", "line_number": null, "bug_type": null}
{"code": "def convert_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) / 1.8\n\n    return celsius\n\nfahrenheit = 212\ncelsius = convert_to_celsius(fahrenheit)\nprint(celsius)", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(arr):\n    new_list = []\n    for item in arr:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list", "line_number": null, "bug_type": null}
{"code": "def check_range(num, lower, upper):\n        return (num >= lower and num <= upper)\n \nprint(check_range(10, 10, 20)) # prints True", "line_number": null, "bug_type": null}
{"code": "def remove_multiple_of_three(list):\n  new_list = []\n  for item in list:\n    if item % 3 != 0:\n      new_list.append(item)\n  return new_list", "line_number": null, "bug_type": null}
{"code": "def celsius_to_fahrenheit(degrees_c):\n    return (degrees_c * 9/5) + 32", "line_number": null, "bug_type": null}
{"code": "import time \n\nstart = time.time()\n\ndef foo(): \n for i in range(1000): \n  print('Hello World', i)\n\nfoo()\n\nend = time.time()\n\nprint('Time Taken:', end - start)", "line_number": null, "bug_type": null}
{"code": "pre = \"PRE-\"\nsuf = \"-SUF\"\n\nenriched_list = [ pre + s + suf for s in list]\n\nprint(enriched_list)", "line_number": null, "bug_type": null}
{"code": "import xml.etree.ElementTree as ET\n\ndef parse_xml(xml_file):\n    root = ET.parse(xml_file).getroot()\n    for child in root:\n        print(child.tag, child.attrib)", "line_number": null, "bug_type": null}
{"code": "l = [2, 3, 4]\nfor n in l:\n    print(n)", "line_number": null, "bug_type": null}
{"code": "def larger_num(a, b):\n    if a > b:\n        return a\n    else:\n        return b", "line_number": null, "bug_type": null}
{"code": "def sum_of_squares(numbers):\n    total = 0\n    for num in range(1,numbers+1):\n        total += num**2\n    print(total)\n\nsum_of_squares(10)", "line_number": null, "bug_type": null}
{"code": "def fibonacci(n):\n  if n <= 2:\n    return 1\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)\n  \nprint(fibonacci(5)) # 5", "line_number": null, "bug_type": null}
{"code": "if 0 <= 3 <= 10:\n print('Number is within the range')\nelse:\n print('Number is not within the range')", "line_number": null, "bug_type": null}
{"code": "def remove_even(list):\n    return [i for i in list if i%2 != 0]", "line_number": null, "bug_type": null}
{"code": "hash_table = {1: 1, 2: 2, 3: 3, 4: 4}", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnum = 5\nprint(\"The factorial of\", num, \"is\", factorial(num))", "line_number": null, "bug_type": null}
{"code": "# Base class\nclass Base:\n    pass\n\n# Derived class\nclass Derived(Base):\n    pass\n\n# Single inheritance\nclass SingleInheritance(Base):\n    pass\n\n# Multiple inheritance\nclass MultipleInheritance(Base, Derived):\n    pass", "line_number": null, "bug_type": null}
{"code": "def is_prime(num):\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "def calculate_square(x):\n    try:\n        return x * x\n    except TypeError:\n        print(\"The argument must be a number\")\n    except ValueError:\n        print(\"The argument cannot be a negative number\")\n        \ncalculate_square(10)", "line_number": null, "bug_type": null}
{"code": "def initialize_array(rows, cols): \n    array = [[0 for i in range(cols)] for j in range(rows)]\n    return array", "line_number": null, "bug_type": null}
{"code": "def format_string(string):\n    \"\"\"Function to format a string with the proper case and punctuation\"\"\"\n    return string.lower().capitalize() + \".\"", "line_number": null, "bug_type": null}
{"code": "max_num = -float('inf')\nfor num in [9, 2, 6, 3, -5, 5, 7]:\n    if num > max_num:\n        max_num = num\nprint(max_num)", "line_number": null, "bug_type": null}
{"code": "class ComplexNumber:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n    \n    def __str__(self):\n        return f\"{self.real} + {self.imaginary}i\"", "line_number": null, "bug_type": null}
{"code": "def print_even(nums):\n  for num in nums:\n    if num % 2 == 0:\n      print(num)\n      \nprint_even([1, 4, 5, 8, 9, 11])", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generateId():\n  return ''.join(str(random.randint(0,9)) for i in range(6))\n\nprint(generateId())", "line_number": null, "bug_type": null}
{"code": "def linearSearch(arr, x): \n    for i in range (len(arr)): \n        if arr[i] == x: \n            return i \n    return -1", "line_number": null, "bug_type": null}
{"code": "for num in range(1, 101):\n    if num % 3 == 0:\n        print('Fizz')\n    else:\n        print(num)", "line_number": null, "bug_type": null}
{"code": "def is_greater(num, threshold):\n    if num > threshold:\n        return True\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i\n        return result", "line_number": null, "bug_type": null}
{"code": "import json\n\ngivenString = \"{\\\"name\\\": \\\"John Doe\\\", \\\"age\\\": 28}\"\n\ndata = json.loads(givenString)\n\nprint(data)", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(n):\n    n_str = str(n)\n    return n_str == n_str[::-1]", "line_number": null, "bug_type": null}
{"code": "import random\ndef random_permutation(input_array):\n    perm = []\n    while(len(input_array) > 0):\n        el = random.choice(input_array)\n        perm.append(el)\n        input_array.remove(el)\n    return perm", "line_number": null, "bug_type": null}
{"code": "def is_name_valid(name):\n    # Check if the name contains only alphabets\n    if name.isalpha():\n        return True\n    return False\n\nname = 'John'\nprint(is_name_valid(name))", "line_number": null, "bug_type": null}
{"code": "import itertools\n\ndef get_permutations(sentence):\n    sentence_list = sentence.split(\" \")\n    return list(itertools.permutations(sentence_list))\n\nif __name__ == '__main__':\n    print(get_permutations(\"the cat sat on the mat\"))", "line_number": null, "bug_type": null}
{"code": "import json\n\ndef parseJSON(jsonString):\n    data = json.loads(jsonString)\n    return data", "line_number": null, "bug_type": null}
{"code": "nameFirst = 'Alice'\nnameLast = 'Charlie'\nageFirst = 24\nageLast = 28", "line_number": null, "bug_type": null}
{"code": "list = [1, 5, -9, 8, 21]\nsorted_list = sorted(list, reverse=True, key= lambda x:x)\nprint(sorted_list)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_random_array(length):\n    return [random.randint(0, 99) for _ in range(length)]", "line_number": null, "bug_type": null}
{"code": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef greet():\n    return \"Hello world!\"\n\nif __name__ == \"__main__\":\n    app.run()", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_random_array(n):\n    array = [i for i in range(1, n + 1)]\n    random.shuffle(array)\n    return array\n\nresult = generate_random_array(7)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def remove_item(items, target):\n    return [i for i in items if i != target]", "line_number": null, "bug_type": null}
{"code": "import csv\n\nwith open(\"filename.csv\", 'r', newline='') as f:\n    csvReader = csv.reader(f)", "line_number": null, "bug_type": null}
{"code": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    \n    def area(self):\n        return self.width * self.height", "line_number": null, "bug_type": null}
{"code": "def centimeter_to_inches(cm):\n    inches = cm * 0.39\n    return inches\n\ncm = 10\ninches = centimeter_to_inches(cm)\nprint(inches)", "line_number": null, "bug_type": null}
{"code": "def string_length(word):\n  return len(word)\n\nprint(string_length('Hello World!'))\n# Output: 12", "line_number": null, "bug_type": null}
{"code": "import datetime\n\ndef log(content):\n timestamp = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n message = f\"{timestamp}: {content}\"\n print(message)\n \nlog('Logging Message')", "line_number": null, "bug_type": null}
{"code": "import random\n\nfor i in range(10):\n    print(random.randint(1, 10))", "line_number": null, "bug_type": null}
{"code": "def odd_numbers(numbers):\n return [n for n in numbers if n % 2 != 0]", "line_number": null, "bug_type": null}
{"code": "def calculateSum(a, b): \n    return int((b - a + 1) * (a + b) / 2)", "line_number": null, "bug_type": null}
{"code": "def filter_strings(strings, filter_function):\n    filtered = []\n    for string in strings:\n        if filter_function(string):\n            filtered.append(string)\n    return filtered", "line_number": null, "bug_type": null}
{"code": "def countElements(Array): \n    count = 0\n    for i in Array: \n        if i != -1: \n            count = count + 1\n        else: \n            break\n    return count", "line_number": null, "bug_type": null}
{"code": "import re\n\ndef remove_non_alphanum(str):\n return re.sub(r'[^\\w]', '', str)", "line_number": null, "bug_type": null}
{"code": "L = [1, 2, 2, 3, 4, 4] \n\nL = list(set(L)) \n\nprint(L)", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef get_unique_string():\n    characters = string.ascii_uppercase + string.digits\n    return ''.join(random.choice(characters) for _ in range(6))\n\nunique_string = get_unique_string()\nprint(unique_string)", "line_number": null, "bug_type": null}
{"code": "class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary", "line_number": null, "bug_type": null}
{"code": "def get_domain_name(url): \n    return url.split(\"/\")[2]\n\nprint(get_domain_name(\"https://www.google.com\"))  # prints www.google.com", "line_number": null, "bug_type": null}
{"code": "for i in range(1, 11):\n    print(str(i) + \" squared is \" + str(i ** 2))", "line_number": null, "bug_type": null}
{"code": "import json\n\ndata_string = '{\"FirstName\": \"John\", \"LastName\": \"Smith\"}'\ndata = json.loads(data_string)\n\nfor key, value in data.items(): \n    print(\"{} = {}\".format(key, value))", "line_number": null, "bug_type": null}
{"code": "temperatures_fahrenheit = [32, 64, 78, -10]\n\ntemperatures_celsius = [((temp-32)*5)/9 for temp in temperatures_fahrenheit]\nprint(temperatures_celsius)", "line_number": null, "bug_type": null}
{"code": "class Rectangle:\n  def __init__(self, length, width):\n    self.length = length\n    self.width = width", "line_number": null, "bug_type": null}
{"code": "def sum_squares(x, y):\n    return x**2 + y**2\n\nx = 2\ny = 4\ns = sum_squares(x, y)\nprint(\"The sum of two squares is {}\".format(s))", "line_number": null, "bug_type": null}
{"code": "class SomeClass:\n\n    def __init__(self, field1, field2):\n        self.field1 = field1\n        self.field2 = field2", "line_number": null, "bug_type": null}
{"code": "arr = [3, 6, 3, 2, 7, 5, 6]\n\ndef unique_elements(arr):\n  return list(set(arr))\n\nunique_arr = unique_elements(arr)\nprint(unique_arr)", "line_number": null, "bug_type": null}
{"code": "from datetime import datetime\n\nnow = datetime.now()\nprint(now.strftime(\"%Y-%m-%d %H:%M:%S\"))", "line_number": null, "bug_type": null}
{"code": "import random\n\nnames = [\"John\", \"Mary\", \"Paul\", \"Gerry\"]\n\nprint(\"The randomly chosen name is\", random.choice(names))", "line_number": null, "bug_type": null}
{"code": "def sumOfSquares(a, b, c):\n     return a*a + b*b + c*c", "line_number": null, "bug_type": null}
{"code": "def sort_words(words):\n  return sorted(words)\n\nwords = [\"dog\", \"cat\", \"apple\", \"banana\"]\n\nsorted_words = sort_words(words)\n\nprint(sorted_words)", "line_number": null, "bug_type": null}
{"code": "import re\ntext = \"The cat jumped over the fence\"\npattern = \"cat\"\nmatch = re.search(pattern, text)\nif match:\n    print(\"Pattern found!\")", "line_number": null, "bug_type": null}
{"code": "def get_first_two(list):\n    return list[:2]\n\nlist = [1,2,3,4,5] \nprint(get_first_two(list)) # returns [1,2]", "line_number": null, "bug_type": null}
{"code": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\np = Person(\"John\", 18)\nprint(p.name, p.age)", "line_number": null, "bug_type": null}
{"code": "numbers = [4, 7, 2, 3]\nnumbers.sort(reverse=True)\nprint(numbers)", "line_number": null, "bug_type": null}
{"code": "from sklearn.cluster import KMeans\n\ndef k_means_clustering(data, num_clusters):\n    kmeans = KMeans(n_clusters=num_clusters, random_state=0).fit(data)\n    labels = kmeans.labels_\n    return labels", "line_number": null, "bug_type": null}
{"code": "def capitalize(string):\n    words = string.split()\n    capitalized_words = [word.capitalize() for word in words]\n    return \" \".join(capitalized_words)", "line_number": null, "bug_type": null}
{"code": "def sentence_to_upper(sentence):\n    return sentence.upper()\n\nprint(sentence_to_upper(\"This is an example sentence.\"))", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef coin_flip():\n\tif random.random() < 0.5:\n\t\treturn \"Heads\"\n\telse:\n\t\treturn \"Tails\"\n\nprint(coin_flip())", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\t\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "line_number": null, "bug_type": null}
{"code": "import git\n\n# Clone a remote Git repository\nrepo = git.Repo.clone_from(\"https://github.com/username/repo.git\")", "line_number": null, "bug_type": null}
{"code": "words = \"hello world\"\nwords = words.split()\n\nnew_words = [word.capitalize() for word in words]\nmodified_string = \" \".join(new_words)\n\nprint(modified_string)", "line_number": null, "bug_type": null}
{"code": "def find_duplicates(arr):\n    duplicates = []\n    seen = set()\n    for i in arr:\n        if i not in seen:\n            seen.add(i)\n        else:\n            duplicates.append(i)\n    return duplicates", "line_number": null, "bug_type": null}
{"code": "import requests\n \nurl = 'http://example.com'\n \nr = requests.get(url)\nhtml = r.text\n \nwith open('page.html', 'w') as f:\n f.write(html)", "line_number": null, "bug_type": null}
{"code": "def sum_of_two(x, y):\n  result = 0\n  for i in range(x, y+1):\n    result += i\n  return result", "line_number": null, "bug_type": null}
{"code": "def evaluate_string(string):\n if string == 'The sky is blue':\n  return True\n else:\n  return False", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef random_number():\n    return random.randint(1, 1000)\n\nprint(random_number())", "line_number": null, "bug_type": null}
{"code": "import numpy as np\n\nrandom_matrix = np.random.randint(1, 100, size=(5, 5))\nprint(random_matrix)", "line_number": null, "bug_type": null}
{"code": "def add_number(a, b):\n    try:\n        return a + b \n    except TypeError:\n        print(\"Please enter numeric values\")", "line_number": null, "bug_type": null}
{"code": "def classify(animal):\n    if animal == \"hummingbird\":\n        return \"Bird\" \n    else:\n        return \"Mammal\"", "line_number": null, "bug_type": null}
{"code": "list = [-3, -2, 0, 4, 5]\n\nlist = [x for x in list if x >= 0] \n\nprint(list)", "line_number": null, "bug_type": null}
{"code": "import numpy as np\n\nrandom_numbers = np.random.uniform(0, 1, 100000)", "line_number": null, "bug_type": null}
{"code": "import math\n\ndef square_root(num):\n    return math.sqrt(num)\n\nnum = 49\nprint(\"Square root of \", num, \" is: \", square_root(num))", "line_number": null, "bug_type": null}
{"code": "def Multiply(a, b):\n    product = 0\n    i = 0 \n    while i < b:\n        product = product + a\n        i = i + 1\n    return product", "line_number": null, "bug_type": null}
{"code": "import itertools\n\nset_ABC = set(list('ABC'))\nall_permutations = list(itertools.permutations(set_ABC))\n\n# print all obtained permutations\n{print(''.join(words)) for words in all_permutations}", "line_number": null, "bug_type": null}
{"code": "word = input('Enter word: ')\n\nif word.lower() == 'super':\n print('Object found')", "line_number": null, "bug_type": null}
{"code": "def odd_count(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if i%2 != 0:\n            count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(lst): \n\treturn list(set(lst)) \nremove_duplicates([1,1,3,4,4,5])", "line_number": null, "bug_type": null}
{"code": "def reverse_string(string): \n    return string[::-1] \n    \n# Time Complexity: O(n)\n# Space Complexity: O(1)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef find_max(lst):\n max_val = max(lst)\n\n return max_val\n\nlst = [random.randint(1, 100) for _ in range(20)]\nprint(lst)\nanswer = find_max(lst)\nprint(answer)", "line_number": null, "bug_type": null}
{"code": "string1 = 'Inception'\nstring2 = 'Interstellar'\n\nif len(string1) > len(string2):\n    print(string1)\nelse:\n    print(string2)", "line_number": null, "bug_type": null}
{"code": "import random\nrandom_number_list = random.sample(range(1, 100), 50)\nprint(random_number_list)", "line_number": null, "bug_type": null}
{"code": "import psycopg2\n\ntry:\n    conn = psycopg2.connect(\"dbname='testdb' user='user1' host='localhost' password='password'\")\nexcept:\n    print(\"Connection failed\")\n\ncur = conn.cursor()", "line_number": null, "bug_type": null}
{"code": "def is_substring(string_1, string_2):\n    \n    if string_1 in string_2:\n        return True\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "import random\n \ndef generate_random_letter():\n    alphabet = list(map(chr, range(65, 91)))\n    random_letter = random.choice(alphabet)\n \n    return random_letter\n \nrandom_letter = generate_random_letter()\nprint(random_letter)", "line_number": null, "bug_type": null}
{"code": "def capitalize_words(string):\n words = string.split(' ')\n capitalized = [word.capitalize() for word in words]\n return ' '.join(capitalized)", "line_number": null, "bug_type": null}
{"code": "def stringToUpper(str):\n    return str.upper()\n\ninputStr = \"hello world\"\n\noutputStr = stringToUpper(inputStr)\n\nprint(outputStr)", "line_number": null, "bug_type": null}
{"code": "class Car:\n    def __init__(self, top_speed, make, color):\n        self.top_speed = top_speed\n        self.make = make\n        self.color = color", "line_number": null, "bug_type": null}
{"code": "def reverseString(userString):\n wordList = userString.split(\" \")\n reversedStringList = list(reversed(wordList))\n\n return reversedStringList\n\nprint(reverseString(\"The quick brown fox.\"))", "line_number": null, "bug_type": null}
{"code": "def word_count(string):\n    words = string.split()\n    return len(set(words))\n\nif __name__ == '__main__':\n    output = word_count(\"The quick brown fox jumped over the lazy dog\")\n    print(output)", "line_number": null, "bug_type": null}
{"code": "def multiply_by_index(numbers):\n    for i in range(len(numbers)):\n        numbers[i] *= i\n    return numbers", "line_number": null, "bug_type": null}
{"code": "class Movie:\n    def __init__(self, title, rating):\n        self.title = title\n        self.rating = rating", "line_number": null, "bug_type": null}
{"code": "strings = [\"apple\", \"banana\", \"cherry\"]\n\nfor string in strings:\n    print(string)", "line_number": null, "bug_type": null}
{"code": "class Counter:\n    def __init__(self):\n        self.counter = 0\n\n    def increase(self):\n        self.counter += 1\n\n    def decrease(self):\n        self.counter -= 1\n\n    def getter(self):\n        return self.counter", "line_number": null, "bug_type": null}
{"code": "class MobilePhone:\n    def __init__(self, brand, model, year, display_size):\n        self.brand = brand\n        self.model = model\n        self.year = year\n        self.display_size = display_size", "line_number": null, "bug_type": null}
{"code": "import json\n\nwith open('data.json', 'r') as f:\n data = json.load(f)\n\ndata_list = []\n\nfor item in data:\n data_list.append(item)\n\nprint(data_list)", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(4))", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_password(n):\n    password = ''\n    for i in range(n):\n        password += random.choice(string.ascii_letters + \n        string.digits + string.punctuation)\n    return password", "line_number": null, "bug_type": null}
{"code": "def contains(s1, s2):\n return s2 in s1\n\nstring1 = \"Hello World!\"\nstring2 = \"World\"\n\nprint(contains(string1, string2)) # True", "line_number": null, "bug_type": null}
{"code": "class Cube:\n    def __init__(self):\n        self.sideLengthA = 10\n        self.sideLengthB = 10\n        self.sideLengthC = 10", "line_number": null, "bug_type": null}
{"code": "my_obj = {\n    'a': 1,\n    'b': 2,\n    'c': 3\n}", "line_number": null, "bug_type": null}
{"code": "def search_for_item(strings, item):\n    for string in strings:\n        if string == item:\n            return True\n    return False", "line_number": null, "bug_type": null}
{"code": "def reverseArray(arr): \n    return arr[::-1] \n  \narr = [1,2,3,4,5] \nreverseArr = reverseArray(arr) \n  \nprint(\"Reversed array is\", reverseArr)", "line_number": null, "bug_type": null}
{"code": "# Python3 program to find frequency table \nfrom collections import Counter \ndef freq_table(arr):\n    return dict(Counter(arr))", "line_number": null, "bug_type": null}
{"code": "import random\n\nnumber = random.randint(10, 20)\nwhile (number == 14):\n  number = random.randint(10, 20)\n\nprint(number)", "line_number": null, "bug_type": null}
{"code": "def generate_poem(input): \n  poem = []\n  for i in range(len(input)):\n      line = ''\n      for j in range(i):\n          line += input[j] + ' '\n      poem.append(line)\n  return poem", "line_number": null, "bug_type": null}
{"code": "import json\n \ndef reformat_json(json_string):\n    return json.dumps(json.loads(json_string), indent=4, sort_keys=True)", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(arr): \n    new_arr = [] \n    \n    for i in arr: \n        if i not in new_arr: \n            new_arr.append(i) \n            \n    return new_arr", "line_number": null, "bug_type": null}
{"code": "def sum_nums(n):\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n\nprint(sum_nums(10))", "line_number": null, "bug_type": null}
{"code": "def string_to_int(string):\n    num = 0 \n    for char in string:\n        num = num * 10 + (ord(char) - ord('0')) \n    return num", "line_number": null, "bug_type": null}
{"code": "def print_words_in_order(string):\n    \"\"\"Print out all the words in the input in alphabetical order\"\"\"\n    words = string.split()\n    words.sort()\n    for word in words:\n        print(word)", "line_number": null, "bug_type": null}
{"code": "def is_substring(s, t):\n    if t in s:\n        return True\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "def list_to_dict(lst):\n    res = {}\n    for item in lst:\n        res[item] = True\n    return res", "line_number": null, "bug_type": null}
{"code": "def factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num - 1)\n\nprint(factorial(5))", "line_number": null, "bug_type": null}
{"code": "import random\nrand_nums = [None] * 10\nfor i in range(10):\n rand_nums[i] = random.random()\nprint(rand_nums)", "line_number": null, "bug_type": null}
{"code": "def print_histogram(nums):\n  for num in nums:\n    output = ''\n    times = num\n    while(times > 0):\n      output += '#'\n      times = times - 1\n    print(output)", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(array):\n    new_array = []\n    for element in array:\n        if element not in new_array:\n            new_array.append(element)\n    return new_array", "line_number": null, "bug_type": null}
{"code": "import random\n\nwords = [\"hello\", \"world\", \"hi\", \"moon\", \"sun\"]\n\nrandom_word = random.choice(words)\n\nprint(\"Random word: \" + random_word)", "line_number": null, "bug_type": null}
{"code": "def average_of_period(arr):\n    return sum(arr) / len(arr)\n\nresult = average_of_period([1, 3, 4, 5, 3, 9, 6])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "words_dict = {\n \"hello\": {},\n \"world\": {},\n \"foo\": {},\n \"bar\": {}\n}", "line_number": null, "bug_type": null}
{"code": "def reverse_words(sentence):\n words = sentence.split()\n reversed_words = words[::-1]\n return ' '.join(reversed_words)\n\nprint(reverse_words(\"This is a test sentence\"))\n\n# Output: \"sentence test a is This\"", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(variable):\n  var = variable.lower()\n  rev_var = var[::-1]\n  if (var == rev_var):\n    return True\n  else:\n    return False", "line_number": null, "bug_type": null}
{"code": "def random_array(n):\n    import random\n    arr = []\n    for _ in range(n):\n        arr.append(random.randint(0,9))\n    return arr\n    \narr = random_array(10)\nprint(arr)", "line_number": null, "bug_type": null}
{"code": "import datetime\n\ndef convert_to_date(input_date):\n    date_obj = datetime.datetime.strptime(input_date,\"%d/%m/%Y\")\n    return date_obj", "line_number": null, "bug_type": null}
{"code": "def sum_numbers(x, y):\n    return x + y\n  \nprint(sum_numbers(5, 8))", "line_number": null, "bug_type": null}
{"code": "def generate_combinations(list1, list2):\n    combinations = []\n    for x in list1:\n        for y in list2:\n            combination = (x, y)\n            combinations.append(combination)\n    return combinations", "line_number": null, "bug_type": null}
{"code": "def calc_sum(*args):\n    result = 0\n    for num in args:\n        result += num\n    return result\n\nresult = calc_sum(1, 2, 3, 4, 5)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "# Python3 program to return the sum of three numbers\n\ndef sum_three(a,b,c): \n    return a + b + c", "line_number": null, "bug_type": null}
{"code": "number = 5\nfor i in range(1, 11): \n    print(number, 'x', i, '=', number*i)", "line_number": null, "bug_type": null}
{"code": "def factorial(x):\n    if x == 0 or x == 1:\n        return 1\n    else:\n        return x * factorial(x-1)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generateEncryptionKey():\n    key = \"\"\n    for _ in range(32):\n        key += str(random.randint(0,9))\n    return key", "line_number": null, "bug_type": null}
{"code": "numbers = [1, 2, 3, 4, 5]\nresult = [num * 2 for num in numbers]", "line_number": null, "bug_type": null}
{"code": "def sortListInDescendingOrder(list):\n    return sorted(list, reverse=True)\n\nlist1 = [30, 10, 40, 20]\nsortedList = sortListInDescendingOrder(list1)\nprint(sortedList)", "line_number": null, "bug_type": null}
{"code": "def get_length(string):\n    return len(string)\n\nlength = get_length(\"Hello\")\nprint(length)", "line_number": null, "bug_type": null}
{"code": "def convert_str_list(x):\n    return x.split()\n\nprint(convert_str_list(\"This is a test\"))", "line_number": null, "bug_type": null}
{"code": "def sum_to(num):\n    sum = 0\n    for i in range(num+1):\n        sum += i\n    return sum\n \nnum = 5\nprint(sum_to(num))   # 15", "line_number": null, "bug_type": null}
{"code": "def factorial(n): \n    fact = 1\n    for i in range(2, n+1):\n        fact *= i\n    return fact", "line_number": null, "bug_type": null}
{"code": "def factorial(num): \n    if num == 0: \n        return 1 \n  \n    return num * factorial(num - 1) \n  \nnum = 6\nprint(\"Factorial of\", num, \"is\", factorial(num))", "line_number": null, "bug_type": null}
{"code": "def list_sum(nums): \n total = 0\n \n for num in nums:\n   total += num\n \n return total\n\nlist_sum([1, 3, 5, 8]) # output: 17", "line_number": null, "bug_type": null}
{"code": "def common_in_two_lists(list1, list2):\n    common_elements = []\n    for number in list1:\n        if number in list2:\n            common_elements.append(number)\n    return common_elements", "line_number": null, "bug_type": null}
{"code": "import random\n\n# Generate a random list of numbers\nnums = []\nfor _ in range(25):\n   nums.append(random.randint(0, 10))\n\nprint(nums)", "line_number": null, "bug_type": null}
{"code": "i = 0\n\nwhile i <= 20:\n    if i % 2 == 0:\n        print(i)\n    i += 1", "line_number": null, "bug_type": null}
{"code": "def gcd(a,b): \n      \n    if b == 0: \n        \n        return a \n      \n    return gcd(b, a % b)", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(list_a):\n    result = []\n    for a in list_a:\n        if a not in result:\n            result.append(a)\n    return result", "line_number": null, "bug_type": null}
{"code": "def classify_rain(temp, humidity):\n    if temp < 70 and humidity > 0.7:\n        return 'raining'\n    else:\n        return 'not raining'", "line_number": null, "bug_type": null}
{"code": "arr = [i for i in range(11) if i % 2 == 0]", "line_number": null, "bug_type": null}
{"code": "import json\n\njson_object = { \"name\": \"John\", \"age\": 30, \"City\": \"New York\" }\n\ndict = json.loads(json.dumps(json_object))\n\nprint(dict)", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(input_str):\n reversed_str = input_str[::-1]\n return input_str == reversed_str", "line_number": null, "bug_type": null}
{"code": "def sum_of_numbers(n):\n    return int(n * (n + 1) / 2)", "line_number": null, "bug_type": null}
{"code": "def count_differences(str1, str2): \n    differences = 0 \n    for letter1, letter2 in zip(str1, str2): \n        if letter1 != letter2: \n            differences +=1 \n    return differences", "line_number": null, "bug_type": null}
{"code": "def preorder_traversal(root):\n    if root is None: \n        return\n    \n    print (root.data, end = ' ')\n    \n    preorder_traversal(root.left) \n    preorder_traversal(root.right)", "line_number": null, "bug_type": null}
{"code": "def oddNumbers(n):\n    for i in range(0, n + 1):\n        if i % 2 != 0:\n            yield i\n\nn = 10\nfor num in oddNumbers(n):\n    print(num)", "line_number": null, "bug_type": null}
{"code": "query = 'CREATE TABLE employees (id INTEGER PRIMARY KEY, name VARCHAR(255), salary INTEGER)'", "line_number": null, "bug_type": null}
{"code": "def encode_string(encoding_string):\n    encoded_string = \"\"\n    for char in encoding_string : \n        encoded_string += str(ord(char)) + \" \"\n    return encoded_string", "line_number": null, "bug_type": null}
{"code": "class TwoStringObject:\n    def __init__(self, str1, str2):\n        self.str1 = str1\n        self.str2 = str2", "line_number": null, "bug_type": null}
{"code": "import random\n \nnums = []\nfor i in range(10):\n nums.append(random.randint(1, 100))\n \nprint(nums)", "line_number": null, "bug_type": null}
{"code": "table = dict()\n\ntable['one'] = 1\ntable['two'] = 2\ntable['three'] = 3", "line_number": null, "bug_type": null}
{"code": "def char_count(text):\n  chars = {}\n  for char in text:\n    if char in chars:\n      chars[char] += 1\n    else:\n      chars[char] = 1\n  return chars", "line_number": null, "bug_type": null}
{"code": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "line_number": null, "bug_type": null}
{"code": "numbers = [80, 85, 90, 75, 95]\n\ntotal = 0\nfor number in numbers:\n total += number\n\nclass_average = total / len(numbers)\nprint(class_average)", "line_number": null, "bug_type": null}
{"code": "def reverse_words(string): \n    words = string.split(' ') \n    reverse = words[::-1] \n    return ' '.join(reverse)", "line_number": null, "bug_type": null}
{"code": "def hypotenuse(a, b):\n  return (a**2 + b**2) ** 0.5\n\nprint(hypotenuse(3, 4)) # 5.0", "line_number": null, "bug_type": null}
{"code": "for x in range(1, 10):\n    for y in range(1, 10):\n        print('{} x {} = {}'.format(x, y, x*y))", "line_number": null, "bug_type": null}
{"code": "class MyList(list):\n  def __init__(self):\n    super().__init__()\n  def some_method(self):\n    pass", "line_number": null, "bug_type": null}
{"code": "numbers = [1, 2, 3, 4, 5]\n \nnumbers.reverse()\n \nfor num in numbers:\n    print(num)", "line_number": null, "bug_type": null}
{"code": "items = [1, 2, 3, 4, 5]\nnew_items = [item**2 for item in items]", "line_number": null, "bug_type": null}
{"code": "def delete_item(lst, item):\n    if item in lst:\n        lst.remove(item)\n    return lst", "line_number": null, "bug_type": null}
{"code": "import nltk\n\nsentence = \"This is a sample sentence\"\n\ntokenized_words = nltk.word_tokenize(sentence)\n\nprint(tokenized_words)", "line_number": null, "bug_type": null}
{"code": "def get_max(a, b):\n  if a > b:\n    return a\n  else:\n    return b", "line_number": null, "bug_type": null}
{"code": "def cube_sum(nums): \n  sum = 0 \n  for num in nums: \n    sum += num*num*num \n  return sum", "line_number": null, "bug_type": null}
{"code": "from num2words import num2words\n\ndef int_to_words(num):\n    return num2words(num)", "line_number": null, "bug_type": null}
{"code": "def reverse(string):\n  return string[::-1]\n  \nstring = \"Hello world!\"\nprint(reverse(string))", "line_number": null, "bug_type": null}
{"code": "my_list = [3, 7, 10, 15, 17, 20]\n\nfor number in my_list: \n  if (number % 2 == 0): \n    print(number)", "line_number": null, "bug_type": null}
{"code": "lst = [4, 6, 1, 3, 8]\nlst.sort(reverse=True)\nprint(lst)  # [8, 6, 4, 3, 1]", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(arr):\n    seen = set()\n    result = []\n    for item in arr:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    \n    return result", "line_number": null, "bug_type": null}
{"code": "sum = 0\nfor i in range(1,101):\n    sum += 1/i\n\nprint(sum)", "line_number": null, "bug_type": null}
{"code": "def foo(list):        \n    list.append(1)         \n    list.append(2)\n    list.append(3)\n    return list\n\nlist = [1, 2, 3]", "line_number": null, "bug_type": null}
{"code": "def greater_of_two_numbers(int1, int2):\n    if int1 > int2:\n        return int1\n    else:\n        return int2", "line_number": null, "bug_type": null}
{"code": "def remove_spaces(s): \n   return s.replace(' ', '') \n\ns = input(\"Enter a string: \")\nprint(remove_spaces(s))", "line_number": null, "bug_type": null}
{"code": "list = [\"a\", \"\", \"b\", \"\", \"c\", \"\"] \n\nresult = [element for element in list if len(element) > 0] \n\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def split_list(string_list):\n    mid = len(string_list) // 2\n    return string_list[:mid], string_list[mid:]", "line_number": null, "bug_type": null}
{"code": "def get_string_value(input_dict):\n  \"\"\"Return string value in the input dictionary\"\"\"\n  output_value = \"\"\n  for key, value in input_dict.items():\n      output_value = str(value)\n  return output_value", "line_number": null, "bug_type": null}
{"code": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef detect_sentiment(sentence):\n nltk.download('vader_lexicon')\n sid = SentimentIntensityAnalyzer()\n scores = sid.polarity_scores(sentence)\n return scores['compound']", "line_number": null, "bug_type": null}
{"code": "def count_vowels(word):\n  answer = 0\n  for letter in word:\n    if letter.lower() in 'aeiou':\n      answer += 1\n  return answer\n\nprint(count_vowels('amazing'))", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef random_string(stringLength=10):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))\n\nprint(random_string())", "line_number": null, "bug_type": null}
{"code": "def firstDigit(num):\n\treturn int(str(num)[0])\n\nnum = 2458\nprint(firstDigit(num)) # 2", "line_number": null, "bug_type": null}
{"code": "import numpy as np\n\narray = np.random.randint(1, 10, size=(10, 7))\nprint(array)", "line_number": null, "bug_type": null}
{"code": "import random\n\nlist = [5, 2, 7, 1, 8]\nrandom.shuffle(list)\n\nprint(list) # Output -> [1, 8, 5, 2, 7]", "line_number": null, "bug_type": null}
{"code": "def filter_long_words(words):\n    return [word for word in words if len(word) > 6]", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n\n    res = 1\n    for i in range(2, n+1):\n        res *= i\n    return res", "line_number": null, "bug_type": null}
{"code": "import json\n\ndef parse_json(json_string):\n  json_data = json.loads(json_string)\n\n  result = []\n  for key, value in json_data.items():\n    result.append(f'{key}: {value}')\n\n  return result", "line_number": null, "bug_type": null}
{"code": "def print_sum(a, b):\n    \"\"\"\n    Print the sum of the two numbers\n    \"\"\"\n    print(a+b)", "line_number": null, "bug_type": null}
{"code": "import re\n\ndef is_alphanumeric(input_string):\n    # Using Regular Expressions, check if the given string contains only alphanumeric characters.\n    regex = re.compile('^[a-zA-Z0-9]+$')\n    return regex.match(input_string)", "line_number": null, "bug_type": null}
{"code": "from sklearn import tree\nX = [[0, 0], [1, 1]]\ny = [0, 1]\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X, y)", "line_number": null, "bug_type": null}
{"code": "def find_sum_of_digits(n):\n    sum = 0\n    while(n > 0):\n        rem = n % 10\n        sum += rem\n        n = n // 10\n    return sum", "line_number": null, "bug_type": null}
{"code": "for num in range(1, 20): \n    if num % 5 == 0: \n        print(num)", "line_number": null, "bug_type": null}
{"code": "def removeDuplicates(lst):\n return list(set(lst))\n\nlist = [1, 2, 3, 4, 4, 4, 5, 5]\nprint(removeDuplicates(list))", "line_number": null, "bug_type": null}
{"code": "def check_list_length(lists):\n    if len(lists) > 3:\n        return True\n    else:\n        raise ValueError(\"list length should be more than 3\")", "line_number": null, "bug_type": null}
{"code": "def is_even_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\nresult = is_even_odd(7)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def separate_odd_even(arr):\n    odd = []\n    even = []\n    for num in arr:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return odd, even", "line_number": null, "bug_type": null}
{"code": "num = int(input('Enter a number: '))\nsquare = num**2\nprint(f'Square of {num} is {square}')", "line_number": null, "bug_type": null}
{"code": "def pow_2(number):\n for i in range(number + 1):\n  print(2 ** i)\n  \npow_2(10)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_random_list(n):\n    res = []\n    for _ in range(n):\n        res.append(random.randint(1, 100))\n    return res", "line_number": null, "bug_type": null}
{"code": "class Car:\n    def __init__(self, name, model, price):\n        self.name = name\n        self.model = model\n        self.price = price", "line_number": null, "bug_type": null}
{"code": "def max_number(num1,num2,num3):\n  max_num=max(num1,num2,num3)\n  print(f\"The largest number is {max_num}\")", "line_number": null, "bug_type": null}
{"code": "a, b = 0, 1\nwhile b <= 100:\n    print(b)\n    a, b = b, a+b", "line_number": null, "bug_type": null}
{"code": "def alphabetical_sort(words):\n    return sorted(words)\n\nlist_of_words = [\"python\", \"javascript\", \"java\", \"ruby\"]\nsorted_list = alphabetical_sort(list_of_words)\nprint(sorted_list)", "line_number": null, "bug_type": null}
{"code": "def substitution_cipher(string):\n    cipher = \"\"\n    for i in string:\n        cipher += chr(ord('a') + (ord(i) - ord('a') + 13) % 26) \n    return cipher", "line_number": null, "bug_type": null}
{"code": "def greatest_of_two_integers(x, y):\n    if x > y:\n        return x\n    elif y > x:\n        return y\n    else:\n        return x", "line_number": null, "bug_type": null}
{"code": "sentence = \"This is a sample sentence\"\n\nwords = sentence.split()\nlong_words = [word for word in words if len(word) > 10]\n\nprint(long_words)", "line_number": null, "bug_type": null}
{"code": "import random\nimport string\n\ndef generate_password():\n password_length = 8\n chars = string.ascii_letters + string.digits \n return ''.join(random.choice(chars) for i in range(password_length))\n\nprint(generate_password())", "line_number": null, "bug_type": null}
{"code": "class AverageCalculator:\n    def average(self, nums):\n        sum = 0\n        for i in range(len(nums)):\n            sum += nums[i]\n\n        return sum / len(nums)", "line_number": null, "bug_type": null}
{"code": "def is_sorted(arr):\n  sorted_arr = sorted(arr)\n  if arr == sorted_arr:\n    return True\n  else:\n    arr.sort()\n    return arr", "line_number": null, "bug_type": null}
{"code": "text = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"\n\ncount = 0 \nfor char in text:\n    if char == 'a':\n        count += 1\n\nprint(count)", "line_number": null, "bug_type": null}
{"code": "def add(x, y): \n    return x + y \n  \nx = 5\ny = 10\n\nprint(add(x, y))", "line_number": null, "bug_type": null}
{"code": "import random\nimport string\n\ndef generate_password():\n password_characters = string.ascii_letters + string.digits + string.punctuation\n return ''.join(random.choice(password_characters) for x in range(8))\n\nprint(generate_password())", "line_number": null, "bug_type": null}
{"code": "import string\n\ndef clean_string(text):\n    return ''.join(c for c in text if c not in string.punctuation)", "line_number": null, "bug_type": null}
{"code": "def print_cube(num):\n    print(num**3)\n    \nnum = 3\nprint_cube(num)", "line_number": null, "bug_type": null}
{"code": "class Student:\n\n    def __init__(self, student_id, name):\n        self.student_id = student_id\n        self.name = name\n        \n    def get_details(self):\n        return self.student_id, self.name", "line_number": null, "bug_type": null}
{"code": "def sum_of_digits(n):\n   \"\"\"Find the sum of all the digits of an integer n\"\"\"\n   s = 0\n   while n:\n       s += n % 10\n       n //= 10\n   return s", "line_number": null, "bug_type": null}
{"code": "import random\nimport string\n\ndef create_password():\n    chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(chars) for _ in range(8))\n    return password\n\nprint(create_password())", "line_number": null, "bug_type": null}
{"code": "def check_list(list, element):\n    if element in list:\n        print(element, \"is in the list\")\n    else:\n        print(element, \"is not in the list\")", "line_number": null, "bug_type": null}
{"code": "def smallest_list(list_numbers):\n    smallest = list_numbers[0]\n    for i in list_numbers[1:]:\n        if i < smallest:\n            smallest = i\n    return smallest", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(list_of_strings):\n  unique_strings = set(list_of_strings)\n  return list(unique_strings)", "line_number": null, "bug_type": null}
{"code": "def poly_evaluation(x):\n  return x**2 - 4*x + 6\n\nx = 2\nresult = poly_evaluation(x)\nprint(result) # prints 0", "line_number": null, "bug_type": null}
{"code": "def sum_dict_items(dictionary):\n    total = 0\n    for key, value in dictionary.items():\n        total = total + value\n        return total", "line_number": null, "bug_type": null}
{"code": "def sum_of_digits(number):\n  sum_digits = 0\n  while number > 0:\n    sum_digits += (number % 10)\n    number //= 10\n  return sum_digits\n  \nprint(sum_of_digits(123))", "line_number": null, "bug_type": null}
{"code": "def min_num(x, y):\n  if x < y:\n    return x\n  else:\n    return y\n\nprint(min_num(5, 10))\n\n# Output\n5", "line_number": null, "bug_type": null}
{"code": "def reverse_string(string):\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string", "line_number": null, "bug_type": null}
{"code": "user_input = input(\"Please enter a word:\")\nwhile user_input != \"\":\n    print(user_input)\n    user_input = input(\"Please enter a word:\")", "line_number": null, "bug_type": null}
{"code": "class SortList:\n    def __init__(self, lst):\n        self.lst = lst\n        \n    def sort_list(self):\n        self.lst.sort()\n        return self.lst", "line_number": null, "bug_type": null}
{"code": "def find_max_number(numbers):\n    maximum = numbers[0]\n    for i in numbers:\n        if i > maximum:\n            maximum = i\n    return maximum", "line_number": null, "bug_type": null}
{"code": "def factorial(num):\n    result = 1\n    for i in range(1, num+1):\n        result *= i\n    return result\n\nn = int(input(\"Enter an Integer: \"))\nprint(factorial(n))", "line_number": null, "bug_type": null}
{"code": "import webbrowser\n\nurl = \"www.example.com\"\n\n# open the web page in a new browser tab\nwebbrowser.open_new_tab(url)", "line_number": null, "bug_type": null}
{"code": "def foo(my_list):\n    result = []\n    for element in my_list:\n        if 'foo' in element:\n            result.append('foo')\n    return result", "line_number": null, "bug_type": null}
{"code": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        \n    def get_info(self):\n        return \"Name: {}, Age: {}\".format(self.name, self.age)", "line_number": null, "bug_type": null}
{"code": "def multiply_numbers(x, y):\n    return x * y\n\nresult = multiply_numbers(15, 10)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def sum_digits(n):\n    sum = 0\n    while n > 0:\n        sum+= n % 10\n        n //= 10\n    return sum", "line_number": null, "bug_type": null}
{"code": "def min_product(a, b):\n    if a > b:\n        return a * b\n    else:\n        return a * b * (a - b)", "line_number": null, "bug_type": null}
{"code": "string = \"Hello, world!\"\nsubstring = \"world\"\nsubstitution = \"Python\"\n\nprint(string.replace(substring, substitution))", "line_number": null, "bug_type": null}
{"code": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]", "line_number": null, "bug_type": null}
{"code": "def sum_of_n_numbers(n):\n  sum = 0\n  for i in range(n+1):\n      sum += i\n  return sum", "line_number": null, "bug_type": null}
{"code": "def linear_search(arr, target):  \n    for i in range(len(arr)): \n        if arr[i] == target: \n            return i \n    return -1", "line_number": null, "bug_type": null}
{"code": "def random_number_generator(lhs, rhs):\n    '''This function generates a random number between given range (lhs, rhs)'''\n    import random\n    return random.randint(lhs, rhs)", "line_number": null, "bug_type": null}
{"code": "def sum_sq_list(lst): \n    sum = 0  \n    for i in lst: \n        sum += i * i \n    return sum", "line_number": null, "bug_type": null}
{"code": "def list_sums(lst1, lst2):\n    pairs = list(zip(lst1, lst2))\n    sums = [i1+i2 for (i1, i2) in pairs]\n    return sums", "line_number": null, "bug_type": null}
{"code": "def fill_missing_values(data):\n    for column in data.columns:\n        if data[column].isnull().any():\n            mean = data[column].mean()\n            data[column] = data[column].fillna(mean)\n    return data", "line_number": null, "bug_type": null}
{"code": "print(\"*\" * 10)\nfor i in range(4):\n    print(\"*      *\")\nprint(\"*\" * 10)", "line_number": null, "bug_type": null}
{"code": "def linear_search(arr, target):    \n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(mylist):\n    newlist = list(set(mylist))\n    return newlist\n\nmylist = ['apple', 'pineapple', 'apple', 'banana']\nprint(remove_duplicates(mylist))", "line_number": null, "bug_type": null}
{"code": "string = \"1,2,3,4,5\"\nlist = string.split(\",\")\nprint(list)", "line_number": null, "bug_type": null}
{"code": "def sort_dict_list(dict_list, sort_key):\n  return sorted(dict_list, key=lambda k: k[sort_key])", "line_number": null, "bug_type": null}
{"code": "def reverse_string(s):\n    if len(s) == 0:\n        return\n    else:\n        print(s[-1], end=\"\")\n        reverse_string(s[:-1])\n \n# Driver program\nstring = \"Hello World!\"\nreverse_string(string)", "line_number": null, "bug_type": null}
{"code": "import json\n\ndef is_valid_json(string):\n    try:\n        json.loads(string)\n        return True\n    except:\n        return False", "line_number": null, "bug_type": null}
{"code": "import numpy as np\n\ndef sum(arr):\n return np.sum(arr)\n\nsum([1,2,3,4]) # 10", "line_number": null, "bug_type": null}
{"code": "def function(n):\n    result = 0\n    for i in range(n):\n        result += (n * (i * (i+1)) // 2)\n    return result", "line_number": null, "bug_type": null}
{"code": "def sum_three_numbers(nums):\n    return sum(nums)\n\nresult = sum_three_numbers([5, 10, 8])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "original = [-1, -2, 5, 0, 6, 8, 4, 9]\nfiltered = [x for x in original if x > 0]\nprint(filtered)", "line_number": null, "bug_type": null}
{"code": "def transform_sum(numbers, transform_function):\n transformed_numbers = [transform_function(x) for x in numbers]\n return sum(transformed_numbers)", "line_number": null, "bug_type": null}
{"code": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age", "line_number": null, "bug_type": null}
{"code": "def convert_to_list(string):\n    return string.split()\n\nstring = \"Hello, World!\"\nwords_list = convert_to_list(string)\nprint(words_list)", "line_number": null, "bug_type": null}
{"code": "def classify(value, threshold):\n    if value < threshold[0]:\n        return 'low'\n    elif threshold[0] <= value < threshold[1]:\n        return 'medium'\n    else:\n        return 'high'", "line_number": null, "bug_type": null}
{"code": "primes = []\n\nfor x in range(2, 1001):\n    for i in range(2, x):\n        if x % i == 0:\n            break\n    else:\n        primes.append(x)\n\nprint(primes)", "line_number": null, "bug_type": null}
{"code": "def check_alphabet(s):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in alphabet:\n        if letter not in s:\n            return False\n    return True", "line_number": null, "bug_type": null}
{"code": "import requests\n\nurl = \"https://www.example.com\"\n\nresponse = requests.get(url)\nif response.status_code == 200:\n html = response.content\n print(html)", "line_number": null, "bug_type": null}
{"code": "def sum(x, y):\n return x + y\n\n# testing\nprint(sum(2, 3)) # Output: 5", "line_number": null, "bug_type": null}
{"code": "def same_charset(str1, str2):\n\t\n\tstr1 = sorted(str1) \n\tstr2 = sorted(str2)\n \n\tif(str1 == str2):\n\t\treturn True\n\telse:\n\t\treturn False", "line_number": null, "bug_type": null}
{"code": "while True:\n user_input = input(\"Enter your input: \")\n \n # handle user input\n if user_input == 'exit':\n  break", "line_number": null, "bug_type": null}
{"code": "letter = 's'\nstring = \"Mississippi\"\ncount = 0\nfor char in string:\n   if char == letter:\n       count += 1\nprint(count)", "line_number": null, "bug_type": null}
{"code": "def dot_product(x, y):\n    result = 0\n    for i in range(len(x)):\n        result += x[i] * y[i]\n    return result", "line_number": null, "bug_type": null}
{"code": "str = \"hello world\"\n\nfrom collections import Counter\n\ndef most_common_letter(str):\n    letters_count = Counter(str).most_common()\n    return letters_count[0][0]\n\nprint(most_common_letter(str))", "line_number": null, "bug_type": null}
{"code": "def max_val(arr):\n    max_val = 0\n    for num in arr:\n        if num > max_val:\n            max_val = num\n    return max_val", "line_number": null, "bug_type": null}
{"code": "# List of colors\ncolors = ['Red', 'Green', 'White', 'Black']\n\n# First color\nprint(colors[0])\n\n# Last color\nprint(colors[-1])", "line_number": null, "bug_type": null}
{"code": "def reverse_array(array):\n    reversed_array = array[::-1]\n    return reversed_array\n\nreversed_array = reverse_array([1,2,3,4,5])\nprint(reversed_array)", "line_number": null, "bug_type": null}
{"code": "def rev_string(input_str):\n    if len(input_str) == 0:\n        return input_str\n    else:\n        return rev_string(input_str[1:]) + input_str[0]", "line_number": null, "bug_type": null}
{"code": "class Job:\n    def __init__(self, title, company, location, job_type):\n        self.title = title\n        self.company = company\n        self.location = location\n        self.job_type = job_type", "line_number": null, "bug_type": null}
{"code": "def to_uppercase(items):\n    return [item.upper() for item in items]\n\nresult = to_uppercase(['Hello', 'World']) \nprint(result)", "line_number": null, "bug_type": null}
{"code": "def three_integers(x, y, z):\n  return x + y + z\n\nx = 5\ny = 8\nz = 10\n\nprint(three_integers(x, y, z))", "line_number": null, "bug_type": null}
{"code": "def average(a, b):\n    return (a + b) / 2\n\nresult = average(2, 3)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def calculate_total_cost(product_name, quantity, price):\n    return quantity * price\n\ntotal_cost = calculate_total_cost(\"Powerbank\", 3, 15)\nprint(\"Total cost of the purchase is $\" + str(total_cost))", "line_number": null, "bug_type": null}
{"code": "list = [10, 20, 30, 40]\n\nsum = 0\nfor i in list:\n sum += i\n\nprint(\"The sum is\", sum)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef create_random_structure(n):\n    structure = []\n    for i in range(n):\n        structure.append(random.randint(0, n))\n    return structure", "line_number": null, "bug_type": null}
{"code": "sentence = \"This is a sentence\"\nwords = sentence.split()\n \nfor word in words:\n    print(word)", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(given_list):\n    output = []\n    for num in given_list:\n        if num not in output:\n            output.append(num)\n    return output", "line_number": null, "bug_type": null}
{"code": "def get_occurrence_dict(list):\n    result_dict = {}\n    for element in list:\n        if element in result_dict:\n            result_dict[element] += 1\n        else:\n            result_dict[element] = 1\n    return result_dict", "line_number": null, "bug_type": null}
{"code": "def concatenate_list(list):\n    result = \"\"\n    for item in list:\n        result += item\n    return result", "line_number": null, "bug_type": null}
{"code": "def replicate_string(string, n):\n    \"\"\"This function takes in a string and an integer value n, \n    and returns a string with n replications of the input string.\n    \"\"\"\n    return string * n", "line_number": null, "bug_type": null}
{"code": "import random\n\narr = [random.randint(1, 100) for _ in range(10)]", "line_number": null, "bug_type": null}
{"code": "a = \"Apples\"\nb = \"Oranges\"\n\n#joining the strings, using the separator\njoinedString = a +\" \"+ \"and\" +\" \"+ b\n\n# print the joined string\nprint(joinedString)", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_random_string(length=5):\n  letters = string.ascii_letters + string.digits\n  return ''.join(random.choice(letters) for _ in range(length))", "line_number": null, "bug_type": null}
{"code": "for i in range(1,101):\n    square = i * i\n    print(f\"{i}:{square}\")", "line_number": null, "bug_type": null}
{"code": "def main(x):\n if x == 1:\n  print(2)\n else:\n  main(x + 1)\n \nmain(1)", "line_number": null, "bug_type": null}
{"code": "my_set = {10, 20, 30}\nfor i in my_set:\n    print(i)", "line_number": null, "bug_type": null}
{"code": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nfor p in soup.find_all('p'):\n print(p.text)", "line_number": null, "bug_type": null}
{"code": "def search_list(lst, s):\n for item in lst:\n  if item == s:\n   return True\n return False", "line_number": null, "bug_type": null}
{"code": "def sort_list(a_list):\n '''\n Sort the given list of strings in alphabetical order\n\n Args:\n a_list (list): List of strings\n\n Returns:\n list: Returns the sorted list in alphabetical order\n '''\n\n return sorted(a_list)", "line_number": null, "bug_type": null}
{"code": "import math\n\nnumber = 8\n\n# compute the square root of the given number\nsquare_root = math.sqrt(number)\n\n# print the square root\nprint(f\"The square root of {number} is {square_root}\")", "line_number": null, "bug_type": null}
{"code": "from collections import Counter\n\ndef count_letters(string):\n    return Counter(string)\n\nprint(count_letters(\"This is a sample string\"))", "line_number": null, "bug_type": null}
{"code": "numbers = [1, 2, 3, 4, 5]\ntotal = 0\n\nfor num in numbers:\n    total += num", "line_number": null, "bug_type": null}
{"code": "import wikipedia\n\ndef search_wikipedia(keyword):\n    results = wikipedia.search(keyword)\n    for result in results:\n        print(wikipedia.summary(result, sentences=2))\n\nsearch_wikipedia(\"machine learning\")", "line_number": null, "bug_type": null}
{"code": "def create_response(score):\n if score == 0:\n  message = \"Try again\"  \n elif score == 1:\n  message = \"Well done\"\n else:\n  message = \"\"\n \n return {\"score\": score, \"message\": message}", "line_number": null, "bug_type": null}
{"code": "mylist = [1, 5, 8, 3, 10]\n\nprint(max(mylist))", "line_number": null, "bug_type": null}
{"code": "import requests\n\nurl = 'https://www.example.com/'\nresp = requests.get(url)\nhtml = resp.content", "line_number": null, "bug_type": null}
{"code": "modified_list = [7, 15, 23, 31]\n\n# Python code\nsample_list = [3, 5, 7, 9]\n\nmodified_list = [x**2 - 2 for x in sample_list]", "line_number": null, "bug_type": null}
{"code": "max_number = max([7, 4, 5, 100, 2])\nprint(max_number)", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(s): \n    s = s.lower() \n    return s == s[::-1]", "line_number": null, "bug_type": null}
{"code": "loan_amount = 1000\ninterest_rate = 5\nnumber_of_years = 10\n\nsimple_interest = loan_amount * (interest_rate/100) * number_of_years\n\nprint(\"Simple interest = %.2f\" %simple_interest)", "line_number": null, "bug_type": null}
{"code": "def to_dict(words):\n    result = {}\n    for word in words:\n        result[word] = 1\n    return result\n\nresult = to_dict([\"Hello\", \"World\", \"Welcome\"])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef randomness_score(string):\n    random.seed(string)\n    score = 0\n    for i in range(100):\n        score += random.random()\n    return score", "line_number": null, "bug_type": null}
{"code": "command = input(\"Please enter your command: \")\n \nif command == \"Taking a break\":\n print(\"Taking a five minute break\")\n # code to execute the taking a break command\nelse:\n print(\"Invalid command\")", "line_number": null, "bug_type": null}
{"code": "import random\n\narray_length = 10\n\nmy_array = [random.randint(0, 10) for _ in range(array_length)]\n\nprint(my_array)", "line_number": null, "bug_type": null}
{"code": "import random\nimport string\n\ndef  generate_password():\n    chars = string.ascii_letters + string.digits\n    size = 8\n    return ''.join(random.choice(chars) for x in range(size))\n\nprint(generate_password())", "line_number": null, "bug_type": null}
{"code": "def sum(arr, n):\n    s = 0\n    for i in range(n):\n        s += arr[i]\n    return s", "line_number": null, "bug_type": null}
{"code": "name = \"John\"\nage = 15\nmarks = 90\n\nprint(\"Name: \", name)\nprint(\"Age: \", age)\nprint(\"Marks: \", marks)", "line_number": null, "bug_type": null}
{"code": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n \nprint(factorial(5))", "line_number": null, "bug_type": null}
{"code": "def string_lengths(strings):\n    lengths = []\n    for string in strings:\n        lengths.append( (len(string), string) ) \n    return lengths", "line_number": null, "bug_type": null}
{"code": "list = ['apple', 'banana', 'cat', 'dog', 'elephant']\nnew_list = [x.upper() for x in list]", "line_number": null, "bug_type": null}
{"code": "def two_letter_filter(word):\n    if len(word) == 2:\n        return True\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True", "line_number": null, "bug_type": null}
{"code": "import random\n\nn = 10\nlst = [random.randrange(1, 101) for _ in range(n)]\nsum_lst = sum(lst)\n\nprint(\"Random list: \", lst)\nprint(\"Sum of the list: \", sum_lst)", "line_number": null, "bug_type": null}
{"code": "def func1(a):\n    return a**2\n\ndef func2(a):\n    return a**2 + 1", "line_number": null, "bug_type": null}
{"code": "def capitalize_words(string):\n  words = string.split()\n  capitalized_words = [word.capitalize() for word in words]\n  return ' '.join(capitalized_words)", "line_number": null, "bug_type": null}
{"code": "def merge_dicts(dict1, dict2):\n    dict3 = {**dict1, **dict2} \n    return dict3", "line_number": null, "bug_type": null}
{"code": "def factorial(n): \n    if n == 0: \n        return 1\n    return n*factorial(n-1)", "line_number": null, "bug_type": null}
{"code": "def extract_substring(string, start, end):\n    substr = string[start : end]\n    return substr\n\nstring = 'Python is fun'\nstart = 7\nend = 11\n\nprint(extract_substring(string, start, end))", "line_number": null, "bug_type": null}
{"code": "import time\n\nwhile True:\n    localtime = time.localtime()\n    result = time.strftime(\"%I:%M:%S %p\", localtime)\n    print(result, end=\"\\r\")\n    time.sleep(1)", "line_number": null, "bug_type": null}
{"code": "def remove_non_alpha(string):\n    new_string = \"\"\n    for char in string:\n        if char.isalpha():\n            new_string += char\n    return new_string", "line_number": null, "bug_type": null}
{"code": "def reverse_string(string): \n    string = string[::-1] \n    return string \n  \n# Driver code \nstring = \"Python Programming\"\nprint(reverse_string(string))", "line_number": null, "bug_type": null}
{"code": "def reverse_string(string):\n    return string[::-1]\n\nresult = reverse_string(\"Hello\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def set_value(store, key, value):\n  store[key] = value\n\ndef get_value(store, key):\n  return store[key]\n\ndef delete_value(store, key):\n  del store[key]", "line_number": null, "bug_type": null}
{"code": "word_lengths = {\n    \"apple\": 5,\n    \"strawberry\": 10,\n    \"coffee\": 6\n}", "line_number": null, "bug_type": null}
{"code": "my_dict = dict(zip([\"apple\", \"bat\", \"cat\"], [\"red\", \"grey\", \"black\"]))\n\n#Print the dictionary\nprint(my_dict)", "line_number": null, "bug_type": null}
{"code": "def findUniqueChars(str):\n    result = \"\"\n    for char in str:\n        if str.count(char) == 1:\n            result += char\n\n    return result \n\nresult = findUniqueChars(\"This is a test\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(word):\n    reversed_word = word[::-1]\n    if reversed_word == word:\n        return True\n    else:\n        return False\n\nresult = is_palindrome(\"noon\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def sort_by_tuple_second(tuple_list):\n    tuple_list.sort(key=lambda x: x[1])\n    return tuple_list", "line_number": null, "bug_type": null}
{"code": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http://www.example.com'\n\nhtml = requests.get(url).text\nsoup = BeautifulSoup(html, 'html.parser')\n\nfor link in soup.find_all('a'):\n print(link.get('href'))", "line_number": null, "bug_type": null}
{"code": "def even_numbers():\n    even_list = []\n    for number in range(1, 21):\n        if number % 2 == 0:\n            even_list.append(number)\n    return even_list", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(word): \n    word = word.lower() \n    rev_word = word[::-1] \n    if word == rev_word: \n        return True\n    else: \n        return False", "line_number": null, "bug_type": null}
{"code": "for i in range(2, 6): \n for j in range(1, 11): \n  print('{} x {} = {}'.format(i, j, i * j)) \n print(\" \")", "line_number": null, "bug_type": null}
{"code": "numbers = [1, 2, 3, 4, 5]\nsquares = [n*n for n in numbers]", "line_number": null, "bug_type": null}
{"code": "import random\n \ncharacters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\nlength = 8\n \nrandstring = ''.join(random.choice(characters) for i in range(length))", "line_number": null, "bug_type": null}
{"code": "num = 49\n\nif num % 7 == 0:\n    print(\"The number %d is divisible by 7!\" %num)", "line_number": null, "bug_type": null}
{"code": "def print_five_times(input_string):\n    for _ in range(5):\n        print(input_string)\n\nprint_five_times(\"Hello World!\")", "line_number": null, "bug_type": null}
{"code": "def get_nth_item(lst, n):\n  \"\"\"\n  This function returns the nth item of a given list.\n  \"\"\"\n  return lst[n]", "line_number": null, "bug_type": null}
{"code": "def check_temperature(temp):\n  if temp <= 15:\n    print('It is below 15 degrees.')\n  elif temp >= 30:\n    print('It is over 30 degrees.')\n  else:\n    print('Temperature is normal.')", "line_number": null, "bug_type": null}
{"code": "def valid_phone_number(phone):\n    phone = str(phone)\n    return len(phone) == 10 and phone.isdigit()", "line_number": null, "bug_type": null}
{"code": "def sort_list(lst, key):\n    # Sorts a list of dictionaries\n    return sorted(lst, key=lambda k: k[key])", "line_number": null, "bug_type": null}
{"code": "i = 1\nwhile i <= 10:\n  print(i)\n  i += 1", "line_number": null, "bug_type": null}
{"code": "def expression_solver(expression):\n    '''This function solves a given mathematical expression'''\n\n    return eval(expression)\n\nexpression = \"2 + 2\"\n\nresult = expression_solver(expression)\n\nprint(result) # 4", "line_number": null, "bug_type": null}
{"code": "class SampleObject:\n    def __init__(self, param1, param2):\n        self.param1 = param1\n        self.param2 = param2\n\nobj = SampleObject(1, 2)", "line_number": null, "bug_type": null}
{"code": "def classify_error(message):\n    if 'Connection timed out' in message:\n        return 'Network'\n    else:\n        return 'Other'", "line_number": null, "bug_type": null}
{"code": "def search(array, x):\n\tfor i in range(len(array)):\n\t\tif array[i] == x:\n\t\t\treturn i\n\treturn -1", "line_number": null, "bug_type": null}
{"code": "def length(string):\n    count = 0\n    for char in string:\n        count += 1\n    return count\n\nstring=\"Python\"\n\nprint(length(string))", "line_number": null, "bug_type": null}
{"code": "def sort_list(lst):\n  return sorted(lst, key=lambda x: x[1])\n\nresult = sort_list([('a', 1), ('b', 3), ('c', 2)]) \nprint(result)", "line_number": null, "bug_type": null}
{"code": "def c_to_f(celsius):\n    return (celsius * 9.0/5) + 32", "line_number": null, "bug_type": null}
{"code": "def print_strings(*strings):\n    for s in strings:\n        print(s)\n\nprint_strings(\"Hello\", \"World\")", "line_number": null, "bug_type": null}
{"code": "def common_elements(set1, set2): \n    return set1 & set2\n\nprint(common_elements({1,2,3,4,5,6,7}, {2,4,5,6}))", "line_number": null, "bug_type": null}
{"code": "list = [3, 5, 9, 15, 22]\nfor item in list:\n    if item < 10:\n        print(\"less than 10\")\n    else:\n        print(\"greater than 10\")", "line_number": null, "bug_type": null}
{"code": "fruit = ['apple', 'banana', 'cherry'] \nfruit.sort(reverse=True)\nprint(fruit) # ['cherry', 'banana', 'apple']", "line_number": null, "bug_type": null}
{"code": "def fibonacci_sequence(max): \n    nums = [] \n    current, nxt = 0, 1\n    while current < max: \n        current, nxt = nxt, nxt+current\n        nums.append(current)\n    \n    return nums", "line_number": null, "bug_type": null}
{"code": "class Person:\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address", "line_number": null, "bug_type": null}
{"code": "def sort_list(list): \n  list.sort() \n  return list\n  \nprint(sort_list([2,4,3,1,5]))", "line_number": null, "bug_type": null}
{"code": "def filter_long_strings(my_list):\n  long_strings = []\n  for i in my_list:\n    if len(i) > 10:\n      long_strings.append(i)\n  return long_strings", "line_number": null, "bug_type": null}
{"code": "list = [\"Apple\", \"Banana\", \"Cherry\"]\nlist.sort() \nprint(list)", "line_number": null, "bug_type": null}
{"code": "def wrap_text(text, width):\n    for i in range(0, len(text), width):\n        print(text[i: width + i])", "line_number": null, "bug_type": null}
{"code": "list = [100, 50, 30, 10, 7]\nlist.sort()\nprint(list) # Output: [7, 10, 30, 50, 100]", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_random_string():\n   characters = 'abcdefghijklmnopqrstuvwxyz'\n   random_string = ''\n   for i in range(5):\n       random_string += random.choice(characters)\n   return random_string\n\nresult = generate_random_string()\nprint(result)", "line_number": null, "bug_type": null}
{"code": "strings = [\"Code\", \"Python\", \"JavaScript\", \"Java\"]\n\n# sort the list by word length\nstrings.sort(key = lambda x: len(x))\n\nprint(strings)\n# Output: [\"Code\", \"Java\", \"Python\", \"JavaScript\"]", "line_number": null, "bug_type": null}
{"code": "def check_integer(x):\n  if x <= 0:\n    return False\n  if x*x > 10:\n    return True\n  return False", "line_number": null, "bug_type": null}
{"code": "def count_characters(string, character):\n    count = 0\n    for c in string:\n        if c == character:\n            count += 1\n    return count\n\ncount_characters(\"abracadabra\", 'a')  # 5", "line_number": null, "bug_type": null}
{"code": "d = {'Name': 'John', 'Age': 30, 'City': 'New York'}\n \nfor key, value in d.items():\n    print(f'{key}: {value}')", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(lst):\n  return list(set(lst))\n\nlst = [1, 2, 4, 2, 5, 6, 3, 3]\nnew_list = remove_duplicates(lst)\nprint(new_list)", "line_number": null, "bug_type": null}
{"code": "import requests\n\nurl = 'https://jsonplaceholder.typicode.com/posts'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n  posts = response.json()\n  for post in posts:\n    print(post['title'])", "line_number": null, "bug_type": null}
{"code": "list_numbers = [8, 4, 6, 10, 3]\n\nlist_numbers.sort(reverse=True)\n\nprint(list_numbers) # Output: [10, 8, 6, 4, 3]", "line_number": null, "bug_type": null}
{"code": "def greater_than_n(nums, n):\n return [num for num in nums if num > n]\n\ngreater_than_n([3,4,5,6,7], 5)\n# Returns [6,7]", "line_number": null, "bug_type": null}
{"code": "def sort_dict_by_value(in_dict):\n    \"\"\" Function to sort a dictionary by it's values\n    \"\"\"\n    return {k: v for k, v in sorted(in_dict.items(), key=lambda item: item[1])}", "line_number": null, "bug_type": null}
{"code": "def isOdd(number): \n  \n    if number % 2 == 0: \n        return False\n    else: \n        return True", "line_number": null, "bug_type": null}
{"code": "def most_frequent(list):\n    return max(list, key=list.count)\n\nlist = [1,2,3,4,4,4,5,5]\nprint(most_frequent(list))", "line_number": null, "bug_type": null}
{"code": "my_string = \"Hello World\"\nif \"World\" in my_string:\n    print(\"Yes, the specified substring is found.\")\nelse:\n    print(\"No, the substring is not found.\")", "line_number": null, "bug_type": null}
{"code": "def longest_string(words):\n    longest = 0\n    result = ''\n    for w in words:\n        if len(w) > longest:\n            longest = len(w)\n            result = w\n    return result", "line_number": null, "bug_type": null}
{"code": "for i in range(1,11):\n    print(9, \"x\", i, \"=\", 9*i)", "line_number": null, "bug_type": null}
{"code": "def sum_non_negative_integers(n):\n    total = 0\n    for i in range(n): \n        if i > 0:\n            total += i\n    return total", "line_number": null, "bug_type": null}
{"code": "def find_sum_of_largest(lst):\n  lst.sort()\n  return lst[-1] + lst[-2]\n\nprint(find_sum_of_largest([1, 3, 5, 7, 9]))", "line_number": null, "bug_type": null}
{"code": "def create_nested_dict(keys, values): \n  my_dict = {}\n  for i in range(len(keys)):\n    my_dict[keys[i]] = values[i]\n  return my_dict", "line_number": null, "bug_type": null}
{"code": "num = int(input(\"Enter a number: \"))\n \nfor i in range(1, num + 1):\n  for j in range(1, i + 1):\n      print(\"*\", end=\" \")\n  print(\"\\r\")", "line_number": null, "bug_type": null}
{"code": "import requests\n\nurl = \"https://example.com\"\n\n# Send Get request to the API\nresponse = requests.get(url)\n\n# Store the response text\nresponse_text = response.text", "line_number": null, "bug_type": null}
{"code": "import requests \ndef extract_text(url): \n  page = requests.get(url) \n  return page.content", "line_number": null, "bug_type": null}
{"code": "def sum_list(l):\n    result = 0\n    for num in l:\n        result += num\n    return result\n\nlist = [1, 2, 3, 4, 5]\nprint(sum_list(list))", "line_number": null, "bug_type": null}
{"code": "def find_frequency(lst, element):\n    return lst.count(element)\n\nlst = [1, 2, 3, 4, 1, 2, 1]\nprint(find_frequency(lst, 1))", "line_number": null, "bug_type": null}
{"code": "def convert_to_lowercase(string): \n    lowercase_string = \"\" \n    for char in string: \n        lowercase_string += char.lower() \n    return lowercase_string", "line_number": null, "bug_type": null}
{"code": "from fuzzywuzzy import fuzz \ndef fuzzy_match(str1, str2): \n    return fuzz.ratio(str1, str2)", "line_number": null, "bug_type": null}
{"code": "def even_odd(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "max_num = max([10, 5, 15, 35, 20])\nprint(max_num)", "line_number": null, "bug_type": null}
{"code": "import re\n\ndef extract_phone_numbers(text):\n  return re.findall(r\"\\(?\\b[0-9]{3}\\)?[-. ]?[0-9]{3}[-. ]?[0-9]{4}\\b\", text)", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    fact = 1\n    for i in range(1, n+1):\n        fact = fact * i\n    return fact", "line_number": null, "bug_type": null}
{"code": "def create_dict(number):\n    dict_N = dict()\n    for i in range(1, number+1):\n        dict_N[i] = i\n\n    return dict_N\n\ndict_N = create_dict(5)\nprint(dict_N)", "line_number": null, "bug_type": null}
{"code": "numbers = dict((num, num*num) for num in range(1,11)) \nprint(numbers)", "line_number": null, "bug_type": null}
{"code": "list_of_strings = ['foo', 'bar', 'baz', 'foobar', 'beer', 'wine']\n\n# sort strings by length\nlist_of_strings.sort(key=len)\n\n# print sorted list\nprint(list_of_strings)", "line_number": null, "bug_type": null}
{"code": "class Person:\n  def __init__(self, gender, age, name):\n    self.gender = gender\n    self.age = age\n    self.name = name", "line_number": null, "bug_type": null}
{"code": "array = [1,2,3,4,5,6,7,8,9,10]", "line_number": null, "bug_type": null}
{"code": "def reverse(string):\n    return string[::-1]\n\nprint(reverse('Hello')) #prints \"olleH\"", "line_number": null, "bug_type": null}
{"code": "def move_last_3(list):\n  last3 = list[-3:]\n  del list[-3:]\n  list = last3 + list\n  return list", "line_number": null, "bug_type": null}
{"code": "def sum_of_squares(numbers):\n    squares_sum = []\n    for i in range(len(numbers)):\n        squares_sum.append(sum([num**2 for num in numbers[:i+1]]))\n    return squares_sum", "line_number": null, "bug_type": null}
{"code": "def power(number, power):\n return number**power\n\nprint(power(2, 3)) # Output: 8", "line_number": null, "bug_type": null}
{"code": "def find_string_length(string):\n    length = 0\n    for c in string:\n        length += 1\n    return length\n\n# example\nstr = \"Hello world!\"\nprint(find_string_length(str))", "line_number": null, "bug_type": null}
{"code": "def foo(l1, l2):\n    result = [i + j for i in l1 for j in l2]\n    return result", "line_number": null, "bug_type": null}
{"code": "import hashlib\n\n# define the input string\ninput_string = 'ExampleString'\n\n# generate a key\nkey = hashlib.sha256(input_string.encode()).hexdigest()\n\n# output the key\nprint('Encryption key:', key)", "line_number": null, "bug_type": null}
{"code": "def printRange(start, end):\n    if start == end:\n        return\n    print(start)\n    printRange(start+1, end)\n\nprintRange(0, 5)", "line_number": null, "bug_type": null}
{"code": "import re\n\ndef tokenize(s):\n    tokens = re.findall(r'\\w+|[^\\w\\s]', s, flags=re.UNICODE)\n    return tokens\n\nprint(tokenize(\"This is a sentence\"))", "line_number": null, "bug_type": null}
{"code": "def filter_strings(lst, substring):\n    filtered_lst = []\n    for string in lst:\n        if substring in string:\n            filtered_lst.append(string)\n    return filtered_lst\n\nprint(filter_strings([\"Hello\", \"World\", \"Hey\"], \"or\"))", "line_number": null, "bug_type": null}
{"code": "nums = [1, 2, 3, 4, 5, 6, 7, 8]\nodd_nums = [num for num in nums if num % 2 != 0]\nprint(odd_nums)", "line_number": null, "bug_type": null}
{"code": "def insert_at_beginning(list, element):\n    list.insert(0, element)\n    return list", "line_number": null, "bug_type": null}
{"code": "def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n*factorial(n-1)", "line_number": null, "bug_type": null}
{"code": "numbers = [1, 2, 3 , 4]\n\nfor num in numbers:\n  print(num*2)", "line_number": null, "bug_type": null}
{"code": "def time_to_seconds(hours, minutes, seconds): \n     return (hours * 3600) + (minutes * 60) + seconds\n \nresult = time_to_seconds(2, 3, 4) \nprint(result)", "line_number": null, "bug_type": null}
{"code": "def two_sum_digits():\n for i in range(0, 10):\n  for j in range(0, 10):\n   print(i + j)", "line_number": null, "bug_type": null}
{"code": "def sum_numbers(n):\n    total = 0\n    for i in range(n+1):\n        total += i\n    return total\n\nprint(sum_numbers(20))", "line_number": null, "bug_type": null}
{"code": "def count_items(items):\n    item_counter = {}\n    for item in items:\n        item_counter[item] = item_counter.get(item, 0) + 1\n    return item_counter", "line_number": null, "bug_type": null}
{"code": "a, b = 0, 1\nprint(\"The first 10 numbers in Fibonacci series are:\")\nwhile a < 10:\n    print(a)\n    a, b = b, a + b", "line_number": null, "bug_type": null}
{"code": "mylist = [1,1,2,3,4,4,5,6]\n\nunique_list = []\nfor element in mylist:\n    if element not in unique_list:\n        unique_list.append(element)\n\nprint(unique_list)", "line_number": null, "bug_type": null}
{"code": "result = []\nfor ele in list:\n    if list.count(ele) == 1:\n        result.append(ele)\nprint(result) # Output: [1, 4]", "line_number": null, "bug_type": null}
{"code": "timetable = [\"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n\nfor day in reversed(timetable): \n    print(day)", "line_number": null, "bug_type": null}
{"code": "def fix_string(s): \n    s = s.replace(\" \", \"\") \n    s = s.lower() \n    s = \"\".join(reversed(s)) \n    return s", "line_number": null, "bug_type": null}
{"code": "def sort_words_by_length(sentence):\n    words = sentence.split()\n    words.sort(key=len, reverse=True)\n    return words\n\nsentence = \"This is a test sentence\"\nresult = sort_words_by_length(sentence)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "table = {\n    \"Column1\": [1, 2, 3],\n    \"Column2\": [\"A\", \"B\", \"C\"],\n    \"Column3\": [True, False, False]\n    }", "line_number": null, "bug_type": null}
{"code": "class MyCalculator:\n    def __init__(self):\n        pass\n    \n    def sum(self, a, b):\n        return a + b", "line_number": null, "bug_type": null}
{"code": "class Customer:\n    def __init__(self, name, address, contact_number):\n        self.name = name\n        self.address = address\n        self.contact_number = contact_number", "line_number": null, "bug_type": null}
{"code": "import random\n\nitems = ['a', 'b', 'c', 'd']\nrandom.shuffle(items)\n\nprint(items)", "line_number": null, "bug_type": null}
{"code": "def average(a, b):\n    return (a+b)/2\n    \na = 10\nb = 15\n\navg = average(a, b)\n\nprint(avg)", "line_number": null, "bug_type": null}
{"code": "def count_occurrence(string, character):\n    count = 0\n    for c in string:\n        if c == character:\n            count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n  return \"Hello World!\"\n\nif __name__ == '__main__':\n    app.run()", "line_number": null, "bug_type": null}
{"code": "class adder:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def __add__(self):\n        return self.x + self.y", "line_number": null, "bug_type": null}
{"code": "def get_sum(numbers):\n  sum = 0\n  for i in range(len(numbers)):\n    sum += numbers[i]\n  return sum", "line_number": null, "bug_type": null}
{"code": "string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nremove_chars = set(['A', 'C', 'D', 'E'])\n \nresult = \"\".join(char for char in string if char not in remove_chars)\n\nprint(result)", "line_number": null, "bug_type": null}
{"code": "seq = [1]\n\nfor i in range(1,7):\n    seq.append(seq[-1]*2)\n\nprint(seq)", "line_number": null, "bug_type": null}
{"code": "def remove_from_front(string, num_chars):\n    return string[num_chars:]\n\nresult = remove_from_front(\"Hello, World!\", 5)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\n\nmodel = Pipeline([('tfidf', TfidfVectorizer()),\n                  ('clf', LogisticRegression())])", "line_number": null, "bug_type": null}
{"code": "def delete_last(lst):\n    return lst[:-1]\n\nresult = delete_last([1, 2, 2, 4, 4])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def is_power_of_two(num):\n    if num == 0:\n        return False\n    while num % 2 == 0:\n        num /= 2\n    return num == 1\n\nprint(is_power_of_two(32))", "line_number": null, "bug_type": null}
{"code": "list1 = [1,2,3]\nlist2 = [4,5,6]\n \nfor i,j in zip(list1, list2):\n    print(i * j)", "line_number": null, "bug_type": null}
{"code": "def filter_even(numbers):\n    return [n for n in numbers if n %2 == 0]", "line_number": null, "bug_type": null}
{"code": "def reverse_words(sentence):\n    words = sentence.split(\" \")\n    reversed_words = reversed(words)\n    reversed_sentence = \" \".join(reversed_words)\n    return reversed_sentence\n\nresult = reverse_words(\"The quick brown fox\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def generate_numbers():\n    n = 0\n    while True:\n        yield n \n        n += 1", "line_number": null, "bug_type": null}
{"code": "import requests\n\nurl = \"https://example.org/\"\n\nresponse = requests.get(url)\n\nif response.status_code == 200:\n  html_page = response.content.decode('utf-8')", "line_number": null, "bug_type": null}
{"code": "import re\n\nstring = 'The quick brown fox jumps over the lazy dog'\n\n# Prints matches\nmatches = re.findall('the', string, re.IGNORECASE)\nprint(matches)", "line_number": null, "bug_type": null}
{"code": "def print_max(arr):\n max_val = max(arr)\n print(max_val)\n \nprint_max([1, 4, 8, 9, 10])", "line_number": null, "bug_type": null}
{"code": "text = \"Text\"\nrev_text = \"\" \n  \nfor i in range(len(text) - 1, -1, -1): \n    rev_text = rev_text + text[i] \n  \nprint(rev_text)", "line_number": null, "bug_type": null}
{"code": "list_of_numbers = [x for x in range(1000) if x % 7 == 0]", "line_number": null, "bug_type": null}
{"code": "for i in range(11):\n  if i % 2 == 0:\n    print(i)", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_password(length):\n password_characters = string.ascii_lowercase + string.digits + string.punctuation\n password = ''.join(random.choice(password_characters) for i in range(length))\n return password", "line_number": null, "bug_type": null}
{"code": "import time \n\ndef convert_to_timestamp(date_string): \n    return time.mktime(time.strptime(date_string, \"%B %d, %Y\"))", "line_number": null, "bug_type": null}
{"code": "def checkNumber(array, number):\n    for i in array:\n        if i == number:\n            return True\n    return False\n\ncheckNumber([2, 4, 6, 8], 8)", "line_number": null, "bug_type": null}
{"code": "def create_add_closure():\n    def adder(a, b):\n        return a + b\n    return adder\n\nadd_func = create_add_closure()\nprint(add_func(2, 3)) # Output: 5", "line_number": null, "bug_type": null}
{"code": "def hours_to_minutes(hours):\n    minutes = hours * 60\n    return minutes\n\nminutes = hours_to_minutes(20)\nprint(minutes)", "line_number": null, "bug_type": null}
{"code": "for num in range(2000, 3201):\n    if (num % 7 == 0) and (num % 5 != 0):\n        print(num)", "line_number": null, "bug_type": null}
{"code": "sum = 0\nfor value in [2, 17, 3, 8]:\n sum += value\nprint(sum)", "line_number": null, "bug_type": null}
{"code": "sql_query = \"\"\"\n CREATE TABLE Person (\n name VARCHAR(255),\n age INTEGER,\n weight FLOAT\n );\n\"\"\"\n\nprint(sql_query)", "line_number": null, "bug_type": null}
{"code": "import numpy as np\n\ndef smooth_data(data, window_size):\n    window = np.ones(int(window_size))/float(window_size)\n    return np.convolve(data, window, 'same')", "line_number": null, "bug_type": null}
{"code": "def celsius_to_fahrenheit(temperature):\n    fahrenheit = (temperature*9/5)+32\n    return fahrenheit", "line_number": null, "bug_type": null}
{"code": "def concatenateLists(list1, list2): \n    list3 = list1 + list2 \n    return list3", "line_number": null, "bug_type": null}
{"code": "def feet_to_meters(feet):\n    return feet * 0.3048\n\nfeet = 10\nmeters = feet_to_meters(feet)\n\nprint('{} feet is equal to {} meters.'.format(feet, meters))", "line_number": null, "bug_type": null}
{"code": "import numpy as np\n\n# Generate random matrix with 500 rows and 10 columns\nmatrix = np.random.rand(500,10)\n\n# Print the matrix\nprint(matrix)", "line_number": null, "bug_type": null}
{"code": "import random \n  \ndef randomElement(list): \n    return random.choice(list) \n\nprint(randomElement([1,2,3,4,5]))", "line_number": null, "bug_type": null}
{"code": "def sort_list(tuples):\n    return sorted(tuples, key = lambda x: x[1])\n \ntuples = [(3, 4), (5, 6), (1, 2)]\n \nprint(sort_list(tuples))", "line_number": null, "bug_type": null}
{"code": "def factorial(n): \n    factorial = 1\n  \n    for i in range(1, n+1): \n        factorial = factorial * i \n    print(factorial) \n  \nnumber = 5\nfactorial(number)", "line_number": null, "bug_type": null}
{"code": "def remove_consecutive(list_of_numbers):\n    result = []\n    last_number = None\n    for number in list_of_numbers:\n        if number != last_number:\n            result.append(number)\n            last_number = number\n    return result", "line_number": null, "bug_type": null}
{"code": "def contains_duplicates(given_list):\n    seen = set()\n    for x in given_list:\n        if x in seen:\n            return True\n        seen.add(x)\n    return False", "line_number": null, "bug_type": null}
{"code": "import random\n\nrandom_numbers = []\nfor _ in range(10):\n    random_numbers.append(random.randint(1,100))\n\nprint(random_numbers)", "line_number": null, "bug_type": null}
{"code": "def generate_dict(n):\n    d = {}\n    for i in range(1, n+1):\n        d[i] = i*i\n    return d", "line_number": null, "bug_type": null}
{"code": "def sum_list(my_list):\n  total = 0\n  for num in my_list:\n    total += num\n  return total\n\nprint(sum_list([7, 15, 23, 5, 9]))", "line_number": null, "bug_type": null}
{"code": "def to_uppercase(input):\n    output = \"\"\n    for char in input:\n        output += char.upper()\n    return output", "line_number": null, "bug_type": null}
{"code": "import random\n\nrandom_number = random.randint(0, 10)\nprint(\"Random number is: \", random_number)", "line_number": null, "bug_type": null}
{"code": "def longest_string(string1, string2):\n    if len(string1) > len(string2):\n        return string1\n    else:\n        return string2\n\nlongest_str = longest_string(\"Python\", \"programming\")\nprint(longest_str)", "line_number": null, "bug_type": null}
{"code": "def hours_to_minutes(hours):\n    \"\"\"Converts input hours to minutes.\"\"\"\n    return hours * 60", "line_number": null, "bug_type": null}
{"code": "def concatenate_strings(str1, str2):\n    return str1 + str2\n\nprint(concatenate_strings(\"Hello\", \"world!\"))", "line_number": null, "bug_type": null}
{"code": "def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32)*(5/9)\n    return celsius", "line_number": null, "bug_type": null}
{"code": "def has_capital_letter(input_string):\n    for character in input_string:\n        if character.isupper():\n            return True\n    return False", "line_number": null, "bug_type": null}
{"code": "def count_vowels(words):\n  vowels = 'aeiou'\n  count = 0\n  for char in words.lower():\n    if char in vowels:\n      count += 1\n  return count", "line_number": null, "bug_type": null}
{"code": "list_of_strings = ['hello', 'world', 'hello', 'moon', 'sun']\nunique_strings = set(list_of_strings)\n\nfor string in unique_strings:\n    print(string)", "line_number": null, "bug_type": null}
{"code": "def detect_character(string, char):\n    for ch in string:\n        if ch == char:\n            return True\n    return False\n\nstring = 'Python'\nchar = 'y'\nprint(detect_character(string, char))", "line_number": null, "bug_type": null}
{"code": "arr = [2, 5, 9, 8]\nfor num in arr:\n    print(num)", "line_number": null, "bug_type": null}
{"code": "def sum_elements(list):\n    Sum = list[2] + list[6]\n    return Sum\nprint(sum_elements(list))", "line_number": null, "bug_type": null}
{"code": "sentence = \"Hello World!\"\nwords = sentence.split()\n\nfor word in words:\n  print(f\"{word} has {len(word)} characters.\")", "line_number": null, "bug_type": null}
{"code": "def get_maximum_value(lst):\n    return max(lst)\n\nprint(get_maximum_value([1, 5, 2, 9, -2]))", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(lst):\n  if len(lst) < 2:\n    return True\n  if lst[0] != lst[-1]:\n    return False\n  return is_palindrome(lst[1:-1])", "line_number": null, "bug_type": null}
{"code": "def sort_by_second_item(my_list): \n    return sorted(my_list, key = lambda x: x[1])", "line_number": null, "bug_type": null}
{"code": "import random \n\ndef generate_code():\n    code = \"\"\n    for _ in range(4):\n        code += str(random.randint(0, 9))\n    return code\n\ncode = generate_code()\nprint(code)", "line_number": null, "bug_type": null}
{"code": "def combine_strings(string1, string2):\n    return string1 + \" \" + string2\n\ncombined_string = combine_strings(\"Hello\", \"World\")\nprint(combined_string)", "line_number": null, "bug_type": null}
{"code": "def calculate_bmi(height, weight): \n    bmi = weight / (height * height) \n    return bmi", "line_number": null, "bug_type": null}
{"code": "def computeGCD(a, b): \n\tif(b == 0): \n\t\treturn a \n\telse: \n\t\treturn computeGCD(b, a%b)", "line_number": null, "bug_type": null}
{"code": "import random\n\n# Simulate a dice roll\nresult = random.randint(1,6)\nprint(\"Result of the dice roll:\", result)", "line_number": null, "bug_type": null}
{"code": "text = \"Apples, oranges, and bananas\"\n\nlist_from_text = text.split(\", \")\n\nprint(\"List:\", list_from_text)", "line_number": null, "bug_type": null}
{"code": "def cube_surface_area(side):\n    \"\"\" \n    Calculate and return the total surface area of a cube \n    given the side length.\n    \"\"\"\n    return 6 * side**2", "line_number": null, "bug_type": null}
{"code": "kilometers = 10\n\nmiles = kilometers * 0.621371\n\nprint(\"{} kilometers is equal to {} miles\".format(kilometers, miles))", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(string):\n    rev_string = string[::-1]\n    if string == rev_string:\n        return True\n    else:\n        return False \n\nprint(is_palindrome(\"level\"))", "line_number": null, "bug_type": null}
{"code": "n = 5\nfor i in range(1, n+1):\n print(i, end=' ')", "line_number": null, "bug_type": null}
{"code": "def delete_third_element(list): \n    \"\"\"Function to delete the third element of a list\"\"\" \n    del list[2] \n    return list\n\n#Example:\nprint(delete_third_element(list))", "line_number": null, "bug_type": null}
{"code": "import random\n\nmin_num = 10\nmax_num = 25\n \n# Generate a random number\nrand_num = random.randint(min_num, max_num)\n \n# Print the random number\nprint(rand_num)", "line_number": null, "bug_type": null}
{"code": "total = 0\n\nfor i in range(1, 51):\n    total += i\n\nprint(total)", "line_number": null, "bug_type": null}
{"code": "def input_num():\n    while True:\n        try:\n            num = int(input(\"Insert a number:\"))\n            break\n        except ValueError:\n            print(\"Please enter a valid integer.\")\n    return num", "line_number": null, "bug_type": null}
{"code": "headings = [\"Introduction\", \"Fundamentals\", \"Algorithms\", \"Design Patterns\", \"Conclusion\"]\n\nprint(\"Table of Contents\")\nfor i, heading in enumerate(headings):\n  print(f\"{i+1}.{heading}\")", "line_number": null, "bug_type": null}
{"code": "def count_long_words(sentence, length):\n    words = sentence.split()\n    count = 0\n    \n    for word in words:\n        if len(word) > length:\n            count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnum = 5\nprint(f\"The factorial of {num} is {factorial(num)}\")", "line_number": null, "bug_type": null}
{"code": "def descendingSort(arr): \n    arr.sort(reverse=True) \n    return arr\n  \narr = [13, 11, 7, 4, 2]\nresult = descendingSort(arr) \n  \nprint (result)", "line_number": null, "bug_type": null}
{"code": "#Linear search function \ndef linear_search(list, x): \n\tfor i in range(len(list)): \n\t\tif list[i] == x: \n\t\t\treturn i \n\treturn -1", "line_number": null, "bug_type": null}
{"code": "def sum_recursive(n):\n    if(n == 0):\n        return 0\n    else:\n        return n + sum_recursive(n-1)\n\nprint(sum_recursive(10))", "line_number": null, "bug_type": null}
{"code": "import random\n\nfor i in range(10):\n    print(random.randint(0, 9))", "line_number": null, "bug_type": null}
{"code": "def celsius_to_fahrenheit(temp_celsius):\n    temp_fahrenheit = (temp_celsius * 9/5) + 32\n    return temp_fahrenheit\n \ncelsius_to_fahrenheit(20) # Output: 68.0", "line_number": null, "bug_type": null}
{"code": "my_dict = {\n 'name': 'John',\n 'age': 26,\n 'salary': 5000\n}\n\nfind_key = 'name'\n\nif find_key in my_dict:\n print(my_dict[find_key])", "line_number": null, "bug_type": null}
{"code": "def character_count(str):\n    d = dict()\n    for c in str:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    return d", "line_number": null, "bug_type": null}
{"code": "def Fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return (Fibonacci(n-1) + Fibonacci(n-2))", "line_number": null, "bug_type": null}
{"code": "def is_palindrom(string):\n    reverse_string = string[::-1]\n    if string == reverse_string:\n        return True\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(input_list):\n    result = []\n    for ele in input_list:\n        if ele not in result:\n            result.append(ele)\n    return result", "line_number": null, "bug_type": null}
{"code": "def decimal_to_binary(num): \n    if num > 1:\n        decimal_to_binary(num//2) \n    print(num % 2,end = '')", "line_number": null, "bug_type": null}
{"code": "def calculate_triangle_area(base, height):\n    return 0.5 * base * height\n\nbase = 10\nheight = 15\n\narea = calculate_triangle_area(base, height)\nprint('Area of the triangle: ', area)", "line_number": null, "bug_type": null}
{"code": "numbers = [9, 2, 4, 7, 6]\nnumbers.sort(reverse=True)\nprint(numbers)", "line_number": null, "bug_type": null}
{"code": "import random\nnumbers = []\n\nfor i in range(10):\n number = random.randint(1, 100)\n numbers.append(number)\n \nprint(numbers)", "line_number": null, "bug_type": null}
{"code": "class HealthData:\n    def __init__(self, month, calories, minutes):\n        self.month = month\n        self.calories = calories\n        self.minutes = minutes", "line_number": null, "bug_type": null}
{"code": "class TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None", "line_number": null, "bug_type": null}
{"code": "import random\n\nrandom_numbers = []\n\nfor i in range(10):\n    random_numbers.append(random.randint(0,10))\n\nprint(random_numbers)", "line_number": null, "bug_type": null}
{"code": "\"\"\"\nThis code creates a new dictionary with the specified keys and values \n\"\"\"\n\nmy_dict = {\n    \"name\" : \"John\",\n    \"age\" : 25,\n    \"occupation\" : \"Engineer\"\n}", "line_number": null, "bug_type": null}
{"code": "class Movie:\n    def __init__(self, title, year, rating):\n        self.title = title\n        self.year = year\n        self.rating = rating", "line_number": null, "bug_type": null}
{"code": "for num in range(1, 11): \n    if num % 2 != 0: \n        print(num)", "line_number": null, "bug_type": null}
{"code": "def reverse_list(lst):\n  lst.reverse()\n  for item in lst:\n    print(item)\n  \nreverse_list([\"apple\", \"banana\", \"cherry\"])", "line_number": null, "bug_type": null}
{"code": "sentence = \"I am a strong girl\"\n\nwithout_a = ' '.join([word for word in sentence.split() if 'a' not in word])\n\nprint(without_a)\n# Output: I strong girl", "line_number": null, "bug_type": null}
{"code": "def multiplicationTable(n): \n    for i in range(1, 11): \n        print(n, 'x', i, '=', n*i) \n       \n# Driver Code \nn = 9\nmultiplicationTable(n)", "line_number": null, "bug_type": null}
{"code": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"...\"\npage = requests.get(url)\nsoup = BeautifulSoup(page.content)\ntext = soup.find_all(text=True)\nfor t in text:\n    print(t)", "line_number": null, "bug_type": null}
{"code": "from sklearn.cluster import KMeans\n\ndef cluster_data(x_points, y_points):\n X = list(zip(x_points, y_points))\n clustering_model = KMeans(n_clusters=3)\n clustering_model.fit(X)\n labels = clustering_model.labels_\n return labels", "line_number": null, "bug_type": null}
{"code": "def last_occurrence(x, lst):\n  last_index = -1\n  for i in range(len(lst)):\n    if lst[i] == x:\n      last_index = i\n  return last_index", "line_number": null, "bug_type": null}
{"code": "def double_word(word):\n    doubled_word = \"\"\n    for char in word:\n        doubled_word += char + char\n    return doubled_word", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generateRandomString():\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for _ in range(10))\n    \nif __name__ == '__main__':\n    print(generateRandomString())", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "line_number": null, "bug_type": null}
{"code": "{\n 'even': [4, 8, 12],\n 'odd': [3, 15, 7]    \n}", "line_number": null, "bug_type": null}
{"code": "def replace_char(string, character, replacement):\n   return string.replace(character, replacement)\n\nstring = \"Hello World\"\ncharacter = \"l\"\nreplacement = \"X\"\nprint(replace_char(string, character, replacement))", "line_number": null, "bug_type": null}
{"code": "def sort_string(string):\n    lst = list(string)\n    lst.sort()\n    return ''.join(lst)\n\nsorted_str = sort_string('hello')\nprint(sorted_str) # expected output: ehllo", "line_number": null, "bug_type": null}
{"code": "for num in range(1, 21):\n    if num % 3 == 0:\n        print(num)", "line_number": null, "bug_type": null}
{"code": "import matplotlib.pyplot as plt \n\ndata = [1, 2, 3, 4, 5, 5]\n\nplt.hist(data, bins=5) \nplt.title(\"Frequency Distribution\")\nplt.show()", "line_number": null, "bug_type": null}
{"code": "def sumTwo(num1, num2):\n    return num1 + num2\n\nresult = sumTwo(5, 6);\nprint(result);", "line_number": null, "bug_type": null}
{"code": "# imports\nimport tkinter as tk\n\n# create root app window\nroot = tk.Tk()\n\n# setting window's size\nroot.geometry(\"200x200\")\n\n# main loop\nroot.mainloop()", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef random_number(seed):\n    random.seed(seed)\n    return random.random()\n\nprint(random_number(99))", "line_number": null, "bug_type": null}
{"code": "def merge_lists(list1, list2):\n   merged_list = list1 + list2\n   return merged_list\n\nresult = merge_lists([1,2,3], [4,5,6])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def edit_list(list, criteria):\n    return [x for x in list if criteria(x) == True]", "line_number": null, "bug_type": null}
{"code": "def substring(str):\n    if len(str) < 3:\n        return\n    else:\n        return str[:2] + str[-2:]\n\nsubstring(\"hello\")", "line_number": null, "bug_type": null}
{"code": "num = 1\nwhile num <= 10:\n    print(num)\n    num += 1", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_random_string(length):\n  characters = string.ascii_letters + string.digits \n  return ''.join(random.choice(characters) for i in range(length))", "line_number": null, "bug_type": null}
{"code": "class Employee:\n  def __init__(self, name, id, salary, profile):\n    self.name = name\n    self.id = id\n    self.salary = salary\n    self.profile = profile", "line_number": null, "bug_type": null}
{"code": "from textblob import TextBlob\n\ntext = \"This movie was an amazing experience!\"\nblob = TextBlob(text)\nprint(\"Sentiment score: \", blob.sentiment.polarity)", "line_number": null, "bug_type": null}
{"code": "def sortAlphabetically(arr):\n    arr.sort()\n    return arr\n\nprint(sortAlphabetically([\"apple\",\"banana\",\"grapes\"]))", "line_number": null, "bug_type": null}
{"code": "def swap(items):\n    temp = items[0]\n    items[0] = items[-1]\n    items[-1] = temp\n    return items", "line_number": null, "bug_type": null}
{"code": "def remove_character(string, index):\n    return string[:index] + string[index+1:]\n\ninput_string =  'Hello World!'\nindex = 5\n\nprint(remove_character(input_string, index))", "line_number": null, "bug_type": null}
{"code": "import math\n\nradius = 8\narea = math.pi * radius * radius\nprint(area)", "line_number": null, "bug_type": null}
{"code": "for num in range(2, 51):\n    if num % 3 == 0 and num % 2 == 0:\n        print(num)", "line_number": null, "bug_type": null}
{"code": "def find_smallest_even(nums):\n    smallest = None\n    for num in nums:\n        if (num % 2 == 0) and (smallest == None or num < smallest):\n            smallest = num\n    return smallest", "line_number": null, "bug_type": null}
{"code": "def find_max(list):\n    max_element = list[0]\n    for element in list:\n        if element > max_element:\n            max_element = element\n    return max_element\n\nmax = find_max(list)\nprint(max)", "line_number": null, "bug_type": null}
{"code": "def most_common_string(word_list):\n    return max(set(word_list), key=word_list.count)\n\ndef most_common_integer(int_list):\n    return max(set(int_list), key=int_list.count)", "line_number": null, "bug_type": null}
{"code": "def sort_list(list):\n    list.sort()\n    return list\n\nsorted_list = sort_list([\"Banana\", \"Apple\", \"Orange\", \"Pear\"])\nprint(sorted_list)", "line_number": null, "bug_type": null}
{"code": "my_list = [8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 100]", "line_number": null, "bug_type": null}
{"code": "for i in range(3):\n    for j in range(3):\n        if (i == j) or (i + j == 2):\n            print('*', end=\"\")\n        else:\n            print('_', end=\"\")\n    print()", "line_number": null, "bug_type": null}
{"code": "strings = [\"string1\", \"string2\", \"string3\"]\nfor s in strings:\n    print(s)", "line_number": null, "bug_type": null}
{"code": "list = [2, 3, 4, 5, 6]\n\nlist.remove(5)", "line_number": null, "bug_type": null}
{"code": "import random\n\nfor _ in range(5):\n    print(random.randint(1, 15))", "line_number": null, "bug_type": null}
{"code": "def rms(lst):\n sum_sq = 0\n for n in lst:\n  sum_sq += n*n\n return (sum_sq/len(lst))**0.5", "line_number": null, "bug_type": null}
{"code": "def print_min_max(arr):\n    min_val = min(arr)\n    max_val = max(arr)\n    print('Smallest number: ', min_val)\n    print('Largest number: ', max_val)", "line_number": null, "bug_type": null}
{"code": "last_element = [1, 8, 3, 10, 5][-1]", "line_number": null, "bug_type": null}
{"code": "def is_prime(n): \n    if n <= 1: \n        return False\n    for i in range(2, n): \n        if n % i == 0: \n            return False\n    return True", "line_number": null, "bug_type": null}
{"code": "def create_matrix(n, m):\n    matrix = [[0 for _ in range(m)] for _ in range(n)]\n    return matrix", "line_number": null, "bug_type": null}
{"code": "list = [2, 4, 6, 8, 10] \nfirst, second = list[0], list[1]  \nprint(first) \nprint(second)", "line_number": null, "bug_type": null}
{"code": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\nfor n in range(10):\n    print(fibonacci(n))", "line_number": null, "bug_type": null}
{"code": "numbers = []\n\nfor i in range(2000, 3001):\n\tif (i%7 == 0) and (i%5 != 0):\n\t\tnumbers.append(str(i))\n\nprint (','.join(numbers))", "line_number": null, "bug_type": null}
{"code": "def get_average(numbers):\n    # take the sum and divide by number of elements\n    return sum(numbers)/len(numbers)\n\ninput_list = [2, 4, 6, 8]\nresult = get_average(input_list)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "\"\"\"\nAuthors: <Your Name>\nFilename: <file name>.py\nDescription: <A brief description of the program>\n\"\"\"", "line_number": null, "bug_type": null}
{"code": "def is_identical(str1, str2): \n    if str1 == str2: \n        return True\n    else: \n        return False", "line_number": null, "bug_type": null}
{"code": "data = [1, 2, 3, 4, 5, 6]\nsum = 0\n\nsum = sum + sum(data) # This is more efficient than iterating through the whole list with a `for` loop.", "line_number": null, "bug_type": null}
{"code": "from typing import NamedTuple\n\nclass Student(NamedTuple):\n    name: str\n    age: int", "line_number": null, "bug_type": null}
{"code": "def add(a, b):\n    return a + b  # remove unnecessary intermediate variable 'c' and return the result directly.", "line_number": null, "bug_type": null}
{"code": "def eval_expr(expr):\n    return eval(expr)\n\nprint(eval_expr(\"2 * (3 + 4)\"))\n# 14", "line_number": null, "bug_type": null}
{"code": "my_list = [\"hello\", \"world\", \"python\"]\nprefix = \"Programming - \"\n\n# Insert the prefix to all items in the list\nnew_list = [prefix + item for item in my_list]\n\nprint(new_list)", "line_number": null, "bug_type": null}
{"code": "class Person:\n    def __init__(self, Name, Age, Gender):\n        self.Name = Name\n        self.Age = Age\n        self.Gender = Gender", "line_number": null, "bug_type": null}
{"code": "def compare_dictionaries(d1, d2):\n  for key in d1:\n    if key not in d2 or d1[key] != d2[key]: \n      return False\n  return True", "line_number": null, "bug_type": null}
{"code": "input_list = [10, 20, 30, 10, 40, 20]\nunique_list = list(dict.fromkeys(input_list))\nprint(unique_list)", "line_number": null, "bug_type": null}
{"code": "import requests \n  \ndef getFileData(url):\n  # Get binary data\n  r = requests.get(url)\n  return r.content\n\nurl = \"https://example.com/sample.txt\"\ndata = getFileData(url)\n\nprint(data)", "line_number": null, "bug_type": null}
{"code": "def factorial(num: int):\n if num < 0:\n  return \"Error: Must be a positive integer\"\n elif num <= 1:\n  return 1\n else:\n  return num * factorial(num-1)", "line_number": null, "bug_type": null}
{"code": "a = \"test\"\nb = \"test\"\n\nif a == b:\n  print(\"true\")\nelse:\n  print(\"false\")", "line_number": null, "bug_type": null}
{"code": "import random\n\nx = random.randint(1, 10)\ny = random.randint(1, 10)\nz = random.randint(1, 10)", "line_number": null, "bug_type": null}
{"code": "def all_words_beginning_with(str, alphabet):\n  words = str.split()\n  result = []\n  for word in words:\n    if word[0].upper() == alphabet.upper():\n      result.append(word)\n  \n  return result", "line_number": null, "bug_type": null}
{"code": "list_nums = [1, 2, 3, 4, 5]\n\naverage = lambda list_nums: sum(list_nums) / len(list_nums)\n\nprint(average(list_nums))", "line_number": null, "bug_type": null}
{"code": "def largest_string(str1, str2): \n    if len(str1) >= len(str2): \n        return str1 \n    else: \n        return str2", "line_number": null, "bug_type": null}
{"code": "def calculate_sum(a, b):\n   sum = a + b \n   return sum \n\nc = calculate_sum(2, 3)\nprint(\"The sum is\", c)", "line_number": null, "bug_type": null}
{"code": "def get_average(arr): \n    sum = 0\n    \n    for i in range(len(arr)): \n        sum += arr[i] \n        \n    return sum/len(arr)", "line_number": null, "bug_type": null}
{"code": "factors = [list_element for list_element in range(1,15+1) if 15%list_element == 0]", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef password_generator(length):\n   password_characters = string.ascii_letters + string.digits + string.punctuation\n   new_password = \"\".join(random.choice(password_characters) for i in range(length))\n   return new_password", "line_number": null, "bug_type": null}
{"code": "def is_anagram(word1, word2):\n    list_word1 = sorted(list(word1))\n    list_word2 = sorted(list(word2))\n    \n    return list_word1 == list_word2", "line_number": null, "bug_type": null}
{"code": "num = 15\nwhile num >= 10:\n    print(num)\n    num -= 1", "line_number": null, "bug_type": null}
{"code": "def find_unique_strings(strings):\n \n    unique_strings = []\n    for s in strings:\n        if s not in unique_strings:\n            unique_strings.append(s)\n \n    return unique_strings", "line_number": null, "bug_type": null}
{"code": "user_input = input('Please enter anything: ')\n\nprint('The type of user input is:', type(user_input))", "line_number": null, "bug_type": null}
{"code": "def compare_strings( string1, string2 ):\n    s1, s2 = set(string1), set(string2)\n    intersection = s1.intersection(s2)\n\n    return (len(intersection) * 100) / len(s1)", "line_number": null, "bug_type": null}
{"code": "def check_palindrome(string):\n  reversed_string = string[::-1]\n  if string == reversed_string:\n    return True\n  else:\n    return False", "line_number": null, "bug_type": null}
{"code": "def find_max(a, b):\n    if a > b:\n        return a\n    else:\n        return b", "line_number": null, "bug_type": null}
{"code": "def divisible_by_seven(number_list):\n    for i in number_list:\n        if i % 7 == 0:\n            print(i)", "line_number": null, "bug_type": null}
{"code": "def reverseString(string):\n    reversed = \"\" \n    for character in string:\n        reversed = character + reversed\n    return reversed", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(n):\n    n = str(n)\n    return n == n[::-1]\n\nprint(is_palindrome(\"middle\"))", "line_number": null, "bug_type": null}
{"code": "arr = [1, 2, 3, 4, 5]\n\ndef calculate(arr):\n    return sum(arr)\n\ndef main():\n    print(calculate(arr))\n\nif __name__ == '__main__':\n    main()", "line_number": null, "bug_type": null}
{"code": "import random\n\nfor i in range(4):\n num = random.randint(0,9)\n print(num)", "line_number": null, "bug_type": null}
{"code": "def replace_spaces(s,replace_with):\n    return s.replace(\" \",replace_with)\n\ns = \"This is a test string\"\nreplace_with = \"X\"\n\nprint(replace_spaces(s,replace_with))", "line_number": null, "bug_type": null}
{"code": "total = 0\n\nfor i in range(1,1000):\n    if i % 3 == 0 or i % 5 == 0:\n        total += i\n\nprint(total)", "line_number": null, "bug_type": null}
{"code": "numbers = [1, 2, 3, 4, 5, 6]\n\nfor x in reversed(numbers):\n    print(x)", "line_number": null, "bug_type": null}
{"code": "def sum_odd_numbers(n):\n    result = 0\n    for i in range(n):\n        if i % 2 != 0:\n            result += i\n    return result", "line_number": null, "bug_type": null}
{"code": "def classify_int(x):\n    if x < 0:\n        return 'negative'\n    elif x == 0: \n        return 'zero'\n    elif x > 0:\n        return 'positive'", "line_number": null, "bug_type": null}
{"code": "def linear_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n    return -1", "line_number": null, "bug_type": null}
{"code": "def split_into_words(text):\n    \"\"\"\n    Splits a string into a list of words\n    \"\"\"\n    # Split the text on whitespace\n    return text.split()", "line_number": null, "bug_type": null}
{"code": "def days_between_dates(date1, date2):\n    delta = date2 - date1\n    return delta.days", "line_number": null, "bug_type": null}
{"code": "def calcTotalCost(quantity, price):\n    totalCost = quantity * price\n    return totalCost\n\nresult = calcTotalCost(5, 10)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def sort_strings(strings):\n\treturn sorted(strings)\n\nif __name__ == '__main__':\n\tstrings = ['Python', 'Java', 'C++', 'C#']\n\tsorted_strings = sort_strings(strings)\n\tprint(sorted_strings)", "line_number": null, "bug_type": null}
{"code": "def multiply_by_two(mylist):\n    new_list = []\n    for item in mylist:\n        new_list.append(item * 2)\n    return new_list", "line_number": null, "bug_type": null}
{"code": "x = 5\ny = 4\n\ntotal = x + y\n\nprint(total) # Output: 9", "line_number": null, "bug_type": null}
{"code": "def all_factors(num):\n    results = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            results.append(i)\n    return results", "line_number": null, "bug_type": null}
{"code": "class ConcatStrings:\n    def __init__(self, string1, string2):\n        self.string1 = string1\n        self.string2 = string2\n\n    def print_concat(self):\n        print(self.string1 + self.string2)", "line_number": null, "bug_type": null}
{"code": "def double_array(array):\n    return [element*2 for element in array]\n\ndouble_array([1, 2, 3, 4]) # [2, 4, 6, 8]", "line_number": null, "bug_type": null}
{"code": "def count_vowels(string):\n    count = 0\n    for ch in string:\n        if ch in 'aeiouAEIOU':\n            count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "def second_largest(arr):\n  max_ = max(arr)\n  new_arr = list(filter(lambda x: x != max_, arr))\n  return max(new_arr)", "line_number": null, "bug_type": null}
{"code": "def min_value(a, b):\n    if a < b:\n        return a\n    else:\n        return b", "line_number": null, "bug_type": null}
{"code": "def exclude_number(n):\n  return [i for i in range(0,n) if i < n]", "line_number": null, "bug_type": null}
{"code": "import nltk\n\ntokenized = nltk.word_tokenize(\"The cat sat on the mat.\")\nprint(tokenized)\n# Output: ['The', 'cat', 'sat', 'on', 'the', 'mat', '.']", "line_number": null, "bug_type": null}
{"code": "def getAscii(string):\n    result = []\n    for char in string:\n        result.append(ord(char))\n    return result\n\nprint(getAscii('Hello'))\n# Output: [72, 101, 108, 108, 111]", "line_number": null, "bug_type": null}
{"code": "def flatten_list(nested_list):\n    return [item for sublist in nested_list for item in sublist]", "line_number": null, "bug_type": null}
{"code": "def reverse_array(arr):\n    \"\"\"Prints the elements of an array in reverse order\"\"\"\n    length = len(arr)\n    for i in reversed(range(length)):\n        print(arr[i], end=\" \")", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(string):\n    new_string = \"\"\n    for char in string:\n        if char not in new_string:\n            new_string += char\n    return new_string\n\nno_duplicates = remove_duplicates(\"mississippi\")\nprint(no_duplicates)", "line_number": null, "bug_type": null}
{"code": "import mysql.connector \n  \n# connect to  database \nmydb = mysql.connector.connect( \nhost=\"localhost\", \nuser=\"yourusername\", \npasswd=\"yourpassword\"\n) \n  \n# print the connection object \nprint(mydb)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_hex_color():\n    return '#' +  ''.join([random.choice('0123456789ABCDEF') for x in range(6)])\n\nprint(generate_hex_color()) # Ex: #C2C30F", "line_number": null, "bug_type": null}
{"code": "import math\n\ndef compute_area_of_the_circle(radius):\n    return math.pi * (radius**2)", "line_number": null, "bug_type": null}
{"code": "list_of_numbers = input(\"Please enter a list of numbers: \").split()\nlist_of_numbers = [int(x) for x in list_of_numbers] \n\nmin_number = min(list_of_numbers)\nprint(\"The smallest number is:\", min_number)", "line_number": null, "bug_type": null}
{"code": "def replace_word(string, word, replacement_word):\n    return string.replace(word, replacement_word)\n\nprint(replace_word(\"Hello hello world!\", \"hello\", \"welcome\"))", "line_number": null, "bug_type": null}
{"code": "def factorial(num):\n\tif num == 1 or num == 0:\n\t\treturn 1\n\telse:\n\t\treturn num * factorial(num-1)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef random_select(arr, k):\n    new_arr = random.sample(arr,k)\n    return new_arr", "line_number": null, "bug_type": null}
{"code": "string_list = [\"Hello\", \"world\", \"how\", \"are\", \"you\"] \n\n# Optimized version \nstring_list = [s.upper() for s in string_list]", "line_number": null, "bug_type": null}
{"code": "import base64\n\ndef encode_base64(string):\n    encoded_bytes = base64.b64encode(string.encode(\"utf-8\"))\n    return encoded_bytes.decode(\"utf-8\")", "line_number": null, "bug_type": null}
{"code": "import requests\n\ndef get_stock_price(symbol):\n url = \"https://finance.yahoo.com/quote/\" + symbol\n req = requests.get(url)\n data = req.json()\n return data['regularMarketPrice']", "line_number": null, "bug_type": null}
{"code": "class Shape:\n  def __init__(self, sides):\n    self.sides = sides\n  \n  def isValid(self):\n    if len(self.sides) >= 3: \n      return True\n    else:\n      return False", "line_number": null, "bug_type": null}
{"code": "arr = [1, 2, 3, 4, 5, 6]\ntotal = sum(arr) # use sum() to sum up all elements of the array in one line", "line_number": null, "bug_type": null}
{"code": "def is_valid_identifier(string):\n  if string.isidentifier():\n    return True\n  else:\n    return False", "line_number": null, "bug_type": null}
{"code": "def remove_spaces(my_string):\n    return my_string.replace(' ', '')\n\n#test\nmy_string = \"This is a string with spaces\"\nno_spaces_string = remove_spaces(my_string)\nprint(no_spaces_string) # Output: Thisisastringwithspaces", "line_number": null, "bug_type": null}
{"code": "def hello():\n name = input('What is your name? ')\n print(f'Hello {name}')", "line_number": null, "bug_type": null}
{"code": "def find_smallest(arr):\n    smallest = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < smallest:\n            smallest = arr[i]\n    return smallest", "line_number": null, "bug_type": null}
{"code": "def is_valid_spectrum(spectrum):\n    m = spectrum[0]\n    for n in spectrum[1:]:\n        if n - m not in [1, 2]:\n            return False\n        m = n\n    return True", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)", "line_number": null, "bug_type": null}
{"code": "def isPalindrome(text):\n    n = len(text)\n    for i in range(n // 2):\n        if text[i] != text[n - i - 1]:\n            return False\n    return True\n\nprint(isPalindrome('noon'))", "line_number": null, "bug_type": null}
{"code": "import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_text(url):\n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    text = soup.find_all(text=True)\n    return ' '.join(text).strip()", "line_number": null, "bug_type": null}
{"code": "def list_to_dict(list): \n  dict = {} \n  for i in range(len(list)): \n    dict[list[i]] = i \n  return dict", "line_number": null, "bug_type": null}
{"code": "import os\n\ndef get_filetype(filename):\n _, file_extension = os.path.splitext(filename)\n return(file_extension.lower()[1:])\n\nfiletype = get_filetype(\"example.jpg\")\nprint(filetype)\n\n# Output: jpg", "line_number": null, "bug_type": null}
{"code": "lst = [5, 10, 15, 20, 25, 30]\n\ndivisible_by_5 = [num for num in lst if num%5 == 0]\nprint(divisible_by_5)", "line_number": null, "bug_type": null}
{"code": "def fibonacci(n):\n    a, b = 0, 1\n    result = []\n    while a < n:\n        result.append(a)\n        a, b = b, a+b\n    return result", "line_number": null, "bug_type": null}
{"code": "def sum_list(list): \n  total = 0\n  for num in list:\n    total += num  \n  return total\n\nprint(sum_list([4, 9, 13, 5])) # Output: 31", "line_number": null, "bug_type": null}
{"code": "import requests\nfrom bs4 import BeautifulSoup\n\nresult = requests.get(\"http://example.com\")\nsoup = BeautifulSoup(result.text, 'lxml')\n\nfor link in soup.find_all('a'):\n    title = link.text\n    print(title)", "line_number": null, "bug_type": null}
{"code": "def float_to_string(number):\n     # Round the number\n    rounded_num = round(number, 2)\n     # Return the number converted to a string\n    return str(rounded_num)", "line_number": null, "bug_type": null}
{"code": "my_list = [1, 2, 3, 4, 5] \nnew_list = [x**2 for x in my_list if x % 2 == 0]", "line_number": null, "bug_type": null}
{"code": "def multiply(x, y):\n\tif y == 0:\n\t\treturn 0\n\telse:\n\t\treturn x + multiply(x, y - 1)", "line_number": null, "bug_type": null}
{"code": "n = 3\n\nfor i in range(1, n+1):\n    for j in range(1, n+1):\n        print(f'{i} x {j} = {i*j}', end='\\t')\n    print()", "line_number": null, "bug_type": null}
{"code": "def biggest_number(num_list):\n  return max(num_list)\n\nbiggest = biggest_number([1, 5, 4, 9, 2])\nprint(biggest) # prints 9", "line_number": null, "bug_type": null}
{"code": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def get_area(self):\n        return 3.14 * self.radius * self.radius", "line_number": null, "bug_type": null}
{"code": "def whitelist_user(user_list, whitelist_user):\n    Whitelisted_users = []\n    for user in user_list: \n        if user == whitelist_user:\n            Whitelisted_users.append(user)\n    \n    return Whitelisted_users", "line_number": null, "bug_type": null}
{"code": "def remove_whitespaces(string):\n    return ' '.join(string.split())\n \nprint(remove_whitespaces(\"This     string  contains   too     much whitespace!\"))", "line_number": null, "bug_type": null}
{"code": "my_list = [1, 2, 3, 4, 5]\n\nfor i in reversed(my_list):\n    print(i)", "line_number": null, "bug_type": null}
{"code": "class Student:\n  def __init__(self, name, roll_number, courses):\n    self.name = name \n    self.roll_number = roll_number \n    self.courses = courses", "line_number": null, "bug_type": null}
{"code": "import random\nimport string\n\ndef generate_password(length):\n    chars = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(chars) for _ in range(length))\n\nprint(generate_password(8))", "line_number": null, "bug_type": null}
{"code": "string1 = input(\"Enter a string: \")\nstring2 = input(\"Enter another string: \")\n\nif string1 == string2:\n print(\"The strings are equal\")\nelse:\n print(\"The strings are not equal\")", "line_number": null, "bug_type": null}
{"code": "def generate_combinations(s):\n    result = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            result.append(s[i:j])\n    return result", "line_number": null, "bug_type": null}
{"code": "from datetime import date\n\ndef days_since(date_str):\n    today = date.today()\n    given_date = date.fromisoformat(date_str)\n    days = today - given_date\n    return days.days", "line_number": null, "bug_type": null}
{"code": "arr = [2, 3, 4, 5]\nindex = 2\n# Replace the element at index with 0\narr[index] = 0\nprint(arr)", "line_number": null, "bug_type": null}
{"code": "def count_characters(string, char):\n    return sum([1 for x in string if x == char])", "line_number": null, "bug_type": null}
{"code": "import hashlib\n \noriginal_string = '<insert string here>'\n\n# Generate the encrypted hash\nencrypted_string = hashlib.sha256(original_string.encode()).hexdigest()\n\nprint('Encrypted hash: ' + encrypted_string)", "line_number": null, "bug_type": null}
{"code": "def is_equal(seq_1, seq_2):\n  return sorted(seq_1) == sorted(seq_2)", "line_number": null, "bug_type": null}
{"code": "sum = 0\nfor i in range(11):\n  sum += i**2\n  \nprint(sum)", "line_number": null, "bug_type": null}
{"code": "import random\n\nlist_of_names = [\"John\", \"Anna\", \"Bill\", \"Kim\", \"Claire\"]\nrandom_name = random.choice(list_of_names)\n\nprint(f'Randomly selected name from the list: {random_name}')", "line_number": null, "bug_type": null}
{"code": "import json\n\ndef array_obj_to_json(arr):\n    json_arr = []\n    for obj in arr:\n        json_arr.append(json.dumps(obj))\n    return json_arr", "line_number": null, "bug_type": null}
{"code": "def equals(a, b):\n    return a == b\n\nequal = equals(28, 48)\nprint(equal)", "line_number": null, "bug_type": null}
{"code": "def print_words_with_e(str): \n    words = str.split() \n    for word in words: \n        if 'e' in word: \n            print(word) \n\nprint_words_with_e(str)", "line_number": null, "bug_type": null}
{"code": "def replace_negative_with_zero(numbers):\n    new_list = []\n\n    for num in numbers:\n        if num < 0:\n            new_list.append(0)\n        else:\n            new_list.append(num)\n    return new_list", "line_number": null, "bug_type": null}
{"code": "def gcd(num_1, num_2):\n  if num_2 == 0:\n    return num_1\n  return gcd(num_2, num_1 % num_2)", "line_number": null, "bug_type": null}
{"code": "mydict = {\n    'fruit': 'apple',\n    'animal': 'cat',\n    'city': 'London'\n}", "line_number": null, "bug_type": null}
{"code": "import random \ndef random_num(start, end): \n    num = random.randint(start, end) \n    return num", "line_number": null, "bug_type": null}
{"code": "def swap_without_variable(x, y): \n    x = x + y   \n    y = x - y  \n    x = x - y  \n    return x, y", "line_number": null, "bug_type": null}
{"code": "def find_type_and_value(x):\n    t = type(x)\n    v = x\n    return t, v", "line_number": null, "bug_type": null}
{"code": "for num in range(2, 101):\n   for i in range(2, num):\n      if (num % i == 0):\n         break\n   else:\n      print(num)", "line_number": null, "bug_type": null}
{"code": "def get_words(sentence):\n    words = sentence.split(' ')\n    return words\n\nwords = get_words('This is a sentence.')\nprint(words)", "line_number": null, "bug_type": null}
{"code": "class Person:\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address", "line_number": null, "bug_type": null}
{"code": "person_details = {\n    'Name': 'John',\n    'Age': 27,\n    'Gender': 'Male'\n}", "line_number": null, "bug_type": null}
{"code": "def print_divisible_numbers(n):\n    for i in range(1, n + 1):\n        if i % 3 == 0 or i % 5 == 0:\n            print(i)", "line_number": null, "bug_type": null}
{"code": "def bigger_number(num1, num2):\n  if num1 > num2:\n    return num1\n  else:\n    return num2", "line_number": null, "bug_type": null}
{"code": "def func1(list):\n    s = 0\n    for x in list:\n        s+= x\n    return s\n\nl = [2, 3]\nresult = func1(l)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "from itertools import combinations\n\ninput_list = [1, 2, 3]\nresult = list(combinations(input_list, 3))\n\nfor combination in result:\n    print(combination)", "line_number": null, "bug_type": null}
{"code": "def sum_of_two_numbers(a, b): \n    c = a + b\n    print(\"sum is \" + str(c))\n\nif __name__ == \"__main__\": \n    sum_of_two_numbers(10, 20)", "line_number": null, "bug_type": null}
{"code": "for i in range(1, 6):\n    for j in range(5-i):\n        print(\" \", end=\"\")\n    for j in range(2*i-1):\n        print(\"*\", end=\"\")\n    print()", "line_number": null, "bug_type": null}
{"code": "def even_positions(string):\n    result = \"\"\n    for i in range(0, len(string), 2):\n        result += string[i]\n    return result\n\nprint(even_positions(\"Hello World!\"))", "line_number": null, "bug_type": null}
{"code": "def filter_words(words, letter):\n    filtered_words = []\n    \n    for word in words:\n        if letter not in word:\n            filtered_words.append(word)\n    \n    return filtered_words", "line_number": null, "bug_type": null}
{"code": "def list_length(list):\n  for element in list:\n    print(len(element))\n\nlist_length(list)", "line_number": null, "bug_type": null}
{"code": "myString = \"Hello, World!\"\n\ncharCount = 0\nfor char in myString:\n    charCount += 1\n    \nprint(\"Number of characters:\", charCount)", "line_number": null, "bug_type": null}
{"code": "def total_characters(string):\n    count = 0\n    for char in string:\n        count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "import re\n\ndef regex_match(pattern, text):\n    regex = re.compile(pattern)\n    matches = regex.findall(text)\n    return matches", "line_number": null, "bug_type": null}
{"code": "class TemperatureData:\n    def __init__(self, temperature):\n        self.temperature = temperature\n\n    def get_temperature(self):\n        return self.temperature", "line_number": null, "bug_type": null}
{"code": "student_dict = {\n    123456: (\"Alice\", \"alice@example.com\", \"123-456-789\"),\n    789456: (\"Bob\", \"bob@example.com\", \"456-789-012\")\n}", "line_number": null, "bug_type": null}
{"code": "input_string = input('Enter a string: ')\n\noutput_string = input_string.upper()\n\nprint(f'Your input in uppercase is: {output_string}')", "line_number": null, "bug_type": null}
{"code": "def sort_list(numbers):\n    numbers.sort()\n    return numbers\n\nresult = sort_list([2, 4, 5, 1, 3])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n    \nnum = 7\nresult = factorial(num)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def format_text(input_text):\n    formatted_str = \"\"\n    for i in input_text:\n        if i.isupper():\n            formatted_str += \"'#{i}'\"\n        else:\n            formatted_str += i\n    return formatted_str", "line_number": null, "bug_type": null}
{"code": "nums = [1, 2, 3, 4, 5]\nsquared_nums = list(map(lambda num: num * num, nums))", "line_number": null, "bug_type": null}
{"code": "def sum_numbers(arr):\n    s = 0\n    for i in range(len(arr)):\n        s += arr[i]\n    return s", "line_number": null, "bug_type": null}
{"code": "def sort_strings(s1, s2, s3):\n    return sorted([s1, s2, s3])\n\nresult = sort_strings('apples', 'oranges', 'peaches')\nprint(result)", "line_number": null, "bug_type": null}
{"code": "for x in range(1, 10):\n    if x < 4:\n        print(\"Low\")\n    else:\n        print(\"High\")", "line_number": null, "bug_type": null}
{"code": "class Animal:\n    def __init__(self):\n        pass\n    \n    def make_sound(self):\n        print(\"The animal makes a sound.\")", "line_number": null, "bug_type": null}
{"code": "x = 5\ny = 7\nsum = x + y\n\n# Add the correct operator here\nsum = x + y\n\nprint(\"Sum=\", sum)", "line_number": null, "bug_type": null}
{"code": "class Vector3D:\n  def __init__(self, x, y, z):\n    self.x = x\n    self.y = y\n    self.z = z", "line_number": null, "bug_type": null}
{"code": "def sumArrayElements(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\narr = [1, 4, 6]\nresult = sumArrayElements(arr)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "print(\"Enter a number: \")\nnum = int(input())\n\nfact = 1\nfor i in range(num, 0, -1):\n    fact *= i\n\nprint(\"Factorial is\", fact)", "line_number": null, "bug_type": null}
{"code": "def my_function(input_array):\n  output_array = set()\n  return output_array.union(input_array)", "line_number": null, "bug_type": null}
{"code": "import random\nimport string\n\ndef generate_pass(stringLength=8):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))\n\npassword = generate_pass()\nprint(password)", "line_number": null, "bug_type": null}
{"code": "def square_list(arr):\n    result = [num**2 for num in arr]\n    return result", "line_number": null, "bug_type": null}
{"code": "for i in range(300, 501):\n    if i % 5 == 0 and i % 6 == 0:\n        print(i)", "line_number": null, "bug_type": null}
{"code": "def sumListElements(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n\nresult = sumListElements([1,2,3]) \nprint(result)", "line_number": null, "bug_type": null}
{"code": "class Student:\n    def __init__(self, name, id_number):\n        self.name = name\n        self.id_number = id_number", "line_number": null, "bug_type": null}
{"code": "def find_duplicates(lst):\n    seen = set()\n    duplicates = []\n    for item in lst:\n        if item in seen:\n            duplicates.append(item)\n        else:\n            seen.add(item)\n    \n    return duplicates", "line_number": null, "bug_type": null}
{"code": "for i in range(1, 6):\n    for j in range(i):\n        print(\"*\", end=\" \")\n    print()", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef get_random_array(max_size):\n    arr = []\n\n    for _ in range(random.randint(0, max_size)):\n        arr.append(random.randint(0, max_size))\n    \n    return arr", "line_number": null, "bug_type": null}
{"code": "import time\n\nsentence = \"Hello World\"\n\nwhile True:\n    print(sentence)\n    time.sleep(10)", "line_number": null, "bug_type": null}
{"code": "def mean(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total / len(nums)", "line_number": null, "bug_type": null}
{"code": "def count_even(arr): \n    count = 0\n    for x in arr: \n        if x % 2 == 0: \n            count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "sum = 0\nfor i in range(1000):\n    if (i % 3 == 0 or i % 5 == 0):\n        sum = sum + i\n\nprint(sum)", "line_number": null, "bug_type": null}
{"code": "def find_largest_number(numbers):\n    largest = numbers[0]\n    for number in numbers:\n        if number > largest:\n            largest = number\n\n    return largest", "line_number": null, "bug_type": null}
{"code": "def hello():\n    print(\"Hello world!\")\n\ndef goodbye():\n    print(\"Goodbye!\")\n\ndef greetings():\n    hello()\n    goodbye()\n\ngreetings()", "line_number": null, "bug_type": null}
{"code": "def fibonacci(n):\n a, b = 0, 1\n for i in range(n):\n  a, b = b, a + b\n return a\n\nfor i in range(51):\n print(fibonacci(i))", "line_number": null, "bug_type": null}
{"code": "import random\n\nrandom_numbers = []\nfor _ in range(1000):\n    random_numbers.append(random.random())\n\nprint(random_numbers)", "line_number": null, "bug_type": null}
{"code": "def compare_arrays(arrA, arrB):\n    for i in arrA:\n        if i not in arrB:\n            return False\n    return True", "line_number": null, "bug_type": null}
{"code": "class Customer:\n    def __init__(self, name, email, phone):\n        self.name = name\n        self.email = email\n        self.phone = phone", "line_number": null, "bug_type": null}
{"code": "sequence = [7, 3, 12, 9, 4]\nmaxnum = 0\n\nfor num in sequence:\n if num > maxnum:\n  maxnum = num\n\nprint(maxnum) # Output: 12", "line_number": null, "bug_type": null}
{"code": "import json\n\njsonString = '{\"name\": \"John Doe\", \"address\": \"123 Main Street\"}'\njsonObject = json.loads(jsonString)\ncopiedString = json.dumps(jsonObject)\n\nprint(copiedString)", "line_number": null, "bug_type": null}
{"code": "def print_reverse(arr):\n    for i in range(len(arr)-1, -1, -1):\n        print(arr[i])", "line_number": null, "bug_type": null}
{"code": "def calculate_checksum (data):\n    checksum = 0\n    for char in data:\n        checksum += ord(char)\n    return checksum % 256", "line_number": null, "bug_type": null}
{"code": "def foo(a, b):\n    return a + b\n\nx = foo(2, 3)\nprint(x)  # output is 5", "line_number": null, "bug_type": null}
{"code": "def squares(arr):\n  res = []\n  for i in arr:\n    res.append(i**2)\n  return res\n\narr = [1, 2, 3]\nres = squares(arr)\nprint(res)", "line_number": null, "bug_type": null}
{"code": "import random\nimport string\n\ndef randomString():\n    letters = string.ascii_lowercase\n    length = 10\n    return ''.join(random.choice(letters) for i in range(length))", "line_number": null, "bug_type": null}
{"code": "def sum_values(list_of_dicts): \n  return sum([v for d in list_of_dicts for v in d.values()])", "line_number": null, "bug_type": null}
{"code": "def tokenize(string):\n    words = string.split(\" \")\n    return words\n\ntokenized_str = tokenize(\"Hello, World!\")\nprint(tokenized_str)", "line_number": null, "bug_type": null}
{"code": "def fib(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\nn = 8\nprint(fib(n))", "line_number": null, "bug_type": null}
{"code": "import turtle\n\nt = turtle.Turtle()\n\nfor i in range(20):\n    t.left(90)\n    t.forward(50)\n    t.right(90)\n    t.forward(50)", "line_number": null, "bug_type": null}
{"code": "def getFactorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * getFactorial(num - 1)", "line_number": null, "bug_type": null}
{"code": "def celcius_to_fahrenheit(temp):\n    return ((temp*9/5) + 32)\n\nprint(celcius_to_fahrenheit(20))", "line_number": null, "bug_type": null}
{"code": "class Square: \n    def __init__(self, number): \n        self.number = number \n\n    def square_number(self): \n        return self.number * self.number \n\nnumber_obj = Square(10) \nprint(number_obj.square_number())", "line_number": null, "bug_type": null}
{"code": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None", "line_number": null, "bug_type": null}
{"code": "def is_in_range(n, lower, upper):\n    return True if lower <= n & n <= upper else False\n\nis_in_range(3, 1, 10)\n# Output: True", "line_number": null, "bug_type": null}
{"code": "import random\ndef generate_random_nums(length):\n  lst = []\n  for _ in range(length):\n    lst.append(random.randint(1, 10))\n  return lst", "line_number": null, "bug_type": null}
{"code": "import random \ndef shuffle_list(lst):\n    if len(lst) > 1:\n        random.shuffle(lst)\n    return lst", "line_number": null, "bug_type": null}
{"code": "def sum_list(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total", "line_number": null, "bug_type": null}
{"code": "def find_max(list):\n    max_num = list[0]\n    for num in list:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nmax_number = find_max(list)\nprint(max_number)", "line_number": null, "bug_type": null}
{"code": "import asyncio\n\nasync def do_something():\n\tprint('starting something')\n\tawait asyncio.sleep(2)\n\tprint('done with something')\n\nasyncio.run(do_something())", "line_number": null, "bug_type": null}
{"code": "def print_odd_numbers(start, end):\n    for i in range(start, end+1):\n        if i % 2 != 0:\n            print(i)", "line_number": null, "bug_type": null}
{"code": "unsorted_list = [5, 8, 2, 1, 3, 10]\n\nsorted_list = sorted(unsorted_list)\n\nprint(sorted_list)", "line_number": null, "bug_type": null}
{"code": "def capitalize_string(str):\n    words = str.split(' ')\n    capitalized_words = [word.capitalize() for word in words]\n    capitalized_string = ' '.join(capitalized_words)\n    return capitalized_string", "line_number": null, "bug_type": null}
{"code": "import random\n\nrandom_set = random.sample(range(1,51), 10)\nprint(random_set)", "line_number": null, "bug_type": null}
{"code": "def split_string(string):\n    result = []\n    for i in range(0, len(string), int(len(string) / 2)):\n        result.append(string[i: i + int(len(string) / 2)])\n    return result", "line_number": null, "bug_type": null}
{"code": "from sklearn.ensemble import RandomForestClassifier\n\nclf = RandomForestClassifier(n_estimators = 100, criterion = \"entropy\", random_state = 0)", "line_number": null, "bug_type": null}
{"code": "def minmax(array):\n  max_val = max(array)\n  min_val = min(array)\n  return [max_val, min_val]", "line_number": null, "bug_type": null}
{"code": "import numpy as np\n\nx = np.arange(-2*np.pi, 2*np.pi, 0.5)\n\ny = np.cos(x) + np.sin(x)\n\nsolution = x[np.where(y == 0)]\nprint(solution)", "line_number": null, "bug_type": null}
{"code": "def search(lst, index): \n    if index < 0 or index >= len(lst):  \n        print(\"Index out of bounds\") \n        return None\n    else:  \n        return lst[index]", "line_number": null, "bug_type": null}
{"code": "def dotProduct(vector1, vector2): \n    dotProd = 0\n    for i in range(len(vector1)):\n        dotProd += vector1[i] * vector2[i]\n    return dotProd", "line_number": null, "bug_type": null}
{"code": "class Message:\n    def __init__(self, text):\n        self.text = text\n\n    def __str__(self):\n        return self.text", "line_number": null, "bug_type": null}
{"code": "x = 10\ny = 20\n\n#Swap the values\nx, y = y, x\n\nprint(\"After swapping: x =\", x, \"and y =\", y)", "line_number": null, "bug_type": null}
{"code": "def truncateString(inputString, length):\n    return inputString[:length]\n\nprint(truncateString('Hello World', 5))", "line_number": null, "bug_type": null}
{"code": "def maximum(x, y):\n    if x > y:\n        return x\n    else:\n        return y", "line_number": null, "bug_type": null}
{"code": "import random \n  \ndef generate_matrix():\n    matrix = [[random.randint(1, 9) \n                for x in range(3)] \n                    for y in range(3)] \n  \n    return matrix\n\nresult = generate_matrix()\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def square_array(nums): \n    return [n**2 for n in nums] \n\nresult = square_array([1, 2, 3])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "my_array = [1,2,3,4,5,6,7,8,9,10]", "line_number": null, "bug_type": null}
{"code": "num1 = float(input(\"Please enter the first number: \"))\nnum2 = float(input(\"Please enter the second number: \"))\n\nprint(\"The sum of the two numbers is: \" + str(num1 + num2))", "line_number": null, "bug_type": null}
{"code": "list = ['cat', 'apple', 'elephant', 'dog']\n\nlist.sort()\n\nprint(list) # Output: ['apple', 'cat', 'dog', 'elephant']", "line_number": null, "bug_type": null}
{"code": "def sort_list(lst):\n  lst.sort()\n  return lst\n\nlst = [5, 7 ,1 ,3, 4]\nsorted_list = sort_list(lst)\nprint(sorted_list)", "line_number": null, "bug_type": null}
{"code": "import datetime\n\ndateandtime = datetime.datetime.now()\n# print date and time string\nprint(dateandtime.strftime(\"%d/%m/%Y %H:%M:%S\"))", "line_number": null, "bug_type": null}
{"code": "def count_vowels(s):\n  count = 0\n  vowels = \"aeiou\"\n  \n  for char in s:\n    if char in vowels: \n      count += 1\n  \n  return count", "line_number": null, "bug_type": null}
{"code": "import re\n\ndef remove_special_characters(string):\n    return re.sub('[^A-Za-z0-9]+', '', string)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generateEven():\n    even_int = random.randint(0,10)\n    if(even_int % 2 == 0):\n        return even_int\n    else:\n        return generateEven()\n\nprint(generateEven())", "line_number": null, "bug_type": null}
{"code": "class Employee:\n  def __init__(self, id, name):\n    self.id = id\n    self.name = name\n\n  def get_id(self):\n    return self.id\n\n  def get_name(self):\n    return self.name", "line_number": null, "bug_type": null}
{"code": "import random\nimport string\n\nlength = 8\n\nchars = string.ascii_letters + string.digits + string.punctuation\npassword = ''.join(random.choice(chars) for _ in range(length))\n\nprint(password)", "line_number": null, "bug_type": null}
{"code": "def concat_strings(str1, str2):\n  return str1 + str2\n\nresult = concat_strings(\"Hello \", \"World!\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def factorial(x):\n    result = 1\n    for i in range(1,x+1):\n        result = result*i\n    return result\n    \nprint(factorial(5))", "line_number": null, "bug_type": null}
{"code": "class Student(object):\n\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address", "line_number": null, "bug_type": null}
{"code": "def add_numbers(a,b): \n    try:\n        return a + b\n    except TypeError as e:\n        print(e)\n        return None", "line_number": null, "bug_type": null}
{"code": "import copy\n\noriginal_dict = {'a': 1, 'b': 2}\n\nshallow_copy_dict = copy.copy(original_dict)", "line_number": null, "bug_type": null}
{"code": "for i in range(1, 10):\n    for j in range(1, i):\n        print(\"*\", end=\"\")\n    print()", "line_number": null, "bug_type": null}
{"code": "for i in range(1, 11):\n  for j in range(1, 11):\n    print(f\"{i} x {j} = {i * j}\")\n  print()", "line_number": null, "bug_type": null}
{"code": "import base64\n\ndef decode_base64(string):\n    decoded_string = base64.b64decode(string).decode('utf-8')\n    return decoded_string", "line_number": null, "bug_type": null}
{"code": "[x**2 for x in [1, 2, 3, 4, 5, 6] if x % 2 != 0]", "line_number": null, "bug_type": null}
{"code": "def optiFunc(n):\n    result = n * (n-1) / 2 \n    return result", "line_number": null, "bug_type": null}
{"code": "def word_count(string):\n words = string.split()\n return len(words)\n\nprint(word_count(\"This is a sentence\"))", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_random_numbers(start, end):\n    return random.randint(start, end)\n\nresult = generate_random_numbers(1,10)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def remove_duplicate(list): \n\treturn list(set(list)) \n\nremove_duplicate([1,1,2,3,4,4]) #returns [1, 2, 3, 4]", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n  if n == 0 or n == 1:\n    return 1\n  else:\n    return n * factorial(n-1)", "line_number": null, "bug_type": null}
{"code": "result = (2*3 - 6) / (4 + 8)\nprint(result)\n# - 0.25", "line_number": null, "bug_type": null}
{"code": "def delete_duplicates(array):\n    seen = set()\n    non_duplicates = []\n    for val in array:\n        if val not in seen:\n            non_duplicates.append(val)\n            seen.add(val)\n    return non_duplicates", "line_number": null, "bug_type": null}
{"code": "def reverse_string(string): \n  return string[::-1] \n  \nprint(reverse_string(\"GPT-3\"))", "line_number": null, "bug_type": null}
{"code": "sentence = \"He is working on it\"\nword = \"working\"\n\nsentence = sentence.replace(word, \"\")\n\nprint(sentence)", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnumber = 4\nresult = factorial(number)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "class Cat:\n    def __init__(self):\n        self.name = \"\"\n        self.colour = \"\"\n        self.age = 0\n        self.breed = \"\"\n\n    def meow(self):\n        print(self.name, \"says meow!\")", "line_number": null, "bug_type": null}
{"code": "print(\", \".join([str(x) for x in [1, 8, 10, 15, 12]]))", "line_number": null, "bug_type": null}
{"code": "def toCamelCase(s):\n    s = s.split(' ')\n    return ''.join(x.title() for x in s)\n\ns = \"this is some random text\"\nprint(toCamelCase(s))", "line_number": null, "bug_type": null}
{"code": "def process_string(string):\n    return string.lower()\n\nprocess_string(\"MyString\") # returns \"mystring\"", "line_number": null, "bug_type": null}
{"code": "def calculatePowerDemand(util, time, power):\n    return util * time * power\n\nPowerDemand = calculatePowerDemand(0.1, 10, 100)\nprint(PowerDemand)", "line_number": null, "bug_type": null}
{"code": "import re\n\ntext = \"The list of contacts is john@test.com,jane@example.com,bob@test.com\"\n\npattern = r'[\\w\\.-]+@[\\w\\.-]+'\n\nmatch = re.findall(pattern, text)\n\nprint(match)", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_password(length):\n    chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(chars) for _ in range(length))\n    return password", "line_number": null, "bug_type": null}
{"code": "\"\"\"\nGenerate a loop to iterate through each character of a string\n\"\"\"\n\n# Define a string\nstring = 'Example string'\n\n# Iterate through the characters of the string\nfor char in string:\n    # Print each character\n    print(char)", "line_number": null, "bug_type": null}
{"code": "def remove_punc_and_whitespace(string): \n    return ''.join([x for x in string if x not in [\" \", \",\", \":\", \"-\", \"!\", \"?\", \".\"]])", "line_number": null, "bug_type": null}
{"code": "def calculate_avg(values):\n  total = 0\n  count = len(values)\n \n  for value in values:\n    total += value\n \n  return total/count", "line_number": null, "bug_type": null}
{"code": "import json\n\nusers = json.loads(input)\ntotal_age = 0\nfor user in users:\n total_age += user[\"age\"]\n\naverage_age = total_age / len(users)\n\nprint(f\"Average age of users is {average_age}\")", "line_number": null, "bug_type": null}
{"code": "def filter_words_by_length(word_list, length):\n    return [word for word in word_list if len(word) == length]", "line_number": null, "bug_type": null}
{"code": "def display_square(number):\n    result = number * number\n    print(result)\n\ndisplay_square(5)", "line_number": null, "bug_type": null}
{"code": "def most_frequent(list): \n  return max(set(list), key = list.count)\n  \nmost_frequent([3,4,3,4,3])", "line_number": null, "bug_type": null}
{"code": "inp_str = \"HELLO WORLD\"\n\nresult_str = ''\n\nfor c in inp_str:\n    if c.isupper():\n        result_str += c.lower()\n    else:\n        result_str += c.upper()\n        \nprint(result_str)", "line_number": null, "bug_type": null}
{"code": "from BeautifulSoup import BeautifulSoup\n\ndef parseHtml(html):\n    soup = BeautifulSoup(html)\n    links = []\n    for link in soup.findAll('a'):\n        links.append(link.get('href'))\n    return links", "line_number": null, "bug_type": null}
{"code": "def remove_spaces(string): \n\treturn \"\".join(string.split()) \n\n# Driver code \nstring = \"this is a sample sentence\"\nprint(remove_spaces(string))", "line_number": null, "bug_type": null}
{"code": "list_of_strings = ['this', 'is', 'a', 'list', 'of', 'strings']\n\nfor string in list_of_strings:\n    print(string.upper())", "line_number": null, "bug_type": null}
{"code": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"http://example.com\"\npage = requests.get(url)\n\nsoup = BeautifulSoup(page.content, 'html.parser')\ntext = soup.find_all(text=True)\n\nfor t in text:\n\tprint(t)", "line_number": null, "bug_type": null}
{"code": "# Translate the following function from JavaScript to Python\ndef add(a, b):\n    return a + b", "line_number": null, "bug_type": null}
{"code": "for char in \"Hello World\":\n    print(char, \":\", \"Hello World\".count(char))", "line_number": null, "bug_type": null}
{"code": "def is_perfect(n):\n  sum = 0\n  for i in range(1, n): \n    if (n % i == 0): \n      sum += i \n  return sum == n", "line_number": null, "bug_type": null}
{"code": "import requests\n\nurl = \"https://example.com/data\"\n\nresponse = requests.get(url)\ndata = response.json()\n\ndata_dict = {}\nfor item in data:\n    data_dict[item['id']] = item\n    \nprint(data_dict)", "line_number": null, "bug_type": null}
{"code": "def is_sentence_palindrome(sentence):\n    sentence = sentence.lower().replace(\" \", \"\")\n    return sentence == sentence[::-1]\n\nis_sentence_palindrome(\"Rise to vote, Sir\")  # False", "line_number": null, "bug_type": null}
{"code": "num = 0\nwhile num < 20:\n    print (num)\n    num += 4", "line_number": null, "bug_type": null}
{"code": "def search_in_list(list, element):\n  for item in list:\n    if item == element:\n      return element\n  return None\n\nresult = search_in_list([1,5,8,2], 2)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def add_numbers(a, b):\n    return a + b\n\nif __name__ == '__main__':\n    a = 3\n    b = 5\n    result = add_numbers(a, b)\n    print(result)", "line_number": null, "bug_type": null}
{"code": "for i in sorted([10, 5, 2, 8, 12]):\n        print(i)", "line_number": null, "bug_type": null}
{"code": "def operation(op):\n    result = eval(op)\n    print(result)\n\noperation('2*2') # prints 4", "line_number": null, "bug_type": null}
{"code": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://example.com\"\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Scrape data from the website\n# ...\n# ...", "line_number": null, "bug_type": null}
{"code": "list = [3, 4, 5, 6]\ntuple = tuple(list)\nprint(\"Tuple:\", tuple)", "line_number": null, "bug_type": null}
{"code": "def find_word(my_list, word):\n    for i in my_list:\n        if i == word:\n            return True\n    return False", "line_number": null, "bug_type": null}
{"code": "import random\n\n# Generate 10 random numbers between 1 and 100\nfor _ in range(10):\n    print(random.randint(1, 100))", "line_number": null, "bug_type": null}
{"code": "def access_database(db):\n connection = db.connect()\n cursor = connection.cursor()\n cursor.execute(\"SELECT * FROM restaurant_reviews\")\n results = cursor.fetchall()\n connection.close()\n return results", "line_number": null, "bug_type": null}
{"code": "class Animal:\n    def __init__(self, name):\n        self.name = name\n\nclass Dog(Animal):\n    def __init__(self, name, breed):\n        super().__init__(name)\n        self.breed = breed", "line_number": null, "bug_type": null}
{"code": "def triangle_num(n):\n    if n == 1:\n        return 1\n    else: \n        return n + triangle_num(n-1)", "line_number": null, "bug_type": null}
{"code": "myDict = {}\n\nfor i in range(1,5):\n myDict[i] = i**2\n\nprint(myDict)", "line_number": null, "bug_type": null}
{"code": "def check_palindrome(string):\n  rev_str = string[::-1]\n  if rev_str == string:\n    return \"The string is a palindrome\"\n  return \"The string is not a palindrome\"\n\nprint(check_palindrome(\"madam\"))", "line_number": null, "bug_type": null}
{"code": "class Person:\n  def __init__(self, name, age, area):\n    self.name = name\n    self.age = age\n    self.area = area", "line_number": null, "bug_type": null}
{"code": "def sumCharValues(string):\n    sum = 0\n    for ch in string:\n        sum += ord(ch)\n    return sum", "line_number": null, "bug_type": null}
{"code": "name = input(\"Name: \")\nvalue = input(\"Value: \")\nprint(\"Hello {}, your value is {}\".format(name, value))", "line_number": null, "bug_type": null}
{"code": "def search_in_array(my_array, number):\n  for i, val in enumerate(my_array):\n    if val == number:\n      return i\n  return -1", "line_number": null, "bug_type": null}
{"code": "from sklearn import tree\n\ndef create_tree_model(x,y):\n    model = tree.DecisionTreeClassifier()\n    model.fit(x, y) \n    return model", "line_number": null, "bug_type": null}
{"code": "def concatenate_strings(first_str, second_str):\n    return first_str + '-' + second_str\n\nfirst_str = \"Hello\"\nsecond_str = \"World\"\nresult = concatenate_strings(first_str, second_str)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def sentenceLength(sentence):\n    return len(sentence)\n\nsentence = 'Hello, World!'\nprint(sentenceLength(sentence))", "line_number": null, "bug_type": null}
{"code": "vector = [] \nvector.append(1) \nvector.append(2) \nvector.append(3)", "line_number": null, "bug_type": null}
{"code": "for i in range(1, 11):\n print(5, 'X', i, '=', 5*i)", "line_number": null, "bug_type": null}
{"code": "input = ['foo', 'bar', 'baz', 'hello', 'world']\noutput = [x for x in input if 'b' in x]\nprint(output) # ['bar', 'baz']", "line_number": null, "bug_type": null}
{"code": "def delete_element(arr, element):\n    if element in arr:\n        arr.remove(element)\n    return arr", "line_number": null, "bug_type": null}
{"code": "def compute_accuracy(true, pred):\n    correct = 0\n    total = len(true)\n    for i in range(total):\n        if true[i] == pred[i]:\n            correct += 1\n    return correct/total", "line_number": null, "bug_type": null}
{"code": "import json\n\ndata = {\n 'name': 'John',\n 'age': 34,\n 'hobbies': ['surfing', 'hiking', 'golf']\n}\n\njson_data = json.dumps(data)\n\nprint(json_data)", "line_number": null, "bug_type": null}
{"code": "import requests \nfrom bs4 import BeautifulSoup\n\nr = requests.get(\"http://example.com\") \ndata = r.text \nsoup = BeautifulSoup(data, 'html.parser') \n\nfor item in soup.find_all(\"div\"): \n print(item.text)", "line_number": null, "bug_type": null}
{"code": "# define list \nlst = [1, 'c', 3, 'a', 2, 'b']\n\n# sort list\nsorted_lst = sorted(lst, key=lambda x:str(x))\n\n# print sorted list\nprint(sorted_lst)", "line_number": null, "bug_type": null}
{"code": "def combine_list(list_a, list_b):\n    combined_list = []\n    for a in list_a:\n        combined_list.append(a)\n    for b in list_b:\n        combined_list.append(b)\n    return combined_list", "line_number": null, "bug_type": null}
{"code": "def compute_word_frequency(sentence):\n    words = sentence.split()\n    frequency = {}\n\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency", "line_number": null, "bug_type": null}
{"code": "def intersect(list1, list2):\n    return list(set(list1).intersection(list2))\n\nprint(intersect([1,2,3,4], [2,3,4,5])) # prints [2,3,4]", "line_number": null, "bug_type": null}
{"code": "def find_sum_series(a, r, n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + a*(r**(i - 1))\n    return sum", "line_number": null, "bug_type": null}
{"code": "a = 100\nb = 200\nsum = a + b\n\n# Optimized code\nsum = sum(100, 200)", "line_number": null, "bug_type": null}
{"code": "def average_three(num1, num2, num3):\n    return (num1 + num2 + num3) / 3", "line_number": null, "bug_type": null}
{"code": "unique_list = list(set([50, 20, 30, 40, 10]))\nprint(unique_list)", "line_number": null, "bug_type": null}
{"code": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "line_number": null, "bug_type": null}
{"code": "def decimal_binary_octal_hexadecimal(n):\n    print(\"Binary =\", bin(n))\n    print(\"Octal =\", oct(n))\n    print(\"Hexadecimal =\", hex(n))", "line_number": null, "bug_type": null}
{"code": "import random\n\nrandom_numbers = random.sample(range(0, 10), 3) \nprint(random_numbers)", "line_number": null, "bug_type": null}
{"code": "def char_count(string):\n    char_dict = {}\n    for char in string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict", "line_number": null, "bug_type": null}
{"code": "numbers = [1, 2, 3, 4]\n \nfor i in range(len(numbers)-1, -1, -1):\n    print(numbers[i])", "line_number": null, "bug_type": null}
{"code": "import requests\n\nurl = 'https://api.example.com/users'\nresponse = requests.get(url)\nresponse_status_code = response.status_code\ndata = response.json()\ndata_dict = dict(data)\n\nprint(response_status_code)\nprint(data_dict)", "line_number": null, "bug_type": null}
{"code": "def is_anagram(a, b):\n  return sorted(a) == sorted(b)\n\nresult = is_anagram(\"listen\", \"silent\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def celsius_to_fahrenheit(celsius):\n    return (celsius * (9/5)) + 32", "line_number": null, "bug_type": null}
{"code": "string = \"Hello, world! This is a sample message.\"\nword = \"hello\"\n\ncount = string.lower().split().count(word.lower())\nprint(f\"The word {word} appears {count} times in the given string.\")", "line_number": null, "bug_type": null}
{"code": "def find_min(input_list):\n    min_ele = input_list[0]\n    for ele in input_list:\n        if ele < min_ele:\n            min_ele = ele\n    return min_ele", "line_number": null, "bug_type": null}
{"code": "def simplified_func (x):\n    return 3*x**2 + 5*x - 4", "line_number": null, "bug_type": null}
{"code": "def fibonacci(n):\n  if n == 0 or n == 1:\n    return n\n  else:\n    return fibonacci(n - 1) + fibonacci(n - 2)\n  \nresult = fibonacci(7)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "string = \"abcd\"\ncount = 0\nwhile count < 50:\n    for ch in string:\n        print(ch)\n        count += 1\n    if count >= 50:\n        break", "line_number": null, "bug_type": null}
{"code": "import random \nimport string\n\ndef gen_random_password():\n  chars = string.ascii_letters + string.digits\n  password = ''.join(random.choice(chars) for _ in range(8))\n  return password\n\nprint(gen_random_password())", "line_number": null, "bug_type": null}
{"code": "data = [1,2,3,4,5,6,7,8,9]\n\ncount = 0\nfor value in data:\n  if value > 5:\n    count += 1\n\nprint(count)", "line_number": null, "bug_type": null}
{"code": "grades_dict = {\n  \"James\": 95,\n  \"Alice\": 80,\n  \"John\": 75\n}", "line_number": null, "bug_type": null}
{"code": "number_sum = 0\nfor i in range(1, 11):\n    number_sum += i\nprint(number_sum) # 55", "line_number": null, "bug_type": null}
{"code": "def count_unique(list):\n    unique = {}\n    for item in list:\n        if item not in unique:\n            unique[item] = 1\n        else:\n            unique[item] += 1\n    return len(unique)", "line_number": null, "bug_type": null}
{"code": "numbers = [1, 2, 3, 4, 5, 6]\nnumbers_set = set(numbers)", "line_number": null, "bug_type": null}
{"code": "def mean_value(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    return sum / len(numbers)", "line_number": null, "bug_type": null}
{"code": "import requests\n\ndef fetch_data(url):\n    response = requests.get(url)\n    return response.text\n\nfetched_data = fetch_data('http://www.example.com')", "line_number": null, "bug_type": null}
{"code": "def sort_array(arr): \n    arr.sort() \n    return arr \n\nsort = sort_array([3, 7, 1, 5])\n\nprint(sort)", "line_number": null, "bug_type": null}
{"code": "lookup_table = {\"key1\":\"value1\", \"key2\":\"value2\", \"key3\":\"value3\"}", "line_number": null, "bug_type": null}
{"code": "#Print out even numbers from the given list\nfor num in list:\n    if (num % 2 == 0):\n        print(num)", "line_number": null, "bug_type": null}
{"code": "import re\n \ntext = \"The quick brown fox jumps over the lazy dog\"\n \nreplaced = re.sub(r'quick', \"QUICK\", text) \n \nprint(replaced) #prints \"The QUICK brown fox jumps over the lazy dog\"", "line_number": null, "bug_type": null}
{"code": "def sum_numbers(arr):\n    total = 0\n    for num in arr:\n        if num > 0:\n            total += num\n    return total\n\nprint(sum_numbers([1,2,3,4,5])) # 15", "line_number": null, "bug_type": null}
{"code": "def preOrderTraverse(tree):\n    if tree is None:\n        return\n    \n    print(tree.data)\n    preOrderTraverse(tree.left)\n    preOrderTraverse(tree.right)", "line_number": null, "bug_type": null}
{"code": "def element_count(list):\n    return len(list)\n\nlist = ['This', 'is', 'a', 'list']\nprint(element_count(list))", "line_number": null, "bug_type": null}
{"code": "sum = 0\n\nfor num in range(1, 98, 2):\n n1 = num / (num + 2)\n sum += n1\n\nprint(sum)", "line_number": null, "bug_type": null}
{"code": "for i in range(1, 11):\n  for j in range(1, 11):\n    print(i*j, end=\"\\t\")\n  print()", "line_number": null, "bug_type": null}
{"code": "list = [10, 20, 30, 40, 50]\nlist.reverse()\nprint(list)", "line_number": null, "bug_type": null}
{"code": "def listSum(lst):\n    s = 0\n    for i in range (len(lst)):\n        s += lst[i]\n    return s\n\nprint (listSum([1,2,3])) # 6", "line_number": null, "bug_type": null}
{"code": "import math\n\ndef calculateCircleArea(radius):\n    area = math.pi * radius * radius\n    return area\n\nradius = 5\n\nprint(\"Area of a circle with radius 5 is: \", calculateCircleArea(radius))", "line_number": null, "bug_type": null}
{"code": "def count_matches(list1, list2):\n    count = 0\n    for elem in list1:\n        if elem in list2:\n            count += 1 \n    return count", "line_number": null, "bug_type": null}
{"code": "def search_list(input_list, input_value):\n    \"\"\"Checks whether a given value is in a list\"\"\"\n    for num in input_list:\n        if num == input_value:\n            return True\n    return False", "line_number": null, "bug_type": null}
{"code": "sentence = \"This is a sentence with @ symbols.\"\nsentence = sentence.replace('@', '#')\nprint(sentence) # This is a sentence with # symbols.", "line_number": null, "bug_type": null}
{"code": "def hipsterify(sentence):\n  return ' '.join([\"hipster \" + word for word in sentence])", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef shuffle(list):\n    random.shuffle(list)\n    return list\n\nlist = [1, 2, 3, 4, 5]\nshuffledList = shuffle(list)\n\nprint(shuffledList)", "line_number": null, "bug_type": null}
{"code": "def number_in_range(num, start, end):\n  if num >= start and num <= end:\n    return True\n  else:\n    return False", "line_number": null, "bug_type": null}
{"code": "def series_sum(n):\n    sum_series = 0\n    for i in range(1, n + 1):\n        sum_series += 1/i\n    return sum_series", "line_number": null, "bug_type": null}
{"code": "def convert_to_integer(x):\n    try:\n        return int(x)\n    except Exception:\n        print('Unable to convert to integer.')\n        return x", "line_number": null, "bug_type": null}
{"code": "def capitalize_string(str):\n    capitalized_str = \"\"\n    for char in str:\n        capitalized_str += char.upper()\n    return capitalized_str\n\ntest_string = \"hello world\"\ncapitalized_string = capitalize_string(test_string)\nprint(capitalized_string)", "line_number": null, "bug_type": null}
{"code": "string = \"ABC%@#XYZ\"\nnew_string = ''.join(c for c in string if c.isalnum())\nprint(new_string) # output: ABCXYZ", "line_number": null, "bug_type": null}
{"code": "def pred_model(inputs): \n  outputs=[]\n  for i in inputs:\n    outputs.append(i*2)\n  return outputs\n \ninputs = [1,2,3] \noutputs = pred_model(inputs) \nprint(\"Outputs:\", outputs)", "line_number": null, "bug_type": null}
{"code": "def capitalize_words(string):\n words = string.split(' ')\n capitalized = [word.capitalize() for word in words]\n return ' '.join(capitalized)\n\n# Usage\n\nprint(capitalize_words('hello world')) # Hello World", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(arr): \n    final_list = [] \n    for num in arr: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list", "line_number": null, "bug_type": null}
{"code": "def calculate_area_circle(r):\n    PI = 3.1415\n    area = PI * r**2\n    return area", "line_number": null, "bug_type": null}
{"code": "from datetime import date\n\nprint(\"Hello!\")\n\ncurrent_date = date.today().strftime(\"%Y-%m-%d\")\nprint(\"Today's date is\", current_date)", "line_number": null, "bug_type": null}
{"code": "def min_steps(arr):\n    min_step = 0\n    min_val = min(arr)\n    for i in range(len(arr)):\n        min_step += arr[i] - min_val \n    \n    return min_step", "line_number": null, "bug_type": null}
{"code": "def gcd(a,b): \n    if b == 0:\n        return a \n    else: \n        return gcd(b, a % b) \n\na = 10\nb = 15\n\nprint(gcd(a, b))", "line_number": null, "bug_type": null}
{"code": "def sortStrings(arr):\n    arr.sort()\n    \n    for string in arr:\n        print(string)\n\n#Test\narr = [\"banana\", \"apple\", \"orange\", \"pear\"]\nsortStrings(arr) # Outputs: apple banana orange pear", "line_number": null, "bug_type": null}
{"code": "def histogram(arr):\n    hist = {}\n    for num in arr:\n        if num in hist:\n            hist[num] += 1\n        else:\n            hist[num] = 1\n    return hist", "line_number": null, "bug_type": null}
{"code": "def generate_email(name, domain):\n    '''Generates an email address using the given name and domain.'''\n    name_parts = name.lower().split(' ')\n    email_name = '.'.join(name_parts)\n    return email_name + '@' + domain", "line_number": null, "bug_type": null}
{"code": "def repeatString(string, n): \n  \n    for i in range(n): \n        print(string, end = \"\") \n  \n# Driver Code \nstring = \"Hello World!!\"\nn = 5\nrepeatString(string, n)", "line_number": null, "bug_type": null}
{"code": "class Calculator:\n    def __init__(self):\n        pass\n\n    def multiply(self, x, y):\n        return x * y", "line_number": null, "bug_type": null}
{"code": "number1 = 2\nnumber2 = 3\n\nprint('The sum of the numbers is {}'.format(number1 + number2))", "line_number": null, "bug_type": null}
{"code": "def sum_dictionaries(data):\n  total = 0\n  for dic in data:\n    total += sum(dic.values())\n  return total", "line_number": null, "bug_type": null}
{"code": "def count_words(given_sentence):\n    return(len(given_sentence.split()))\n\ngiven_sentence = \"This is a given sentence\"\nword_count = count_words(given_sentence)\nprint(\"Number of words in given sentence is: \", word_count)", "line_number": null, "bug_type": null}
{"code": "def get_frequencies(arr):\n  frequency_dict = {}\n  for item in arr:\n    if item in frequency_dict:\n      frequency_dict[item] += 1\n    else:\n      frequency_dict[item] = 1\n  \n  return frequency_dict", "line_number": null, "bug_type": null}
{"code": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\nfor i in range(len(list1)):\n    product = list1[i] * list2[i]\n    print(product)", "line_number": null, "bug_type": null}
{"code": "def linear_search(array, element):\n    for i in range(len(array)):\n        if array[i] == element:\n            return i\n    return -1", "line_number": null, "bug_type": null}
{"code": "import datetime\ndate = datetime.datetime.now()\nprint(\"{:0>2}/{:0>2}/{} {:0>2}:{:0>2}\".format(date.day, date.month, date.year, date.hour, date.minute))", "line_number": null, "bug_type": null}
{"code": "def get_max(a,b):\n    if a > b:\n        return a\n    else:\n        return b\n\n# main program\na = 4\nb = 5\nresult = get_max(a,b)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "original_list = [1, 2, 5, 2, 4, 1]\nunique_list = []\n\nfor item in original_list:\n    if item not in unique_list:\n        unique_list.append(item)\n\nprint(unique_list)", "line_number": null, "bug_type": null}
{"code": "string1 = \"Hello \"\nstring2 = \"World\"\n\nnew_str = string1 + string2\n\nprint(new_str)", "line_number": null, "bug_type": null}
{"code": "def targetInArray(arr,target):\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if target == arr[i][j]:\n                return True\n    return False", "line_number": null, "bug_type": null}
{"code": "def is_int(n):\n  try:\n    int(n)\n    return True\n  except ValueError:\n    return False", "line_number": null, "bug_type": null}
{"code": "def find_corresponding_nums(nums1, nums2):\n    result = []\n    seen = set(nums2) \n    for num1 in nums1:\n        if num1 in seen:\n            result.append(num1)\n    return result", "line_number": null, "bug_type": null}
{"code": "for numb in range(1, 11):\n    if numb == 3 or numb == 5:\n        continue\n    print(numb)", "line_number": null, "bug_type": null}
{"code": "def position_of_char(string, char):\n    '''This function will detect the position of a character in a string.'''\n    return string.index(char)", "line_number": null, "bug_type": null}
{"code": "def or_gate(a, b):\n    if a or b == 0:\n        return 0\n    else:\n        return 1", "line_number": null, "bug_type": null}
{"code": "import re\ns = \"Hello,  world    !  How are you?\"\ns = re.sub(' +', ' ', s)\nprint(s)\n\n# Output\n# 'Hello, world! How are you?'", "line_number": null, "bug_type": null}
{"code": "def subtract(x, y):\n    return x - y\n\ndef add(x, y):\n    return x + y", "line_number": null, "bug_type": null}
{"code": "def func(a):\n    result = [x + 5 for x in a]\n    return result", "line_number": null, "bug_type": null}
{"code": "def sum_of_odds(N):\n    return sum([i for i in range(1, 2*N + 1, 2)])\n\nN = 5\nprint(sum_of_odds(N))", "line_number": null, "bug_type": null}
{"code": "def delete_element(arr, element): \n    new_arr = [i for i in arr if i!=element]\n    return new_arr", "line_number": null, "bug_type": null}
{"code": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "line_number": null, "bug_type": null}
{"code": "import itertools\n\nwords = [''.join(i) for i in itertools.product('ab', repeat = 5)]\nprint(words)", "line_number": null, "bug_type": null}
{"code": "from collections import defaultdict\n\nstrings = [\"Apple\", \"Orange\", \"Banana\", \"Pineapple\"]\n\ndictionary = defaultdict(list)\nfor string in strings:\n    char_count = len(string)\n    dictionary[char_count].append(string)\n\nprint(dictionary)", "line_number": null, "bug_type": null}
{"code": "st = \"DaSSmmoonnd\"\nst_list = list(st)\nst_set = set(st_list)\nst_nodupes = ''.join(st_set)\nprint(st_nodupes)", "line_number": null, "bug_type": null}
{"code": "string = \"Hello\"\nnum = 3\n\nfor i in range(num):\n    print(string)", "line_number": null, "bug_type": null}
{"code": "class Customer:\n    \n    def __init__(self, name):\n        self.name = name\n    \n    def calculate_total(self, prices):\n        total = 0\n        for price in prices:\n            total += price\n        return total", "line_number": null, "bug_type": null}
{"code": "import requests\n\nurl = 'https://www.example.com'\n\nresponse = requests.get(url)\n\nwith open('example.html', 'wb') as file:\n file.write(response.content)", "line_number": null, "bug_type": null}
{"code": "def get_common_elements(list_of_lists): \n    commons = []\n    for i in range(len(list_of_lists)): \n        commons = list(set(commons).intersection(list_of_lists[i]))\n    return commons", "line_number": null, "bug_type": null}
{"code": "list = [1,2,3,4,5]\nfor i in reversed(list):\n    print(i)", "line_number": null, "bug_type": null}
{"code": "my_list = []\nfor i in range(1, 50, 3):\n    my_list.append(i)", "line_number": null, "bug_type": null}
{"code": "class MyList:\n    def __init__(self):\n        self.elements = []\n\n    def add_element(self, element):\n        self.elements.append(element)\n\n    def remove_element(self, index):\n        del self.elements[index]", "line_number": null, "bug_type": null}
{"code": "s = 'This is an example sentence'\n\nwords = s.split(' ')\nwords.reverse()\n\nfor word in words:\n    print(word)", "line_number": null, "bug_type": null}
{"code": "def larger_of_two(num1, num2):\n    \"\"\"Return the larger of two integers\"\"\"\n    if num1 > num2:\n        return num1\n    else:\n        return num2", "line_number": null, "bug_type": null}
{"code": "list = [\"A\", \"B\", \"C\", \"D\"]\n\nfor i in range(len(list)-1, -1, -1):\n    print(list[i])", "line_number": null, "bug_type": null}
{"code": "def count_words(sentence):\n    words = sentence.split(' ')\n    return len(words)\n\nprint(count_words(\"Hello there\")) # Output: 2", "line_number": null, "bug_type": null}
{"code": "import string, random\n\ncharacters = string.ascii_letters + string.digits + string.punctuation\n\ndef generate_password():\n\t\n\tpassword = \"\"\n\n\tfor i in range(10):\n\t\tpassword += random.choice(characters)\n\n\treturn password\n\nprint(generate_password())", "line_number": null, "bug_type": null}
{"code": "def check_anagrams(s1, s2):\n    s1 = s1.lower().replace(\" \", \"\")\n    s2 = s2.lower().replace(\" \", \"\")\n    return sorted(s1) == sorted(s2)", "line_number": null, "bug_type": null}
{"code": "def multiply(x, y):\n    # Base case\n    if y == 0:\n        return 0\n \n    # Recursive case\n    else:\n        return (x + multiply(x, y-1))", "line_number": null, "bug_type": null}
{"code": "def probability_calc(data):\n    total = data['success'] + data['failure']\n    return data['success']/total", "line_number": null, "bug_type": null}
{"code": "def product(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product\n\nprint(product([1, 2, 3, 4]))", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(my_list):\n  new_list = []\n  for num in my_list:\n    if num not in new_list:\n      new_list.append(num)\n  return new_list", "line_number": null, "bug_type": null}
{"code": "visitors_per_day = [2000, 1500, 2500, 1800]\ntotal_visitors = sum(visitors_per_day)\n\nprint(\"Total number of visitors:\", total_visitors)", "line_number": null, "bug_type": null}
{"code": "def get_squares(n):\n    squares = []\n    for i in range(1, n + 1):\n        squares.append(i**2)\n    return squares\n\nresult = get_squares(10)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "for i in range(11):\n    if i == 8:\n        break \n    else:\n        print(i)", "line_number": null, "bug_type": null}
{"code": "{\n    \"Name\": \"John\",\n    \"Age\": 30,\n    \"Cities\": [\"New York\", \"London\", \"Paris\"]\n}", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(s):\n  #reverse string and compare \n  rev = s[::-1]\n  if (s == rev): \n    return True\n  else: \n    return False", "line_number": null, "bug_type": null}
{"code": "name = \"John Doe\"\nage = 23\ncourse = \"Data Science\"\n\nprint(\"Name: \" + name)\nprint(\"Age: \" + str(age))\nprint(\"Course: \" + course)", "line_number": null, "bug_type": null}
{"code": "def is_substring(string1, string2): \n    if string1 in string2:\n        return True\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "def sum_list(input_list):\n    total = 0\n    for item in input_list:\n        total += item\n    return total", "line_number": null, "bug_type": null}
{"code": "def int_to_bin(n):\n bin_num = bin(n)\n bin_num = bin_num[2:].zfill(8)\n return bin_num\n\nprint(int_to_bin(10)) # Output: 00001010", "line_number": null, "bug_type": null}
{"code": "import math\n\ndef circle_area(radius):\n  \"\"\"\n  Returns the area of a circle based on its radius\n  \"\"\"\n  return math.pi * (radius**2)\n\nif __name__ == '__main__':\n    print(circle_area(4))", "line_number": null, "bug_type": null}
{"code": "def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1) \n  \n# Driver Code \nnum = 5\nprint(factorial(num))", "line_number": null, "bug_type": null}
{"code": "def reverse_list(numbers):\n return numbers[::-1]\n\ndef flip_array_order(numbers):\n new_list = []\n for i in range(0, len(numbers)):\n  new_list.append(numbers[len(numbers) - i - 1])\n return new_list", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef dice_predict(sides):\n    '''Returns a random outcome of dice roll between 1 and specified number of sides.'''\n    return random.randint(1, sides)", "line_number": null, "bug_type": null}
{"code": "class Employee:\n    count = 0\n\n    def __init__(self):\n        Employee.count += 1\n\n    @staticmethod\n    def get_employee_count():\n        return Employee.count", "line_number": null, "bug_type": null}
{"code": "{\n \"name\": \"John Doe\",\n \"age\": 34,\n \"skills\": [\n  \"JavaScript\",\n  \"Python\"\n ]\n}", "line_number": null, "bug_type": null}
{"code": "def sort_by_name(lst): \n    return sorted(lst, key=lambda item: item[\"name\"])", "line_number": null, "bug_type": null}
{"code": "list_of_nums = [1, 2, 3, 4, 5] \nlist_of_squares = []\n\nfor num in list_of_nums: \n list_of_squares.append(num**2)", "line_number": null, "bug_type": null}
{"code": "def average_list_items(list_items):\n  list_length = len(list_items)\n  list_sum = sum(list_items)\n  average = list_sum/list_length\n  return average", "line_number": null, "bug_type": null}
{"code": "def format_sentence(sentence):\n    sentence = sentence.split()\n    sentence = [word.capitalize() for word in sentence]\n    return ' '.join(sentence)\n\nprint(format_sentence(\"He went to the store\"))", "line_number": null, "bug_type": null}
{"code": "import time\n\ntime_now = time.strftime(\"%Y-%m-%d %H:%M:%S\")\nprint(time_now)", "line_number": null, "bug_type": null}
{"code": "# Solution\n[x for x in range(0,5) if (x%2 == 0)]", "line_number": null, "bug_type": null}
{"code": "def add(array):\n    sum = 0\n    \n    for element in array:\n        sum = sum + element\n    return sum", "line_number": null, "bug_type": null}
{"code": "class Student:\n    def __init__(self, name, age, course):\n        self.name = name\n        self.age = age\n        self.course = course\n    \n    def getCourse(self):\n        return self.course", "line_number": null, "bug_type": null}
{"code": "input_string = input(\"Enter a string: \")\n\n# Reverse the string\nreverse_string = input_string[::-1]\n\n# Print the reversed string\nprint(reverse_string)", "line_number": null, "bug_type": null}
{"code": "def create_matrix(n): \n    matrix = [[i * j for j in range(n)] for i in range(n)]\n    return matrix", "line_number": null, "bug_type": null}
{"code": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "line_number": null, "bug_type": null}
{"code": "def concatenate_strings(str1, str2):\n    '''This function concatenates two strings, str1 and str2.'''\n    return str1 + str2", "line_number": null, "bug_type": null}
{"code": "def get_min_max(numbers):\n  minimum = min(numbers)\n  maximum = max(numbers)\n  return minimum, maximum", "line_number": null, "bug_type": null}
{"code": "from datetime import datetime\n\ndef current_date_time():\n    now = datetime.now()\n    return now\n\nresult = current_date_time()\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def lengthWord(inp):\n    result = []\n    for word in inp.split(' '):\n        result.append(len(word))\n    return result\n\n# Driver Code\ninp = \"Generating a code generation task instructions\"\nprint(lengthWord(inp))", "line_number": null, "bug_type": null}
{"code": "import math\n\ndef round_off(a): \n    if (a - math.floor(a) >= 0.5): \n        a = math.ceil(a) \n    else: \n        a = math.floor(a) \n    return int(a)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_random():\n    my_list = [random.randint(0,100) for i in range(5)]\n    return my_list", "line_number": null, "bug_type": null}
{"code": "def is_prime(num):\n  if num <= 1:\n    return False\n  \n  for i in range(2, num):\n    if num % i == 0:\n      return False\n  \n  return True", "line_number": null, "bug_type": null}
{"code": "def count_down(value):\n    ret = 1\n    while value > 0:\n        ret *= value\n        value -= 1\n    return ret", "line_number": null, "bug_type": null}
{"code": "my_dict = {\n 'apple': 'fruit',\n 'goat': 'animal',\n 'three': 'number'\n}", "line_number": null, "bug_type": null}
{"code": "# Program to add two numbers\nnum1 = 3\nnum2 = 5\nprint(num1 + num2)", "line_number": null, "bug_type": null}
{"code": "def add_one_to_each_char(mystring):\n    new_str = \"\"\n    for c in mystring:\n        new_str += chr(ord(c) + 1)\n    return new_str", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)", "line_number": null, "bug_type": null}
{"code": "def find_index(nums, element):\n    for i, num in enumerate(nums):\n        if num == element:\n            return i\n    \n    return -1", "line_number": null, "bug_type": null}
{"code": "string = 'This sentence will be reversed'\n\nwords = string.split()\n\nfor word in words:\n\tprint(word[::-1], end=\" \")\n\n# Output: sihT ecnetnes lliw eb desrever", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(s):\n    s = s.lower()\n    return s == s[::-1]", "line_number": null, "bug_type": null}
{"code": "def findNumberType(x):\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\nx = 7\nprint(findNumberType(x))  # Odd", "line_number": null, "bug_type": null}
{"code": "def calculate_distance(x1, y1, x2, y2):\n    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5", "line_number": null, "bug_type": null}
{"code": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "line_number": null, "bug_type": null}
{"code": "def replacePattern(string, pattern, replacement):\n    return string.replace(pattern, replacement)\n\nresult = replacePattern(\"abcabcabc\", \"abc\", \"xyz\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def sum_of_values(n):\n    \"\"\"Find the sum of all numbers between 1 and n (inclusive).\"\"\"\n    return sum(range(1, n+1))", "line_number": null, "bug_type": null}
{"code": "# Initialise the counter\ni = 0\n\n# Use a while loop to print numbers from 0 to 10\nwhile i <= 10:\n    print(i)\n    i += 1", "line_number": null, "bug_type": null}
{"code": "def classify(x):\n  if (x > 0):\n    return 'positive'\n  else:\n    return 'negative'", "line_number": null, "bug_type": null}
{"code": "def find_missing_elements(list):\n    missing_elements = []\n    for i in range(min(list), max(list)):\n        if i not in list:\n            missing_elements.append(i)\n    return missing_elements", "line_number": null, "bug_type": null}
{"code": "def bin_to_dec(binary_string):\n    decimal = 0\n    for digit in binary_string:\n        decimal = decimal * 2 + int(digit)\n    return decimal\n\nprint(bin_to_dec('1100'))", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_password(length=8):\n characters = string.ascii_letters + string.digits + string.punctuation\n return ''.join(random.choice(characters) for _ in range(length))\n\npassword = generate_password()\nprint(password)", "line_number": null, "bug_type": null}
{"code": "def divisors(n):\n    for i in range(1,n+1):\n        if n % i == 0:\n            print(i)\n\nn = 15\ndivisors(15)\n# Output: 1 3 5 15", "line_number": null, "bug_type": null}
{"code": "import os\n\ndef create_dir(path):\n    try:\n        os.mkdir(path)\n    except OSError:\n        print(\"Creation of the directory %s failed\" % path)\n    else:\n        print(\"Successfully created the directory %s \" % path)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_6_digit_number():\n    return random.randint(100000, 999999)\n\nnum = generate_6_digit_number()\nprint(num)", "line_number": null, "bug_type": null}
{"code": "def add(num1, num2):\n    return num1 + num2\n\nprint(add(1, 2))", "line_number": null, "bug_type": null}
{"code": "import random\n\nn = 10\n\nmatrix = [[random.randint(1, 10) for _ in range(n)] for _ in range(n)]\n\nprint(matrix)", "line_number": null, "bug_type": null}
{"code": "def createDict(arr):\n  res = {}\n  for i in range(len(arr)):\n    res[arr[i]] = i + 1\n  return res\n\nd = createDict([2, 3, 1])\nprint(d)", "line_number": null, "bug_type": null}
{"code": "def countNodes(root): \n    if root is None: \n        return 0\n    \n    return (1 + countNodes(root.left) + \n            countNodes(root.right))", "line_number": null, "bug_type": null}
{"code": "def convertToBinary(x): \n    return bin(x).replace(\"0b\", \"\") \n\nx = 155\nprint(convertToBinary(x))", "line_number": null, "bug_type": null}
{"code": "def add_string(string):\n    result = 0\n    for char in string:\n        result += ord(char)\n    return result", "line_number": null, "bug_type": null}
{"code": "def solve_linear_eq(a,b,c,d):\n    x = (b*d - c*a) / (b*d - c*a)\n    y = (d*a - b*c) / (b*d - c*a)\n    return x, y", "line_number": null, "bug_type": null}
{"code": "import requests\n\nurl = 'https://api.example.com/endpoint'\nresponse = requests.get(url)\n\ndata = response.json()", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_random_IP():\n    ip = \"\"\n    for i in range(4):\n        ip += str(random.randint(0, 255))\n        if i != 3:\n            ip += \".\"\n    return ip", "line_number": null, "bug_type": null}
{"code": "class Customer:\n    def __init__(self, name, age, emailid, phone_number):\n        self.name = name\n        self.age = age\n        self.emailid = emailid\n        self.phone_number = phone_number", "line_number": null, "bug_type": null}
{"code": "my_list = [x for x in range(0, 51) if x % 3 == 0]", "line_number": null, "bug_type": null}
{"code": "import hashlib\n\ndef generate_hash(string):\n    hashed_string = hashlib.sha1(string.encode())\n    return hashed_string.hexdigest()[:6]\n\nhashed_string = generate_hash(\"Code Generation Task Instructions\")\nprint(hashed_string)", "line_number": null, "bug_type": null}
{"code": "def is_multiple_of_six(num):\n    if num % 6 == 0:\n        return True\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "num = int(input(\"Please enter a number: \"))\nprint(\"The result of multiplying your number by 7 is \" + str(num * 7))", "line_number": null, "bug_type": null}
{"code": "def findSum(n): \n\tSum = 0 \n\tn = str(n)\n\tfor i in n: \n\t\tSum = Sum + int(i) \n\treturn Sum\n\n# Driver code  \nn = 123\nprint(findSum(n))", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_string():\n    letters_and_digits = string.ascii_letters + string.digits\n    result = \"\".join(random.choice(letters_and_digits) for i in range(8))\n    return result", "line_number": null, "bug_type": null}
{"code": "import re\nfrom nltk import tokenize\n\ninput_text = 'string with several words'\n\ntokens = tokenize.word_tokenize(input_text)\nfor token in tokens:\n  if re.search('\\w+', token):\n      print(token)", "line_number": null, "bug_type": null}
{"code": "names = input().split()\n\nfirst_name = names[0]\nlast_name = names[-1]\n\nprint('First Name:', first_name)\nprint('Last Name:', last_name)", "line_number": null, "bug_type": null}
{"code": "counter = 0\nwhile counter < 10:\n    print(counter)\n    if counter == 5:\n        break\n    counter = counter + 1", "line_number": null, "bug_type": null}
{"code": "def removeDigits(x):\n    str_x = str(x)\n    without_digits = int(\"\".join([i for i in str_x if not i.isdigit()]))\n    return without_digits\n\nx = 356\nprint(removeDigits(x))", "line_number": null, "bug_type": null}
{"code": "def loop_list(list):\n    for i in list:\n        if i > 5:\n            print(i)", "line_number": null, "bug_type": null}
{"code": "class Foo:\n    def __init__(self, name, num, array):\n        self.name = name\n        self.num = num\n        self.array = array", "line_number": null, "bug_type": null}
{"code": "from sklearn.linear_model import LogisticRegression\n\n# Load the dataset\nX = ...\ny = ...\n\n# Initialize model\nmodel = LogisticRegression()\n\n# Fit the model\nmodel.fit(X, y)\n\n# Evaluate the model\nmodel.score(X, y)", "line_number": null, "bug_type": null}
{"code": "import hashlib\n\ns = 'abc'.encode(\"utf-8\")\n\nhash_object = hashlib.sha256(s)\nhex_dig = hash_object.hexdigest()\nprint(hex_dig)", "line_number": null, "bug_type": null}
{"code": "def get_longest_string(names):\n    longest_string = ''\n    for name in names:\n        if len(name) > len(longest_string):\n            longest_string = name\n    return longest_string", "line_number": null, "bug_type": null}
{"code": "list = [1, 2, 3, 4, 5]\n\nfor num in list:\n    print(num)", "line_number": null, "bug_type": null}
{"code": "def find_average(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total / len(nums)", "line_number": null, "bug_type": null}
{"code": "def divide(a, b, c=1, d=1):\n    return (a / b) / (c / d)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_random_number():\n return random.randint(1, 10)\n \nprint(generate_random_number())", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    \"\"\"Calculate the factorial of an integer.\"\"\"\n    if n <= 1:\n        return 1\n    return n*factorial(n-1)", "line_number": null, "bug_type": null}
{"code": "from flask import Flask \n\napp = Flask(__name__) \n\n@app.route('/') \ndef hello(): \n  return 'Hello World!'\n\nif __name__ == '__main__': \n    app.run()", "line_number": null, "bug_type": null}
{"code": "def count_char(string, char):\n    count = 0\n    for c in string:\n        if c == char:\n            count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "def reverse(head):\n    prev = None\n    current = head\n    while current:\n        next = current.next\n        current.next = prev\n        prev = current\n        current = next\n    return prev", "line_number": null, "bug_type": null}
{"code": "def split_list(list, x):\n    return [list[i * x:(i + 1) * x] for i in range((len(list) + x - 1) // x )]", "line_number": null, "bug_type": null}
{"code": "class Singleton:\n    instance = None\n\n    @staticmethod\n    def get_instance():\n        if Singleton.instance is None:\n            Singleton.instance = Singleton()\n        return Singleton.instance", "line_number": null, "bug_type": null}
{"code": "def area_of_right_triangle(base, height): \n  \"\"\"Calculate the area of a right angled triangle\"\"\"\n  return (1/2) * base * height", "line_number": null, "bug_type": null}
{"code": "sum = 0\nfor num in [3, 4, 7, 1]:\n  sum += num\n\nprint(sum) # Output is 15", "line_number": null, "bug_type": null}
{"code": "def print_prime_numbers(num):\n    for i in range(2, num+1):\n        for j in range(2, i):\n            if (i % j) == 0:\n                break\n        else:\n            print(i)", "line_number": null, "bug_type": null}
{"code": "my_friends = [\"Greg\", \"Emily\", \"Sam\", \"Jess\", \"Leo\"]\n\nfor i in range(len(my_friends)):\n    print(my_friends[i]) \n\n# Output\n# Greg\n# Emily\n# Sam\n# Jess\n# Leo", "line_number": null, "bug_type": null}
{"code": "def updateList(myList):\n myList.append(1)\n \nmyList = [1, 2, 3]\nupdateList(myList)\nprint(myList)", "line_number": null, "bug_type": null}
{"code": "def add_prefix_suffix(lst, prefix, suffix): \n\treturn [prefix + i + suffix for i in lst]", "line_number": null, "bug_type": null}
{"code": "for num in list: \n    if num % 2 == 0: \n        print(num, \"is an even number\") \n    else: \n        print(num, \"is an odd number\")", "line_number": null, "bug_type": null}
{"code": "def multiplyByThree(number):\n  return number*3\n\nmultiplied_value = multiplyByThree(4)\nprint(multiplied_value)", "line_number": null, "bug_type": null}
{"code": "import re\n\ntext = 'The quick brown fox jumped over the lazy dog'\nsearch = 'fox'\n\nresult = re.findall(search, text)\n\nif result:\n    print('Found!');\nelse:\n    print('Not Found!')", "line_number": null, "bug_type": null}
{"code": "arr = [12, 15, 8, 10]\narr[:] = [x for x in arr if x % 3 != 0]", "line_number": null, "bug_type": null}
{"code": "import numpy as np\narr = np.zeros(4, dtype=int)\n \nfor i in range(len(arr)):\n    arr[i] = i", "line_number": null, "bug_type": null}
{"code": "for i in range(1, 11):\n    for j in range(1, 11):\n        print(i*j, end='\\t')\n    print()", "line_number": null, "bug_type": null}
{"code": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "line_number": null, "bug_type": null}
{"code": "def functionA(x):\n    answer = 0\n    for i in range(x):\n        answer += x-i\n    return answer", "line_number": null, "bug_type": null}
{"code": "def find_longest_string(string_list):\n    longest_string = ''\n    for string in string_list:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string", "line_number": null, "bug_type": null}
{"code": "num = 1\nsum = 0\nwhile num <= 10:\n    sum = sum + num\n    num = num + 1\n\nprint(sum)  # Output: 55", "line_number": null, "bug_type": null}
{"code": "a, b = 0, 1\n\nfibonacci = [a]\n\nwhile b < 10:\n    fibonacci.append(b)\n    a, b = b, a + b\n\nprint(fibonacci)", "line_number": null, "bug_type": null}
{"code": "x = 10\ny = 5\n\nresult = (x*x) - (y*y)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "words1 = [\"Hello\",\"World\",\"My\",\"Name\",\"Is\"]\nwords2 = [\"John\", \"Smith\", \"Where\", \"Are\", \"You\"]\n\nfor i in range(len(words1)):\n    print(words1[i], words2[i])", "line_number": null, "bug_type": null}
{"code": "# Frequency of each character in the string\n\nstring = \"Code Generation Task\"\n\nfor i in string:\n    print(\"Number of Occurrence of\", i, \"is\", string.count(i))", "line_number": null, "bug_type": null}
{"code": "customers = { \n  1: {\n    \"name\": \"John\",\n    \"email\": \"john@example.com\"\n  }\n}", "line_number": null, "bug_type": null}
{"code": "students = {\n 'John': {'Math': 91, 'English': 83},\n 'Mary': {'Math': 94, 'English': 93},\n}", "line_number": null, "bug_type": null}
{"code": "\"\"\"\nTokenize an English sentence\n\"\"\"\n\nimport nltk\n\ndef tokenize(sentence):\n    tokens = nltk.word_tokenize(sentence)\n    return tokens\n\nif __name__ == '__main__':\n    sentence = \"This is a sentence.\"\n    print(tokenize(sentence))", "line_number": null, "bug_type": null}
{"code": "sentence = \"The quick brown fox jumps over the lazy dog\"\n\nwords = sentence.split()\nprint(\"The sentence has\", len(words), \"words.\")", "line_number": null, "bug_type": null}
{"code": "def get_array(n):\n    a = [[0 for i in range(n)] for i in range(n)]\n    return a", "line_number": null, "bug_type": null}
{"code": "a = 0\nb = 0\n\nwhile a < 10:\n    a += 1\n    b = b + a\n\nprint(b)", "line_number": null, "bug_type": null}
{"code": "class TotalPriceCalculator():\n    def __init__(self):\n        self.total_price = 0\n    \n    def add_item(self,price):\n        self.total_price+=price\n    \n    def get_total_price(self):\n        return self.total_price", "line_number": null, "bug_type": null}
{"code": "def move_letter(strings, letter):\n new_list = []\n for s in strings:\n  if letter not in s:\n   new_list.append(s)\n  else:\n   new_list.append(s)\n return new_list", "line_number": null, "bug_type": null}
{"code": "def leftRotate(arr, k): \n    new_arr = arr[k:] + arr[:k] \n    return new_arr", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_password():\n chars = string.ascii_letters + string.digits + string.punctuation\n password = ''.join(random.choice(chars) for _ in range(8))\n return password\n\nprint(generate_password())", "line_number": null, "bug_type": null}
{"code": "def euclidean_distance(lst):\n    distance = 0\n    for i in range(len(lst[0])):\n        distance += (lst[0][i]-lst[1][i])**2\n    return (distance**0.5)", "line_number": null, "bug_type": null}
{"code": "def filter_json_data(input, fields):\n    output = {}\n    for field in fields:\n        if field in input:\n            output[field] = input[field]\n    return output", "line_number": null, "bug_type": null}
{"code": "str = \"apple, banana, orange\"\n\n# split the string\nstring_list = str.split(', ')\n\n# print result\nprint(string_list)  # ['apple', 'banana', 'orange']", "line_number": null, "bug_type": null}
{"code": "def removeDuplicates(list):\n  newList = []\n  for element in list:\n    if element not in newList:\n      newList.append(element)\n  return newList", "line_number": null, "bug_type": null}
{"code": "def even_sum(numbers): \n    even_sum = 0\n    for num in numbers:\n        if (num % 2 == 0):\n            even_sum += num\n    return even_sum", "line_number": null, "bug_type": null}
{"code": "string = input() \nlength = len(string) \n\nfor i in range(length-1, -1, -1):\n    print(string[i], end=\"\")", "line_number": null, "bug_type": null}
{"code": "nums = [11, 9, 12, 8, 5]\nmax_num = max(nums)\n\nprint(max_num) # 12", "line_number": null, "bug_type": null}
{"code": "def copyArray(arr): \n  \n    res = [] \n  \n    for i in range(len(arr)): \n        res.append(arr[i]) \n  \n    return res", "line_number": null, "bug_type": null}
{"code": "string1 = \"Hello\"\nstring2 = \"World\"\nconcatenated_string = string1 + string2", "line_number": null, "bug_type": null}
{"code": "def dot_product(v1, v2):\n    return sum(x1*x2 for x1, x2 in zip(v1, v2))", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_sequence():\n  sequence = [random.randint(0,20) for i in range(5)]\n  print(sequence)\n  \ngenerate_sequence()", "line_number": null, "bug_type": null}
{"code": "import string\n\ninput_str = \"This is a cool string!\"\npunctuation_removed = input_str.translate(str.maketrans('', '', string.punctuation))\nprint(punctuation_removed)", "line_number": null, "bug_type": null}
{"code": "def list_odd_squares(m, n):\n  squares = []\n  for i in range(m, n+1):\n    if i % 2 != 0:\n      squares.append(i*i)\n  return squares", "line_number": null, "bug_type": null}
{"code": "# This program prints out the numbers from 1 to 10\nfor x in range(10):\n    print(x + 1)", "line_number": null, "bug_type": null}
{"code": "def fibonacci():\n    a, b = 0, 1\n    while True:\n        yield b\n        a, b = b, a + b\n\nfor num in fibonacci():\n    print(num)", "line_number": null, "bug_type": null}
{"code": "def searchElement(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n    return -1", "line_number": null, "bug_type": null}
{"code": "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return '({}, {})'.format(self.x, self.y)", "line_number": null, "bug_type": null}
{"code": "import requests\nfrom bs4 import BeautifulSoup\n \nurl = \"https://www.example.com/\"\npage = requests.get(url)\n \nsoup = BeautifulSoup(page.content, 'html.parser')\ntext = soup.find(string=\"Hello, world!\")\nprint(text)", "line_number": null, "bug_type": null}
{"code": "def access_key(key, dictionary): \n    if key not in dictionary: \n        return -1\n    return dictionary[key]", "line_number": null, "bug_type": null}
{"code": "def replace_word(inp, src, target):\n    inp = inp.split()\n    for i in range(len(inp)):\n        if inp[i] == src:\n            inp[i] = target\n    return ' '.join(inp)", "line_number": null, "bug_type": null}
{"code": "def generate_random_numbers(start, end):\n    import random \n    return random.randint(start, end)", "line_number": null, "bug_type": null}
{"code": "class Name:\n    def __init__(self, name):\n        self.name = name\n\n    def showName(self):\n        print(self.name)\n\n    def hideName(self):\n        self.name = '*****'\n        print(self.name)", "line_number": null, "bug_type": null}
{"code": "def sort_greater_numbers(arr, num):\n    result = [x for x in arr if  x > num]\n    result.sort()\n    return result", "line_number": null, "bug_type": null}
{"code": "import math\n\ndef areaOfCircle(radius):\n    area = round(math.pi * (radius ** 2), 2)\n    return area\n\narea = areaOfCircle(7)\nprint(area)", "line_number": null, "bug_type": null}
{"code": "def reverse_string(s):\n    result = \"\"\n    for i in range(len(s)-1, -1, -1):\n        result += s[i]\n    return result", "line_number": null, "bug_type": null}
{"code": "def word_count(str):\n words = str.split()\n return len(words)\n\nprint(word_count(\"This is a sample string with some words\"))", "line_number": null, "bug_type": null}
{"code": "def sum_of_range(start, end): \n    sum = 0\n    for i in range(start, end+1): \n        sum += i\n    return sum \n  \n# Driver Code \nprint(sum_of_range(10, 20))", "line_number": null, "bug_type": null}
{"code": "def extract_first_word(sentence):\n    words = sentence.split()\n    return words[0]\n\nsentence = \"This is a sentence\"\nfirst_word = extract_first_word(sentence)\nprint(first_word)", "line_number": null, "bug_type": null}
{"code": "import networkx as nx\n\ndef connected_components(graph):\n    subgraphs = nx.connected_components(graph)\n    components = [graph.subgraph(c).copy() for c in subgraphs]\n    return components", "line_number": null, "bug_type": null}
{"code": "def traverse_2d_list(list2d):\n    for row in list2d:\n        print(row)", "line_number": null, "bug_type": null}
{"code": "# Compute list of squared values using vectorization\nmy_list = [1,2,3,4,5]\n\nout_list = [pow(element,2) for element in my_list]", "line_number": null, "bug_type": null}
{"code": "class NumStringConverter:\n    def int_to_str(self, number):\n        return str(number)\n    \n    def str_to_int(self, string):\n        return int(string)", "line_number": null, "bug_type": null}
{"code": "def is_power_two(num):\n    if num == 0:\n        return False\n    \n    while num != 1:\n        if num % 2 != 0:\n            return False\n        num = num // 2\n    return True", "line_number": null, "bug_type": null}
{"code": "def average(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total / len(numbers)", "line_number": null, "bug_type": null}
{"code": "def list_to_string(list): \n    return \",\".join(list) \n  \nlist = [\"test\",\"string\"]\nprint(list_to_string(list))", "line_number": null, "bug_type": null}
{"code": "def list_to_string(lst):\n  return '-'.join(lst)\n  \nresult = list_to_string(['a', 'b', 'c', 'd'])\nprint(result) # 'a-b-c-d'", "line_number": null, "bug_type": null}
{"code": "import datetime\n\ndef get_weekday(date_string):\n    date = datetime.datetime.strptime(date_string, '%m/%d/%Y')\n    return date.strftime('%A')\n\nweekday = get_weekday('3/22/2021')\nprint(weekday)", "line_number": null, "bug_type": null}
{"code": "class MultipleOfFive:\n    def __init__(self, number):\n        self.number = number\n    \n    def is_multiple_of_five(self):\n        return self.number % 5 == 0", "line_number": null, "bug_type": null}
{"code": "def max_of_two_numbers(x, y):\n    if x > y:\n        larger_number = x\n    else:\n        larger_number = y\n\n    return larger_number", "line_number": null, "bug_type": null}
{"code": "multiply = 1\nfor x in range(1,6):\n multiply = multiply * x\n\nprint(multiply)", "line_number": null, "bug_type": null}
{"code": "def int_to_bin(int_num):\n bin_str = bin(int_num)\n return bin_str[2:]\n\nint_num = 30\nbin_num = int_to_bin(int_num)\nprint(bin_num) # 11110", "line_number": null, "bug_type": null}
{"code": "nums = [1, 2, 3, 4, 5]\n\nsum_val = 0\nfor n in nums:\n    sum_val += n\n\nprint(f\"Sum of the elements in the list: {sum_val}\")", "line_number": null, "bug_type": null}
{"code": "def evalBinaryExpr(expr): \n    return eval(expr) \n  \nprint(evalBinaryExpr(\"1 + 0\"))", "line_number": null, "bug_type": null}
{"code": "def fibonacci(n):\n    a, b = 0, 1\n    while a < n:\n        print(a, end=' ')\n        a, b = b, a+b\n    print()\n\nfibonacci(15)", "line_number": null, "bug_type": null}
{"code": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "line_number": null, "bug_type": null}
{"code": "def divisible(x):\n    return [i for i in range(1, x) if (i % 3 == 0) or (i % 5 == 0)]", "line_number": null, "bug_type": null}
{"code": "def printMessage(): \n    message = input(\"Type your message here: \")\n    print(message)", "line_number": null, "bug_type": null}
{"code": "from collections import Counter \ndef most_common(list): \n     counter = Counter(list) \n     most_occur = counter.most_common(1)[0][0] \n     return most_occur\n\nprint(most_common(list))", "line_number": null, "bug_type": null}
{"code": "import base64\n\ndef encode_base64(num):\n    return base64.b64encode(num.to_bytes(\n        (num.bit_length() + 7) // 8, 'big'))", "line_number": null, "bug_type": null}
{"code": "def sum_of_squares_of_evens(list_):\n  sum_ = 0\n  for num in list_:\n    if num % 2 == 0:\n      sum_ += num**2\n  \n  return sum_", "line_number": null, "bug_type": null}
{"code": "def longest_string(arr):\n    max_length = 0\n    max_string = \"\"\n    \n    for s in arr:\n        if len(s)> max_length:\n            max_length = len(s)\n            max_string = s\n            \n    return max_string", "line_number": null, "bug_type": null}
{"code": "import os\n\npassword = 'password'\nos.system('echo ' + password + ' | sudo -S apt-get install vim')", "line_number": null, "bug_type": null}
{"code": "cube_even_numbers = [num**3 for num in range(2, 21, 2)]", "line_number": null, "bug_type": null}
{"code": "def sort_list(words):\n    return sorted(words)\n\nsorted_list = sort_list(['Elephant', 'Cat', 'Dog'])\nprint(sorted_list)", "line_number": null, "bug_type": null}
{"code": "odd_nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]", "line_number": null, "bug_type": null}
{"code": "def gcd(arr):\n    gcd = arr[0]\n    for i in arr[1:]:\n        while i:\n            gcd, i = i, gcd % i\n    return gcd\n\narr = [30,42]\nprint(gcd(arr))", "line_number": null, "bug_type": null}
{"code": "def multiplyList(numbers):\n  result = 1\n  for x in numbers:\n    result = result * x\n  return result", "line_number": null, "bug_type": null}
{"code": "def checkPrime(n):\n    if n <= 1:\n        return False\n\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    \n    return True", "line_number": null, "bug_type": null}
{"code": "import random\nimport string\n\nlength = 10\nchars = string.ascii_letters + string.digits\npassword = ''.join(random.choice(chars) for i in range(length))\n\nprint(password)", "line_number": null, "bug_type": null}
{"code": "encrypted_string = ''\nfor c in 'Hello World':\n encrypted_string += chr(ord(c) + 3)\n\nprint(encrypted_string) # Khoor Zruog", "line_number": null, "bug_type": null}
{"code": "def convertCelsiusToFahrenheit(celsiusTemp):\n    fahrenheitTemp = (celsiusTemp*9/5)+32\n    return fahrenheitTemp", "line_number": null, "bug_type": null}
{"code": "def mat_gen(N, num):\n    matrix = [[num for col in range(N)] for row in range(N)]\n    return matrix\n\nmat_gen(5, 7)", "line_number": null, "bug_type": null}
{"code": "import requests\n\nurl = \"http://example.com/api/fetch\"\n\nresponse = requests.get(url)\ndata = response.json()\n\n#Process data", "line_number": null, "bug_type": null}
{"code": "def sum_even_numbers(n):\n    sum = 0\n    for i in range(2,n+1,2):\n      sum += i\n    return sum\n\nprint(sum_even_numbers(1000))", "line_number": null, "bug_type": null}
{"code": "import itertools\n\nalphabet = ['a', 'b', 'c', 'd']\nwords = [''.join(i) for i in itertools.combinations_with_replacement(alphabet, 3)]\nprint(words)", "line_number": null, "bug_type": null}
{"code": "i = 0 \nwhile i < 3: \n    print(i) \n    i += 1", "line_number": null, "bug_type": null}
{"code": "import math\n\ndef num_of_permutations(string):\n    n = len(string)\n    return math.factorial(n)", "line_number": null, "bug_type": null}
{"code": "class Car:\n    def __init__(self, name, color, doors):\n        self.name = name\n        self.color = color\n        self.doors = doors", "line_number": null, "bug_type": null}
{"code": "def compute_total_cost(price, quantity, shipping, tax):\n    return price * quantity + shipping + tax", "line_number": null, "bug_type": null}
{"code": "import time\n\ndef show_time():\n    print(time.strftime('%H:%M:%S'))\n\nshow_time()", "line_number": null, "bug_type": null}
{"code": "def sum_numbers(event, context):\n num1 = event['num1']\n num2 = event['num2']\n result = num1 + num2\n return {\n 'statusCode': 200,\n 'body': result\n }", "line_number": null, "bug_type": null}
{"code": "def Fibonacci(n):\n  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return Fibonacci(n-1) + Fibonacci(n-2)", "line_number": null, "bug_type": null}
{"code": "def calculate_mean(num1, num2, num3):\n    mean = (num1 + num2 + num3) / 3\n    return mean", "line_number": null, "bug_type": null}
{"code": "a = int(input('Enter a number: '))\nb = int(input('Enter a number: '))\nif a > b:\n print('a is greater than b')", "line_number": null, "bug_type": null}
{"code": "data = [1, 2, 3] \nsum = 0 \n\nfor number in data: \n sum += number ** 2 \n\nprint(f\"The sum of the squares of the given numbers is {sum}.\")", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\nlength = 7\nchars = string.ascii_letters\n\nrandom_string = ''.join(random.choice(chars) for x in range(length))\n\nprint(random_string)", "line_number": null, "bug_type": null}
{"code": "import time\n\nfor i in range(1, 11):\n    print(i)\n    time.sleep(1)", "line_number": null, "bug_type": null}
{"code": "def find_anagrams(string, words):\n anagrams = []\n for word in words:\n  if sorted(word) == sorted(string):\n   anagrams.append(word)\n return anagrams", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef create_random_tuple():\n    tup = ()\n    while len(tup) < 10:\n        tup += (random.randint(1,100), )\n    return tup", "line_number": null, "bug_type": null}
{"code": "for i in range(10,20):\n    if i == 19:\n        print(i, end = '')\n    else:\n        print(i, end = ', ')", "line_number": null, "bug_type": null}
{"code": "def sort_array(array):\n    array.sort()\n    return array\n\nresult = sort_array([2, 4, 5, 1, 3])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None", "line_number": null, "bug_type": null}
{"code": "from functools import reduce\n\nlst = [4, 1, 3, 2, 6, 5]\n\nresult = reduce(lambda a, b: a + [b * 2], lst, [])", "line_number": null, "bug_type": null}
{"code": "def sum_list(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total\n    \nmy_list = [1,2,3,4,5]\n\nprint(sum_list(my_list))", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(List): \n    unique_list = [] \n      \n    for x in List: \n        if x not in unique_list: \n            unique_list.append(x) \n \n    return unique_list", "line_number": null, "bug_type": null}
{"code": "def cal_sqrt(num):\n    return num ** 0.5\n\nnum1 = 16\nsqrt_of_num1 = cal_sqrt(num1)\nprint(sqrt_of_num1) # 4.0", "line_number": null, "bug_type": null}
{"code": "int_list = []\n\ndef add_element_to_list(element):\n    int_list.append(element);\n\ndef remove_element_from_list(element):\n    int_list.remove(element);", "line_number": null, "bug_type": null}
{"code": "def append_nums(lst):\n    new_list = [x + 10 for x in lst]\n    return new_list\n\nprint(append_nums([1, 2, 3]))", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(ls):\n    result = []\n    for e in ls:\n        if e not in result:\n            result.append(e)\n    return list(set(result))", "line_number": null, "bug_type": null}
{"code": "my_list = [1, 2, 3, 4, 5]\nnew_list = [x * y for x, y in zip(my_list, my_list[1:] + [1])]", "line_number": null, "bug_type": null}
{"code": "dictionary = {\n\"name\": \"John\",\n\"age\": 40\n}\nkey = \"name\"\n\nfor key, value in dictionary.items():\n  if key == key:\n    print(value)\n    break", "line_number": null, "bug_type": null}
{"code": "class InventoryItem:\n  def __init__(self, name, cost, quantity):\n    self.name = name\n    self.cost = cost\n    self.quantity = quantity", "line_number": null, "bug_type": null}
{"code": "class Person(object):\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age", "line_number": null, "bug_type": null}
{"code": "days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n\nfor day in days:\n    print(day)", "line_number": null, "bug_type": null}
{"code": "def sum_of_n(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "line_number": null, "bug_type": null}
{"code": "num1 = 10\nnum2 = 20\n\nsum = num1 + num2\n\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))", "line_number": null, "bug_type": null}
{"code": "def standardize(data):\n    mean = data.mean()\n    std = data.std()\n    z_score = (data - mean) / std\n    return z_score", "line_number": null, "bug_type": null}
{"code": "from time import strftime\n\ndef digital_clock():\n    current_time = strftime(\"%H:%M:%S\")\n    print(current_time)\n\ndigital_clock()", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_random_string(length):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(length))\n\nrandom_string = generate_random_string(10)\nprint(random_string)", "line_number": null, "bug_type": null}
{"code": "def top_three(list):\n    sorted_list = sorted(list, reverse = True) \n    return sorted_list[:3]", "line_number": null, "bug_type": null}
{"code": "def sum(arr):\n    if not arr:\n        return 0\n    else:\n        return arr[0] + sum(arr[1:])", "line_number": null, "bug_type": null}
{"code": "def sum_digits(number):\n    total = 0\n    while number > 0:\n        total += number % 10\n        number //= 10\n    return total\n\nprint(\"Sum of digits:\",sum_digits(2345))", "line_number": null, "bug_type": null}
{"code": "def contains_duplicate(s):\n    counts = dict()\n    for ch in s:\n        if ch in counts:\n            return True\n        counts[ch] = 1\n    return False", "line_number": null, "bug_type": null}
{"code": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "line_number": null, "bug_type": null}
{"code": "def dec_to_bin(num): \n    if num > 1: \n        dec_to_bin(num // 2) \n    print(num % 2,end = '')\n\nnum = 19\ndec_to_bin(num)", "line_number": null, "bug_type": null}
{"code": "def int_to_int(int_list):\n    return int(''.join(str(e) for e in int_list))", "line_number": null, "bug_type": null}
{"code": "def add_to_array(num, array):\n  for i in range(len(array)):\n    array[i] += num\n\n  return array", "line_number": null, "bug_type": null}
{"code": "def factorial(inp):\n    if inp == 0:\n        return 1\n    else:\n        return inp*factorial(inp-1)", "line_number": null, "bug_type": null}
{"code": "numbers = {\n '1': 50,\n '2': 60,\n '3': 20,\n '4': 70\n}\n\nsorted_dictionary = sorted(numbers.items(), key=lambda x: x[1])\nprint(sorted_dictionary)", "line_number": null, "bug_type": null}
{"code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True", "line_number": null, "bug_type": null}
{"code": "def sort_list(list):\n    list.sort()\n    return list\n\nif __name__ == \"__main__\":\n    l = [8,3,5,2,9,7]\n    print(sort_list(l))", "line_number": null, "bug_type": null}
{"code": "def find_substring(string, substring):\n  if substring in string:\n    index = string.find(substring)\n    return \"Substring found at index \" + str(index)\n  else:\n    return \"Substring not found\"", "line_number": null, "bug_type": null}
{"code": "sum = 0\nfor i in range(2,101,2):\n    sum += i\nprint(sum)", "line_number": null, "bug_type": null}
{"code": "strings = [\"ada\", \"javascript\", \"c++\", \"python\"]\n\nstrings.sort()\n\nprint(strings)\n# Output: ['ada', 'c++', 'javascript', 'python']", "line_number": null, "bug_type": null}
{"code": "def longest_word(dictionary): \n    longest = \"\"\n    for word in dictionary: \n        if len(word) > len(longest): \n            longest = word \n    return longest", "line_number": null, "bug_type": null}
{"code": "import random\nfor i in range(10):\n    print(random.randint(0, 9))", "line_number": null, "bug_type": null}
{"code": "myDict = {\n 'name': 'John',\n 'age': 25,\n 'height': 6.1,\n 'city': 'New York',\n 'job': 'Developer'\n}", "line_number": null, "bug_type": null}
{"code": "list_of_strings = ['test', 'sample', 'hello', 'world']\n\nlist_of_strings.sort(key=len)\n\nprint(list_of_strings)", "line_number": null, "bug_type": null}
{"code": "def fibonacci(n):\n if n == 0:\n  return 0\n elif n == 1:\n  return 1\n else:\n  return fibonacci(n - 1) + fibonacci(n - 2)", "line_number": null, "bug_type": null}
{"code": "def average(l):\n    total = 0\n    for element in l:\n        total += element\n    return total / len(l)\n\nl = [1,4,7,3]\n\nprint(average(l))", "line_number": null, "bug_type": null}
{"code": "input_sentence = \"This is an example sentence\"\nwords = input_sentence.split()\nwords.sort()\n\nprint(words) # ['an', 'example', 'is', 'sentence', 'This']", "line_number": null, "bug_type": null}
{"code": "class Student:\n    def __init__(self, name, age, phone_number):\n        self.name = name\n        self.age = age\n        self.phone_number = phone_number", "line_number": null, "bug_type": null}
{"code": "def find_largest_number(numbers):\n  largest_number = numbers[0]\n  for number in numbers:\n    if number > largest_number:\n      largest_number = number\n  return largest_number", "line_number": null, "bug_type": null}
{"code": "def int_to_bin(arr):\n   binary = []\n   for num in arr:\n       binary.append(bin(num))\n   return binary\n\narr = [2,4,7]\nbin_arr = int_to_bin(arr)\nprint(bin_arr)", "line_number": null, "bug_type": null}
{"code": "squares = [x * x for x in range(100)] # vectorized code equivalent to the for loop, which will be faster", "line_number": null, "bug_type": null}
{"code": "def myfunc(n):\n   for i in range(0, n, 5): \n       print(i) \n\ndef main(): \n   myfunc(50) \n   myfunc(100)", "line_number": null, "bug_type": null}
{"code": "def reverse_sort(arr): \n    return sorted(arr, reverse=True) \n  \n# driver code \narr = [\"tomato\", \"apple\", \"mango\"] \nsorted_arr = reverse_sort(arr) \n  \nprint(sorted_arr)", "line_number": null, "bug_type": null}
{"code": "from datetime import datetime\n\n# get the current time and print it out\nnow = datetime.now()\nprint(now)", "line_number": null, "bug_type": null}
{"code": "def is_even(number): \n    if(number % 2 == 0): \n        return True \n    else: \n        return False", "line_number": null, "bug_type": null}
{"code": "def check_anagram(string1, string2):\n    if(sorted(list(string1)) == sorted(list(string2))):\n        return True\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "def extract_numbers(s):\n    numbers = []\n    for char in s:\n        if char.isdigit():\n            numbers.append(int(char))\n    return numbers\n\nresult = extract_numbers(\"This is 3 string with 4 numbers\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def print_list_reverse(lst):\n    for i in reversed(lst):\n        print(i)\n\nword_list = [\"Python\", \"is\", \"fun\"]\n\nprint_list_reverse(word_list)", "line_number": null, "bug_type": null}
{"code": "def ascii_conversion(string):\n return ''.join([f'{ord(c):08b}' for c in string])\n\nprint(ascii_conversion(\"Hello World\"))", "line_number": null, "bug_type": null}
{"code": "def count_words(string):\n    words = 0\n    for x in string.split():\n        words += 1\n    return words", "line_number": null, "bug_type": null}
{"code": "def search_list(numbers, search):\n    for index, num in enumerate(numbers):\n        if num == search:\n            return index\n    return -1", "line_number": null, "bug_type": null}
{"code": "from sklearn.decomposition import PCA\n\ndef pca_transformation(X):\n    pca = PCA()\n    X_pca = pca.fit_transform(X)\n    return X_pca", "line_number": null, "bug_type": null}
{"code": "import requests\n\npage_url = 'https://www.example.com'  \npage = requests.get(page_url)\n\ncontent = page.content", "line_number": null, "bug_type": null}
{"code": "def sum_of_ints(*args):\n return sum(args)\n\n# Example Usage:\nsum_of_ints(1,2,3,4,5,6) # 21", "line_number": null, "bug_type": null}
{"code": "class Student:\n    def __init__(self, name, marks):\n        self.name = name\n        self.marks = marks\n    \n    def getName(self):\n        return self.name\n    \n    def getMarks(self):\n        return self.marks", "line_number": null, "bug_type": null}
{"code": "import numpy as np\n\nn = 30\n\n# Optimized code using numpy\nresult = np.sum(np.multiply(np.arange(n), np.arange(n)))", "line_number": null, "bug_type": null}
{"code": "import requests\n\n#make the API call\nresponse = requests.get('http://api.example.com/')\n\n#get the data from the response\ndata = response.json()\n\n#print the data\nprint(data)", "line_number": null, "bug_type": null}
{"code": "class Person:\n    def __init__(self, name):\n        self.name = name\n\nperson = Person(\"John\")", "line_number": null, "bug_type": null}
{"code": "import mysql.connector\n\ndef establish_connection(hostname, user, password):\n    db = mysql.connector.connect(\n        host=hostname,\n        user=user,\n        passwd=password\n    )\n\n    return db", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    fact = 1\n    while(n>0):\n        fact=fact*n\n        n=n-1\n    return fact", "line_number": null, "bug_type": null}
{"code": "def date_difference(date1, date2):\n    diff = date2 - date1\n    return diff.days", "line_number": null, "bug_type": null}
{"code": "user_input = input(\"User: \")\n\nif user_input == \"Hello\":\n print(\"Chatbot: Hi there!\")\nelse:\n print(\"Chatbot: I'm not sure what you mean, please try again.\")", "line_number": null, "bug_type": null}
{"code": "import webbrowser\n\n# open web browser and navigate to google\nwebbrowser.open(\"https://www.google.com\")", "line_number": null, "bug_type": null}
{"code": "students = [('John', 85.5), ('Chris', 90.5), ('Jane', 95.7)]", "line_number": null, "bug_type": null}
{"code": "import re\n\ndef validate_telephone_number(number): \n  pattern = '^[0-9]{10}$'\n  if re.match(pattern, number): \n    return True\n  else: \n    return False", "line_number": null, "bug_type": null}
{"code": "try:\n    a = 5 / 0\nexcept ZeroDivisionError as error:\n    print(error)\nexcept Exception as error:\n    print(error)", "line_number": null, "bug_type": null}
{"code": "class Numbers:\n   \n    def __init__(self):\n        pass\n   \n    def add(self, a, b):\n        return a + b\n   \n    def subtract(self, a, b):\n        return a - b", "line_number": null, "bug_type": null}
{"code": "def count_digits(inp):\n    if not isinstance(inp, int):\n        return \"Invalid input\"\n    else:\n        return len(str(inp))", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n   if n == 0:\n      return 1\n   else:\n      return n * factorial(n-1)\n\nprint(factorial(6))", "line_number": null, "bug_type": null}
{"code": "for row in range(7):\n    for col in range(7):\n        if (row + col) % 2 == 0:\n            print('#', end='')\n        else:\n            print(' ', end='')\n    print()", "line_number": null, "bug_type": null}
{"code": "import requests\n\nurl = 'https://api.mydomain.com/getdata'\nresponse = requests.get(url)\n\ndata = response.json()\nprint(data)", "line_number": null, "bug_type": null}
{"code": "def booleanExpression(A, B, C, D):\n    return (not A or B) and (C or D)", "line_number": null, "bug_type": null}
{"code": "import re\nimport requests\n\nurl = 'https://www.example.com/'\n\nhtml = requests.get(url).text\n\nlinks = re.findall(\"<a href=\\\"(.*?)\\\"\", html)\n\nfor link in links:\n    print(link)", "line_number": null, "bug_type": null}
{"code": "# Python Function\ndef printChars(string): \n    # Iterate over the string \n    for i in range(len(string)):  \n        print(string[i]) \n  \n# Test\nstring = \"Hello World!\"\nprintChars(string)", "line_number": null, "bug_type": null}
{"code": "for i in range(1, 11):\n    for j in range(1, 11):\n        print(i*j, end = \" \")\n    print()", "line_number": null, "bug_type": null}
{"code": "def sum_arr(arr, num):\n    total = 0\n    for i in arr:\n        total += i\n    total *= num\n    return total\n\n# Output \n95", "line_number": null, "bug_type": null}
{"code": "def unique_string(string):\n    return len(string) == len(set(string))\n\nif __name__ == '__main__':\n    string = 'abcdefg'\n    print(unique_string(string))", "line_number": null, "bug_type": null}
{"code": "def generate_infinite_sequence(num):\n    while True:\n        yield num\n\nfor n in generate_infinite_sequence(5):\n    print(n)", "line_number": null, "bug_type": null}
{"code": "class Counter:\n    count = 0\n\n    def __init__(self):\n        Counter.count += 1\n    \n    @classmethod\n    def get_count(cls):\n        return cls.count", "line_number": null, "bug_type": null}
{"code": "my_list = [1, 2, 3, 4, 5]\ntotal = sum(my_list)\n\nprint(\"Sum of all elements in given list:\", total)", "line_number": null, "bug_type": null}
{"code": "product_data = [\n    ('code', 'str'),\n    ('name', 'str'),\n    ('quantity', 'int')\n]", "line_number": null, "bug_type": null}
{"code": "import random\nimport string\n\ndef generate_random_password():\n  charset = string.ascii_letters + string.digits\n  return ''.join(random.sample(charset, 8))\n\nprint(generate_random_password())", "line_number": null, "bug_type": null}
{"code": "def check_num(num):\n    if num > 10:\n        print(\"Success!\")\n    else:\n        print(\"Failed!\")\n\ncheck_num(7)", "line_number": null, "bug_type": null}
{"code": "name = input(\"Please enter your name: \")\nprint(\"Hello {name}\".format(name=name))", "line_number": null, "bug_type": null}
{"code": "def filter_invalid_emails(email_list):\n    valid_emails = []\n    for email in email_list:\n        if '@' in email and '.' in email:\n            valid_emails.append(email)\n    return valid_emails", "line_number": null, "bug_type": null}
{"code": "for i in range(1,6):\n    for j in range(1,i+1):\n        print(\"*\", end=\" \")\n    print()", "line_number": null, "bug_type": null}
{"code": "words = ['dog', 'cat', 'spring', 'summer']\nfor word in words:\n    print(len(word))", "line_number": null, "bug_type": null}
{"code": "def answer_question(question):\n    if question == 'What is the capital of China?':\n        return 'Beijing'\n    else:\n        return 'I don\\'t know'", "line_number": null, "bug_type": null}
{"code": "for i in range(1, 11):\n for j in range(1, 11):\n  print(f'{i} * {j} = {i * j}')\n print()", "line_number": null, "bug_type": null}
{"code": "def divide(a, b):\n    return a // b\n\na = 5\nb = 2\nnumber = divide(a, b)\nprint(number)", "line_number": null, "bug_type": null}
{"code": "import sqlite3\n\nconn = sqlite3.connect(\"example.db\")\nc = conn.cursor()\nc.execute(\"INSERT INTO students VALUES ('John Doe', 20)\")\nconn.commit()\nconn.close()", "line_number": null, "bug_type": null}
{"code": "def word_frequency(sentence):\n    words = sentence.split()\n    freq = {word: words.count(word) for word in words}\n    return freq\n\nsentence = 'This is a sample sentence.'\nresult = word_frequency(sentence)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def base_n(n, base):\n    result = \"\"\n    while n != 0:\n        result += str(n % base)\n        n //= base\n    return result[::-1]  # Reverse the string", "line_number": null, "bug_type": null}
{"code": "def print_first_five_primes():\n    prime_numbers = [2, 3, 5, 7, 11]\n    for prime in prime_numbers:\n        print(prime)", "line_number": null, "bug_type": null}
{"code": "def is_equal(A, B):\n    if len(A) != len(B):\n        return False\n    for el in A:\n        if el not in B:\n            return False\n    return True", "line_number": null, "bug_type": null}
{"code": "# Get the number from the user\nnum = int(input(\"Enter a number: \"))\n\n# Generate a string of stars\nstar_string = '*' * num\n\nprint(star_string)", "line_number": null, "bug_type": null}
{"code": "import random\n \ndef random_numbers(n):\n   list_num = []\n   for i in range(n):\n       list_num.append(random.randint(1, 100))\n   return list_num\n\nlist_num = random_numbers(10) \nprint(list_num)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_random_string():\n    char_list = \"abcdefghijklmnopqrstuvwxyz0123456789\"\n    random_string = \"\"\n    for _ in range(5):\n        random_string += random.choice(char_list)\n    return random_string", "line_number": null, "bug_type": null}
{"code": "for num in range(16):\n    if num % 2 == 0:\n        print(num)", "line_number": null, "bug_type": null}
{"code": "def remove_zeroes(nums):\n  return [x for x in nums if x != 0]\n  \nprint(remove_zeroes([0, 1, 0, 3, 5, 0, 4]))", "line_number": null, "bug_type": null}
{"code": "def factorial(num): \n    if num == 0: \n        return 1\n    else: \n        return num * factorial(num-1) \n\nx = 5\nprint(factorial(x)) \n# 120", "line_number": null, "bug_type": null}
{"code": "def sort_by_length(d):\n    sorted_d = {}\n    keys_list = list(d.keys())\n    keys_list.sort(key=len)\n \n    for key in keys_list:\n        sorted_d[key] = d[key]\n \n    return sorted_d", "line_number": null, "bug_type": null}
{"code": "def get_key_values(dictionary, key):\n    return [value for key, value in dictionary.items() if key == key]", "line_number": null, "bug_type": null}
{"code": "def find_average(nums):\n  sum = 0\n  for num in nums:\n    sum += num\n  return sum/len(nums)", "line_number": null, "bug_type": null}
{"code": "def reverse_list(lst):\n    return [s[::-1] for s in lst]\n\nprint(reverse_list(list))\n# Output: ['olleh', 'dlrow', 'elpmaxe']", "line_number": null, "bug_type": null}
{"code": "import random\nimport string\n\ndef generate_password(length):\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.choice(chars) for _ in range(length))", "line_number": null, "bug_type": null}
{"code": "string = \"Hello World !\"\n\nresult = \"\" \nfor char in string:\n    if char not in result: \n        result += char\n\nprint(\"String after removing duplicate characters:\", result)", "line_number": null, "bug_type": null}
{"code": "import nltk\n\nsentence = 'This is a sentence.'\nwords = nltk.word_tokenize(sentence)\n\nfor word in words:\n print(f'{word}: {nltk.pos_tag([word])[0][1]}')", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(arr):\n    seen = set()\n    for elem in arr:\n        if elem not in seen:\n            seen.add(elem)\n    return list(seen)", "line_number": null, "bug_type": null}
{"code": "import re\n\nstring = \"<b>This is a bold string</b>\"\n\nclean_string = re.sub(r'<[^>]*>', '', string)\n\nprint(clean_string)", "line_number": null, "bug_type": null}
{"code": "num1 = 3\nnum2 = 5\n\nresult = num1 + num2\n\nprint(f'The sum of {num1} and {num2} is {result}')", "line_number": null, "bug_type": null}
{"code": "def even_length_elements(my_list):\n  even_length_list = list()\n  for elem in my_list:\n     if (len(elem) % 2 == 0):\n        even_length_list.append(elem)\n  return even_length_list", "line_number": null, "bug_type": null}
{"code": "def num_squares():\n  squares_dict = {}\n  for i in range(1,11):\n    squares_dict[i] = i*i \n  return squares_dict", "line_number": null, "bug_type": null}
{"code": "def fx(x):\n    if x == 0:\n        x += 1\n    return x", "line_number": null, "bug_type": null}
{"code": "def initialize_dict(size):\n    my_dict = {}\n    for i in range(size):\n        my_dict[i] = None\n    return my_dict", "line_number": null, "bug_type": null}
{"code": "text = \"I like cats, cats and cats\"\nstring = \"cats\"\n\n# Replace all occurrences of the string with an empty string\nmodified_text = text.replace(string, \"\")\nprint(modified_text)\n# Output: \"I like , and \"", "line_number": null, "bug_type": null}
{"code": "def find_squares(arr):\n    squares = []\n    \n    for num in arr:\n        squares.append(num ** 2)\n        \n    return squares\n\nfind_squares([1, 2, 3, 4, 5])", "line_number": null, "bug_type": null}
{"code": "def compare_length(s1, s2):\n    if len(s1) == len(s2):\n        return 0\n    elif len(s1) > len(s2):\n        return 1\n    else:\n        return 2", "line_number": null, "bug_type": null}
{"code": "customer_data = {\n '001': ('John', 'john@example.com', 'London'),\n '002': ('Jane', 'jane@example.com', 'New York'),\n '003': ('Bob', 'bob@example.com', 'Los Angeles')\n}", "line_number": null, "bug_type": null}
{"code": "def get_highest(val1, val2, val3, val4):\n return max([val1, val2, val3, val4])", "line_number": null, "bug_type": null}
{"code": "sorted_list = [9, 1, 8, 0, 2].sort()\nprint(sorted_list)", "line_number": null, "bug_type": null}
{"code": "str = \"Hello, World!\"\nlength = len(str)\nprint('Length of string is:',length) # Length of string is: 13", "line_number": null, "bug_type": null}
{"code": "list_data = [{'id': 1, 'name': 'Tom'}, {'id': 2, 'name': 'Bob'}]\n\nfor element in list_data:\n  print(element['name'])", "line_number": null, "bug_type": null}
{"code": "import string \nimport random\n \ndef generate_random_string(length):\n return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))\n \nlength = 20\nprint(generate_random_string(length))", "line_number": null, "bug_type": null}
{"code": "import requests\n \nurl = \"https://github.com\"\n \nresponse = requests.get(url)\n \nwith open('webpage.txt', 'w') as file:\n    file.write(response.text)", "line_number": null, "bug_type": null}
{"code": "def find_duplicates(a):\n    seen = set()\n    result = []\n    for num in a:\n        if num in seen:\n            result.append(num)\n        else:\n            seen.add(num)\n    return result", "line_number": null, "bug_type": null}
{"code": "class Bicycle():\n    \n    def __init__(self, brand, colour):\n        self.brand = brand\n        self.colour = colour", "line_number": null, "bug_type": null}
{"code": "def list_to_str(arr):\n    str = \"\"\n    for i in arr:\n        str += i\n    return str\n\narr = ['a', 'b', 'c']\n  \nresult = list_to_str(arr) \nprint(result)", "line_number": null, "bug_type": null}
{"code": "language_dict = {\n    'English': 'Hi', \n    'Spanish': 'Hola', \n    'Japanese': 'Konnichiwa'\n    }\n    \ndef edit_dict(dictionary, key, value):\n    dictionary[key] = value", "line_number": null, "bug_type": null}
{"code": "import re\n\nstring = \"102030-abc-5060\" \npattern = r'-\\w+-' \nresult = re.split(pattern, string)\nprint(result)\n\n# Output -> ['102030', '5060']", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generateRandomNumbers():\n\trandomNumbers = []\n\tfor i in range(0, 20):\n\t\trandomNumbers.append(random.randint(0, 20))\n\treturn randomNumbers\n\nprint(generateRandomNumbers())", "line_number": null, "bug_type": null}
{"code": "def min_list(list1): \n    min_value = min(list1) \n  \n    return min_value", "line_number": null, "bug_type": null}
{"code": "from functools import reduce\n\nresult = reduce(lambda x,y: x+y, list)\nprint(result) # 10", "line_number": null, "bug_type": null}
{"code": "def sum_of_nums(num1, num2):\n    return num1 + num2\n\nexample_sum = sum_of_nums(2, 3)\nprint(\"Sum of two numbers is:\", example_sum)", "line_number": null, "bug_type": null}
{"code": "def target_sum(subtrahend, lst):\n    target_sums = []\n    for num in lst:\n        target_sums.append(subtrahend - num)\n    return target_sums", "line_number": null, "bug_type": null}
{"code": "def sort_strings(string_list):\n    sorted_list = sorted(string_list)\n    return sorted_list\n\nunsorted_list = ['banana', 'apple', 'orange']\nsorted_list = sort_strings(unsorted_list)\nprint(sorted_list)", "line_number": null, "bug_type": null}
{"code": "def check_unique(s):\n    seen=set()\n    for c in s:\n        if c in seen:\n            return False\n        else:\n            seen.add(c)\n    return True", "line_number": null, "bug_type": null}
{"code": "list = [3, 4, 7, 1, 6, 9, 2] \nlist.sort() \nprint(\"Ascending :\",list)", "line_number": null, "bug_type": null}
{"code": "import string\n\ndef removePunctuations(sentence):\n    return sentence.translate(str.maketrans('', '', string.punctuation))\n\nprint(removePunctuations(\"This, is a?! test* sentence.\"))", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1,n+1):\n            fact = fact*i\n        return fact", "line_number": null, "bug_type": null}
{"code": "def cum_sum(lst):\n result = []\n cumulative = 0\n for num in lst:\n  cumulative += num\n  result.append(cumulative)\n return result", "line_number": null, "bug_type": null}
{"code": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def get_area(self):\n        return self.width * self.height", "line_number": null, "bug_type": null}
{"code": "import matplotlib.pyplot as plt\n\ndata = [10, 5, 20, 25, 15]\n\nplt.bar(range(len(data)), data, color='blue')\nplt.show()", "line_number": null, "bug_type": null}
{"code": "def count_outcomes(n):\n  if n == 0:\n    return 1 \n  else: \n    return count_outcomes(n-1) + 2**n\n\nprint(count_outcomes(8)) # 256", "line_number": null, "bug_type": null}
{"code": "def find_average(num1, num2, num3):\n return (num1 + num2 + num3) / 3", "line_number": null, "bug_type": null}
{"code": "def diff(a, b): \n   return abs(a - b) \n  \na = 21\nb = 49\n  \nprint(diff(a, b)) # Output 28", "line_number": null, "bug_type": null}
{"code": "# Program to print pyramid pattern in Python\n\nfor i in range(0,5):\n    for j in range(0,i+1):\n        print(\"*\",end=\"\")\n    print(\"\\r\")\n\n\"\"\"\n*\n**\n***\n****\n*****\n\"\"\"", "line_number": null, "bug_type": null}
{"code": "def linear_search(list_of_items, item_to_search):\n    for items in list_of_items: \n        if items == item_to_search: \n            return list_of_items.index(item_to_search) \n    return -1", "line_number": null, "bug_type": null}
{"code": "total = 0\nfor num in [10, 15, 20, 25, 30]:\n    total += num\n\naverage = total / 5\nprint(average)", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef random_string():\n    letters = string.ascii_letters\n    return ''.join(random.choice(letters) for i in range(5))\n\nresult = random_string()\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def bmi_calculation(height, weight):  \n    bmi = weight / (height * height)  \n    return bmi", "line_number": null, "bug_type": null}
{"code": "def check_for_two_same_chars(string):\n    for i in range(len(string)-1):\n        if string[i] == string[i+1]:\n            return True\n    return False", "line_number": null, "bug_type": null}
{"code": "def sort_by_marks(records):\n    # Sort the records list according to the marks \n    sorted_records =sorted(records, key = lambda x: x[2], reverse=True)\n\n    # Return the sorted list\n    return sorted_records", "line_number": null, "bug_type": null}
{"code": "list = [1,2,3,4,5,6,7,8,9] \n\nfor num in list: \n    if num % 2 == 0: \n       print(num, end = \" \")", "line_number": null, "bug_type": null}
{"code": "list = [1, 2, 3, 4, 5]\n\ntotal = 0\nfor num in list:\n  if (num % 2 == 0):\n    total += num\nprint (total)", "line_number": null, "bug_type": null}
{"code": "import requests\nfrom bs4 import BeautifulSoup\n \nresponse = requests.get(\"http://example.com\")\n \nsoup = BeautifulSoup(response.content, \"html.parser\")\n \ntext = soup.get_text()\nprint(text)", "line_number": null, "bug_type": null}
{"code": "import mysql.connector\n\nconnection = mysql.connector.connect(  \n    host = \"test.com\",\n    user = \"admin\",\n    password = \"pwd123\",\n    database = \"testdb\"\n)", "line_number": null, "bug_type": null}
{"code": "class Point2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y", "line_number": null, "bug_type": null}
{"code": "import random\n \ndef random_string(length, char_set):\n result = \"\"\n for _ in range(length):\n  result += random.choice(char_set)\n return result\n \nprint(random_string(6, 'abcdefghijklmnopqrstuvwxyz'))\n\n# Output: acehkl", "line_number": null, "bug_type": null}
{"code": "numbers = [7, 9, 23, 0, 4]\n\nmaximum = max(numbers)\n\nprint(\"The maximum value is: \"+ str(maximum))", "line_number": null, "bug_type": null}
{"code": "def reverse_string(string):\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string\n\nresult = reverse_string(\"Hello World!\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def is_even(num):\n    if num%2==0:\n        return True\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "from datetime import datetime\nimport pytz\n\ndef print_time(tz):\n  timezone = pytz.timezone(tz)\n  print(datetime.now(timezone).strftime(\"%H:%M:%S\"))\n\nprint_time(\"UTC+11:00\")", "line_number": null, "bug_type": null}
{"code": "def count_dups(arr):\n  dt = {} \n  count = 0 \n \n  for x in arr:\n    count += x in dt\n    dt[x] = 1 \n \n  return count", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_password(num_chars):\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    return ''.join(random.choice(chars) for x in range(num_chars))", "line_number": null, "bug_type": null}
{"code": "import requests \nimport json\n\nurl = \"https://www.example.com\"\n\nresponse = requests.get(url)\nif response.status_code == 200:\n    response_data = response.text\n    parsed_data = json.loads(response_data)\n    print(parsed_data)", "line_number": null, "bug_type": null}
{"code": "def sort_descending(nums):\n  return sorted(nums, reverse=True)\n\nprint(sort_descending([5, 1, 8, 10, 0, 4]))", "line_number": null, "bug_type": null}
{"code": "def print_even_numbers():\n    even_nums = [num for num in range(0, 40) if num % 2 == 0]\n    for num in even_nums[:20]:\n        print(num)\n\nprint_even_numbers()", "line_number": null, "bug_type": null}
{"code": "def find_max_unsorted(arr):\n    max_value = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_value:\n            max_value = arr[i]\n    return max_value", "line_number": null, "bug_type": null}
{"code": "def search_for_pattern(s, pattern):\n    if pattern in s:\n        return True\n    else:\n        return False\n\nresult = search_for_pattern(\"abcxyzabc\", \"abc\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef rollDice():\n  dice1 = random.randint(1,6)\n  dice2 = random.randint(1,6)\n\n  return dice1 + dice2\n\nprint(rollDice())", "line_number": null, "bug_type": null}
{"code": "def middle_element(list):\n    mid = len(list) // 2\n    return list[mid]\n\nresult = middle_element([1,3,5,7,9,11])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_random_number(number):\n    random.seed(number)\n    rand_number = random.randint(1, number**2)\n    return rand_number", "line_number": null, "bug_type": null}
{"code": "def find_target(nums, target):\n  for i in range(len(nums)):\n    if nums[i] == target:\n      return i\n  return -1", "line_number": null, "bug_type": null}
{"code": "def concatenate_strings(input_strings):\n    output_string = \"\"\n    for string in input_strings:\n        output_string += string\n    return output_string", "line_number": null, "bug_type": null}
{"code": "my_string = \"This is a sentence with five words.\"\nwords = my_string.split(\" \")\nprint(len(words))", "line_number": null, "bug_type": null}
{"code": "def intersect(l1, l2):\n    return [x for x in l1 if x in l2]", "line_number": null, "bug_type": null}
{"code": "import random\n\nrandom_list = []\n\nfor i in range(100):\n    random_list.append(random.randint(1,10))\n    \nprint(random_list)", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "line_number": null, "bug_type": null}
{"code": "def merge_dict(dict1, dict2):\n result = dict1.copy()\n result.update(dict2)\n return result", "line_number": null, "bug_type": null}
{"code": "def even_odd(x):\n  if isinstance(x, int):\n    if x % 2 == 0:\n      print(\"even\")\n    else:\n      print(\"odd\")\n  else:\n    print(\"x must be an integer\")", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef random_string_generator():\n    char_set = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n    random_string = ''.join(random.sample(char_set, 8))\n    return random_string\n\nprint(random_string_generator())", "line_number": null, "bug_type": null}
{"code": "def print_message(name):\n    print(\"Hello \"+name)\n\nname = \"Matthew\"\nprint_message(name)", "line_number": null, "bug_type": null}
{"code": "def calculate_salary(hours_worked):\n    wage_per_hour = 8.0\n    salary = wage_per_hour * hours_worked\n    return salary", "line_number": null, "bug_type": null}
{"code": "import time\n\ndef display_time():\n    time_string = time.strftime('%I:%M%p', time.localtime())\n    return f'It is currently {time_string}'", "line_number": null, "bug_type": null}
{"code": "def is_prime(num): \n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False \n        return True\n    else: \n        return False", "line_number": null, "bug_type": null}
{"code": "def sum_elements(arr):\n    summ = 0\n    for i in arr: \n        summ += i\n    return summ\n\nsumm = sum_elements([4, 6, 8, 2])\nprint(summ)", "line_number": null, "bug_type": null}
{"code": "class Student:\n    def __init__(self, name, grade):\n        self.name = name\n        self.grade = grade", "line_number": null, "bug_type": null}
{"code": "my_list = [\"Apple\", \"Banana\", \"Cherry\"]\n\ndef list_to_dict(lst):\n    dictionary = dict(zip(lst, range(len(lst))))\n    return dictionary\n    \ndictionary = list_to_dict(my_list)\nprint(dictionary)", "line_number": null, "bug_type": null}
{"code": "def containsSubstring(string, substring):\n    \"\"\"\n    Returns True if the string contains the substring, False otherwise\n    \"\"\"\n    \n    return substring in string", "line_number": null, "bug_type": null}
{"code": "def get_year_from_date(date):\n    \"\"\"\n    This function takes a string date in the form of a yyyy-mm-dd and returns the year as an integer\n    \"\"\"\n    year = date.split('-')[0]\n    return int(year)", "line_number": null, "bug_type": null}
{"code": "if(type(100) == int):\n    print(\"It is an integer\")\nelif(type(100) == float):\n    print(\"It is a float\")", "line_number": null, "bug_type": null}
{"code": "def sum(arr): \n    s = 0\n    for number in arr: \n        s += number \n    return s", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef random_string(length):\n    chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n    random_string = ''\n    for i in range(length):\n        random_string += random.choice(chars)\n    return random_string\n    \nprint(random_string(5))", "line_number": null, "bug_type": null}
{"code": "def search(word, text):\n    words = text.split()\n    for w in words:\n        if w == word:\n            return True\n    return False", "line_number": null, "bug_type": null}
{"code": "def string_to_list(s):\n    l = []\n    for c in s:\n        l.append(c)\n    return l\n\nl = string_to_list('GPT')\nprint(l)", "line_number": null, "bug_type": null}
{"code": "def largest_elements(arr):\n    \n    max_vals = []\n    while arr:\n        max_value = max(arr)\n        max_vals.append(max_value)\n        while max_value in arr:\n            arr.remove(max_value)\n    return max_vals", "line_number": null, "bug_type": null}
{"code": "def isPowerOfTwo(number):\n    return (number > 0) and ((number & (number - 1)) == 0)\n\nprint(isPowerOfTwo(16))", "line_number": null, "bug_type": null}
{"code": "sum = 0\na = 10\nb = 20\nsum = a + b\n\nprint(\"The sum of\", a, \"and\", b, \"is\", sum)", "line_number": null, "bug_type": null}
{"code": "# Get the first 10 characters of a string\ndef get_first_10_chars(string):\n return string[0:10]\n\nstr = 'Hello, world!'\nprint(get_first_10_chars(str))", "line_number": null, "bug_type": null}
{"code": "total = 0\nfor number in range(1, 21, 2):\n    total += number    \nprint(f\"Sum of the first 10 odd numbers is {total}\")", "line_number": null, "bug_type": null}
{"code": "def sortList(list):\n    list.sort()\n    return list\n\nsortedList = sortList([4, 5, 2, 1, 3])\nprint(sortedList)", "line_number": null, "bug_type": null}
{"code": "def reverse_string(string):\n    result = \"\"\n    for i in range(len(string) - 1, -1, -1):\n        result += string[i]\n    return result\n\nreverse_string(\"hello\")", "line_number": null, "bug_type": null}
{"code": "import numpy as np\n\narr = np.array([2, 4, 7, 8, 9])\n\nmean = np.mean(arr)\n\nprint(mean) # 6.2", "line_number": null, "bug_type": null}
{"code": "for num in [1, 2, 3, 4, 5]:\n    print(num)", "line_number": null, "bug_type": null}
{"code": "string1 = \"Hello\"\nstring2 = \"World\"\n\n# Concatenate two strings\nconcatenated_string = string1 + \" \" + string2 \n\n# Print the result\nprint(concatenated_string)", "line_number": null, "bug_type": null}
{"code": "def find_length(string):\n  return len(string)\n\nprint(find_length(\"Hello World!\")) # Output: 12", "line_number": null, "bug_type": null}
{"code": "def reverseString(inputString): \n    reversedString = \"\" \n    for i in inputString: \n        reversedString = i + reversedString \n    return reversedString \n  \nprint(reverseString(\"Hello\"))", "line_number": null, "bug_type": null}
{"code": "import json\n\n# Load the JSON data into a Python Dictionary\ndata = json.loads('{\"name\": \"John\", \"age\": 28, \"location\": \"New York\"}')", "line_number": null, "bug_type": null}
{"code": "def sortSentence(sentence):\n    words = sentence.split(\" \")\n    words.sort()\n    return words\n\nresult = sortSentence(\"This is a great day\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def is_prime(n): \n if n <= 1: \n  return False\n  \n for i in range(2, n): \n  if n % i == 0: \n   return False\n \n return True", "line_number": null, "bug_type": null}
{"code": "class Particle():\n    def __init__(self, mass, velocity, temperature):\n        self.mass = mass\n        self.velocity = velocity\n        self.temperature = temperature", "line_number": null, "bug_type": null}
{"code": "def get_numbers(id):\n    nums = []\n    for i in range(id + 1):\n        nums.append(i)\n    return nums\n\nnumbers = get_numbers(5)\nprint(numbers)", "line_number": null, "bug_type": null}
{"code": "def reverse_string(my_str): \n  rev_str = \"\" \n  \n  for i in my_str: \n    rev_str = i + rev_str\n  \n  return rev_str\n\nmy_str = 'Hello World'\n\nreverse_string(my_str)", "line_number": null, "bug_type": null}
{"code": "def lengthList(arr):\n    length = 0\n    for i in arr:\n        length += 1\n    return length\n \nprint(lengthList([1, 3, 5, 7, 9])) # Outputs: 5", "line_number": null, "bug_type": null}
{"code": "def calc_circle_circumference(radius):\n    circumference = 2 * 3.14 * radius\n    return circumference\n\ncircle_circumference = calc_circle_circumference(4)\nprint(circle_circumference)", "line_number": null, "bug_type": null}
{"code": "a = 10\nb = 0\nwhile a > 0:\n b += a\n a //= 2", "line_number": null, "bug_type": null}
{"code": "import time\n\nfor i in range(1, 11):\n print(i)\n time.sleep(1) # delay for one second", "line_number": null, "bug_type": null}
{"code": "def add(a, b):\n    print('Sum =', a + b)\n    \nadd(5, 6)", "line_number": null, "bug_type": null}
{"code": "def generate_list():  \n  my_list = []\n  for i in range(0, 10001):\n    my_list.append(i)\n\n  return my_list", "line_number": null, "bug_type": null}
{"code": "def generate_numbers(list):\n    new_list = [] \n    for number in list:\n        new_list.append(number + 5) \n    return new_list", "line_number": null, "bug_type": null}
{"code": "def bin_from_text(text):\n    bin_text = \"\"\n    for char in text:\n        bin_text += bin(ord(char)).lstrip(\"0b\") + \" \"\n    return bin_text", "line_number": null, "bug_type": null}
{"code": "import requests\n\nurl = 'https://example.com/api/v1/data'\n\nresponse = requests.get(url)\ndata = response.json()\n\n# process the data here\n# ...", "line_number": null, "bug_type": null}
{"code": "class Book:\n    def __init__(self, title, author, isbn):\n        self.title = title\n        self.author = author\n        self.isbn = isbn", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_random_string(length):\n  # Generate a random string of given length\n  letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n  return ''.join(random.choice(letters) for i in range(length))", "line_number": null, "bug_type": null}
{"code": "def get_sublist(lst, n):\n    return [lst[i:i+n] for i in range(0,len(lst),n)]", "line_number": null, "bug_type": null}
{"code": "myList = [\"Apple\", \"Banana\", \"Cherry\"]\n\ndef reverse(myList):\n    myList.reverse()\n    return myList\n\nprint(reverse(myList))  # [\"Cherry\", \"Banana\", \"Apple\"]", "line_number": null, "bug_type": null}
{"code": "def gcd(a, b): \n    if a == 0 : \n        return b \n    return gcd(b % a, a)", "line_number": null, "bug_type": null}
{"code": "def days_in_year(year): \n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): \n        return 366 \n    else: \n        return 365", "line_number": null, "bug_type": null}
{"code": "sentence = \"Hello World. This is a sentence.\"\nwords = sentence.split()\nword_count = len(words)\n\nprint(f\"The sentence has {word_count} words.\")", "line_number": null, "bug_type": null}
{"code": "def sum_of_digits(number):\n if len(str(number)) == 1:\n  return number\n else:\n  return number % 10 + sum_of_digits(number // 10)\n\n# example\nsum_of_digits(1234)\n# returns 10", "line_number": null, "bug_type": null}
{"code": "def cumulative_sum(lst):\n    sum = 0\n    for i in lst:\n        sum += i\n        print(sum)\n\ncumulative_sum([1, 2, 3, 4, 5])", "line_number": null, "bug_type": null}
{"code": "def diff_max_min(numbers):\n    return max(numbers) - min(numbers)\n  \nif __name__ == '__main__':\n    nums = [1,2,3,4,5]\n    diff = diff_max_min(nums)\n    print(diff)", "line_number": null, "bug_type": null}
{"code": "import itertools\n\narr = [1, 2, 3]\nn = 2\n\nresult = list(itertools.combinations(arr, n))\n\nprint(result)", "line_number": null, "bug_type": null}
{"code": "import os\n\n# Create the root directory\nos.mkdir(\"root\")\n\n# Switch to the root directory\nos.chdir(\"root\")\n\n# Create two child directories\nos.mkdir(\"child_dir_1\")\nos.mkdir(\"child_dir_2\")", "line_number": null, "bug_type": null}
{"code": "import random\ndef random_between_nums(num1, num2):\n    return random.randint(num1, num2)", "line_number": null, "bug_type": null}
{"code": "def find_common_elements(set1, set2):\n    common_elements = []\n    for item in set1:\n        if item in set2 and item not in common_elements:\n            common_elements.append(item)\n    return common_elements", "line_number": null, "bug_type": null}
{"code": "import random\n\n# Generate a random number between 1 and 10\nrandom_number = random.randint(1, 10)\nprint(random_number)", "line_number": null, "bug_type": null}
{"code": "def replace_spaces(string):\n    return string.replace(' ', '_')\n\nstring = 'Hello World'\n\nprint(replace_spaces(string))", "line_number": null, "bug_type": null}
{"code": "nums = [x*x for x in range(1,11)] \nprint(\"The first 10 perfect squares are: \", nums)", "line_number": null, "bug_type": null}
{"code": "def multiply(a, b):\n    \"\"\"Computes the product of two numbers.\"\"\"\n    return a * b", "line_number": null, "bug_type": null}
{"code": "arr = [1, 2, 3, 4, 5]\nfor element in arr:\n   print(element * 2)", "line_number": null, "bug_type": null}
{"code": "import time\n\ndef measure_time():\n start = time.time()\n # Your code here...\n end = time.time()\n return end - start \n\nexecution_time = measure_time()\nprint(\"Time taken:\", execution_time, \"seconds\")", "line_number": null, "bug_type": null}
{"code": "my_list = [1, 5, 4, -3, 10]\n\ntotal = 0\n\nfor num in my_list:\n total += num\n\nprint(total) # prints 17", "line_number": null, "bug_type": null}
{"code": "def remove_vowels(phrase): \n  vowels = ['a','e','i','o','u'] \n  return ''.join([c for c in phrase if c not in vowels])", "line_number": null, "bug_type": null}
{"code": "def sumOfSquares(n):\n  sum = 0\n  for i in range(n + 1):\n    sum += (i ** 2)\n  return sum\n\nprint(sumOfSquares(10))", "line_number": null, "bug_type": null}
{"code": "from bs4 import BeautifulSoup\ndef parse_web_html(html):\n soup = BeautifulSoup(html, 'html.parser')\n text = soup.get_text()\n return text", "line_number": null, "bug_type": null}
{"code": "import re\n\ninput_string = \"This input contains \\\" special characters!\"\nfiltered_string = re.sub(r'[^a-zA-Z0-9]', '', input_string)\n\nprint(filtered_string) # Output: Thisinputcontainsspecialcharacters", "line_number": null, "bug_type": null}
{"code": "def evaluate(expression):\n    try:\n        return eval(expression)\n    except SyntaxError:\n        print('Invalid expression.')\n\nprint(evaluate(\"(20 * 8) + (2 * 4)\"))\n\nOutput: 164.0", "line_number": null, "bug_type": null}
{"code": "# Python program to remove elements of an array that are greater than a given limit\n\ndef remove_above_limit(arr, limit):\n    new_arr = [x for x in arr if x <= limit]\n    return new_arr", "line_number": null, "bug_type": null}
{"code": "def sort_list(numbers): \n numbers.sort()\n return numbers\n\nprint(sort_list([4, 3, 2, 5, 1]))", "line_number": null, "bug_type": null}
{"code": "def is_divisible_by_7(number):\n    return number % 7 == 0\n\nresult = is_divisible_by_7(42)\nprint(result) # True", "line_number": null, "bug_type": null}
{"code": "def repeat(s1, s2):\n n = int(s1)\n return s2 * n\n\nprint(repeat('3','hello'))\n# Output: hellohellohello", "line_number": null, "bug_type": null}
{"code": "list_1 = [\"Hello\", \"World\"]\nlist_2 = [\"Python\", \"Programming\"]\nseparator = \",\"\n\nresult = separator.join(list_1 + list_2)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def replace_char(string, char_rep, char_rep_with):\n    new_string = string.replace(char_rep, char_rep_with)\n    return new_string\n\nresult = replace_char('Hello World!', 'l', 't')\nprint(result)", "line_number": null, "bug_type": null}
{"code": "import collections\n\ndef most_common_words(text):\n    words = text.split()\n    counts = collections.Counter(words)\n    return counts.most_common(10)", "line_number": null, "bug_type": null}
{"code": "import requests\n\nurl = 'https://example.com/api'\n\nresponse = requests.get(url)\n\nif response.status_code == 200:\n data = response.json()\n print(data)\nelse:\n print('Error:', response.status_code)", "line_number": null, "bug_type": null}
{"code": "def find_sum(n):\n    # base case\n    if n == 0:\n        return 0\n    # recursive case\n    else:\n        return n + find_sum(n-1)", "line_number": null, "bug_type": null}
{"code": "def compare_strings(string1, string2):\n  if len(string1) > len(string2):\n    return True\n  else:\n    return False", "line_number": null, "bug_type": null}
{"code": "def is_odd(number):\n  if number % 2 == 0:\n    return False\n  else:\n    return True", "line_number": null, "bug_type": null}
{"code": "my_list = [10,20,30,40]\n\ntotal = 0\nfor num in my_list:\n    total += num\n\nprint(\"The sum of all elements in the list is: \" + str(total))", "line_number": null, "bug_type": null}
{"code": "import random\n\nrandom_number = random.randint(1, 10)\nprint(f\"Random number between 1 and 10: {random_number}\")", "line_number": null, "bug_type": null}
{"code": "myList = [\"item1\", \"item2\", \"item3\"]\n\nfor item in myList:\n    print(item)", "line_number": null, "bug_type": null}
{"code": "def prod(a, b):\n    return a*b\n\ndef total(mylist):\n    sum = 0\n    for num in mylist:\n        sum += num\n    return sum", "line_number": null, "bug_type": null}
{"code": "def find_smallest(array):\n    smallest_item = array[0][0]\n    for row in array:\n        for item in row:\n            if item < smallest_item:\n                smallest_item = item\n    return smallest_item", "line_number": null, "bug_type": null}
{"code": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * (self.radius**2)", "line_number": null, "bug_type": null}
{"code": "str = \"1, 2, 3, 4\"\nlist = str.split(', ') \nprint(list) # Output is ['1', '2', '3', '4']", "line_number": null, "bug_type": null}
{"code": "def is_valid_decimal(n):\n    try:\n        float(n)\n        return True\n    except ValueError:\n        return False", "line_number": null, "bug_type": null}
{"code": "def sum_of_numbers_in_string(string):\n    number_list = []\n    for word in string.split(' '):\n        if word.isdigit():\n            number_list.append(int(word))\n\n    return sum(number_list)", "line_number": null, "bug_type": null}
{"code": "def setup_list():\n    my_list = [[0] * 10000 for _ in range(10000)]\n    return my_list", "line_number": null, "bug_type": null}
{"code": "def classify_data(data_points):\n    classified_data = []\n    for point in data_points:\n        if point % 2 == 0:\n            classified_data.append('green')\n        else:\n            classified_data.append('red')\n    return classified_data", "line_number": null, "bug_type": null}
{"code": "import random\n\nrand_num = random.randint(0,1)\nif rand_num == 0:\n    print(\"Heads\")\nelse:\n    print(\"Tails\")", "line_number": null, "bug_type": null}
{"code": "import json\n\ndata = [1, 2, 3, 4, 5]\n\ndata_json = json.dumps(data)\n\nprint(data_json)", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnum = 5\n\nprint(\"The factorial of\", num, \"is\", factorial(num))", "line_number": null, "bug_type": null}
{"code": "def starts_with(string, substring):\n  if string[:len(substring)] == substring:\n    return True\n  else:\n    return False", "line_number": null, "bug_type": null}
{"code": "class OrderStatus:\n  def __init__(self, status):\n    self.status = status\n\n  def show_status(self):\n    print(f\"Order Status: {self.status}\")", "line_number": null, "bug_type": null}
{"code": "def calculate_square_root(num): \n   # Taking a square root of number \n   return num ** 0.5\n  \n# Driver Code \nnum = 16\nprint(calculate_square_root(num)) \n\n# Output \n4.0", "line_number": null, "bug_type": null}
{"code": "def calculate_area_circle(radius): \n    pi = 3.14\n    area = pi * (radius * radius) \n    return area \n  \n# Output\nprint(\"Area of circle is: \", calculate_area_circle(10))", "line_number": null, "bug_type": null}
{"code": "def replace_word(string):\n    modified_string = string.replace(\"dog\", \"cat\")\n    return modified_string\n\nresult = replace_word(\"I love my dog\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def sum_n(n):\n    result = (n * (n+1)) / 2\n    return result\n\nn = 10\n\nsum = sum_n(n)\nprint(sum)", "line_number": null, "bug_type": null}
{"code": "def spam(divideBy):\n    try:\n        return 42 / divideBy\n    except ZeroDivisionError:\n        print('Error: Invalid argument.')\n\nprint(spam(2))\nprint(spam(12))\nprint(spam(0))", "line_number": null, "bug_type": null}
{"code": "def reverse_string(string):\n    return string[::-1]\n\nstring = \"Hello world!\"\nprint(reverse_string(string))", "line_number": null, "bug_type": null}
{"code": "def user_number(number):\n    number_py = '{}'.format(number)\n    print(\"The Python equivalent of {} is {}\".format(number, number_py))", "line_number": null, "bug_type": null}
{"code": "def sum(nums):\n    result = 0\n    for i in range(len(nums)):\n        result += nums[i]\n    return result", "line_number": null, "bug_type": null}
{"code": "my_list = [1, 4, 5, 8]\nmy_list.append(99)", "line_number": null, "bug_type": null}
{"code": "import xml.etree.ElementTree as ET \n\ntree = ET.parse('data.xml') \nroot = tree.getroot() \n\n# print all items\nfor item in root.findall('.//item'):\n    print(item.attrib)", "line_number": null, "bug_type": null}
{"code": "def merge_unique_sorted_lists(list1, list2):\n\tmerged_list = list1+list2\n\tunique_list = list(set(merged_list))\n\tunique_list.sort()\n\treturn unique_list", "line_number": null, "bug_type": null}
{"code": "def list_to_str(lst):\n    result = \",\".join(map(str, lst))\n    return result\n\nresult = list_to_str([2, 3, 10])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "import random\nimport string\n\ndef generate_password():\n password = ''.join(random.choices(string.ascii_letters + string.digits, k=8))\n return password\n\nprint(generate_password())", "line_number": null, "bug_type": null}
{"code": "def detect_duplicate_characters(string):\n    chars = set()\n    for char in string:\n        if char in chars:\n            return True\n        chars.add(char)\n    return False", "line_number": null, "bug_type": null}
{"code": "def filter_values(lst, condition):\n    filtered_list = []\n    for x in lst:\n        if eval(condition):\n            filtered_list.append(x)\n    return filtered_list", "line_number": null, "bug_type": null}
{"code": "def int_to_binary(n):\n    \"\"\" Returns the binary representation of an integer. \"\"\"\n    return \"{0:b}\".format(n)", "line_number": null, "bug_type": null}
{"code": "n = 6\nsum = 0\n\nfor i in range(1, n+1):\n   sum = sum + i\nprint(\"The sum is\", sum)", "line_number": null, "bug_type": null}
{"code": "def compare_strings(first_string, second_string):\n    string_list = set(list(first_string)) & set(list(second_string))\n    common_string = ''.join(string_list)\n    return common_string\n\nprint(compare_strings(\"hello\", \"world\"))", "line_number": null, "bug_type": null}
{"code": "arr = [1,2,3,4,5] \nsum = 0\nfor i in arr: \n    sum+=i \n    print(sum)\n\n# Output \n# 15", "line_number": null, "bug_type": null}
{"code": "def convert_minutes(minutes):\n    hours = minutes // 60\n    remaining_minutes = minutes % 60\n    return hours, remaining_minutes\n\nhours, minutes = convert_minutes(150)\nprint(hours, minutes)", "line_number": null, "bug_type": null}
{"code": "data = {\n    'height': '150cm',\n    'age': 20,\n    'name': 'John'\n}", "line_number": null, "bug_type": null}
{"code": "def sum_of_digits(num):\n    sum = 0\n    while(num > 0):\n        d = num % 10\n        num = num // 10\n        sum += d\n    return sum", "line_number": null, "bug_type": null}
{"code": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\nprint(fib(5))", "line_number": null, "bug_type": null}
{"code": "import urllib.request\n\nurl = \"https://www.example.com/\"\n\nresponse = urllib.request.urlopen(url) \nwebContent = response.read()\n\nf = open(\"example.html\", \"w\")\nf.write(webContent.decode('utf-8'))\nf.close()", "line_number": null, "bug_type": null}
{"code": "def max_min(numbers):\n  '''returns a tuple containing highest and lowest values in a given list'''\n  return (max(numbers), min(numbers))", "line_number": null, "bug_type": null}
{"code": "def calculate_stats(numbers):\n    maximum = max(numbers)\n    minimum = min(numbers)\n    average = sum(numbers)/len(numbers)\n    return (maximum, minimum, average)", "line_number": null, "bug_type": null}
{"code": "def transform_to_matrix(lst):\n    matrix = [[lst[0], lst[1], lst[2]],\n              [lst[3], lst[4], 0],\n              [0, 0, 0]]\n    return matrix", "line_number": null, "bug_type": null}
{"code": "my_dict = dict()\n\n# ... existing program here\n\n# Create a dictionary of strings\nmy_dict['item1'] = ['one','two','three']\nmy_dict['item2'] = ['four','five','six']", "line_number": null, "bug_type": null}
{"code": "def fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b", "line_number": null, "bug_type": null}
{"code": "def sum_in_range(n1, n2):\n    return sum(range(n1, n2+1))\n\nprint(sum_in_range(3, 7))\n\n# Outputs:\n# 25", "line_number": null, "bug_type": null}
{"code": "class Animal:\n    def __init__(self, species, color, age):\n        self.species = species\n        self.color = color\n        self.age = age", "line_number": null, "bug_type": null}
{"code": "import random\n\nvalues = random.sample(range(11), 5)\nprint(values) // [5, 9, 3, 4, 1]", "line_number": null, "bug_type": null}
{"code": "def linear_search(arr, x): \n    for i in range(len(arr)): \n        if arr[i] == x: \n            return i \n    return -1", "line_number": null, "bug_type": null}
{"code": "def sum_even_elements(list):\n  sum = 0 \n  for item in list:\n    if item % 2 == 0:\n      sum += item\n  return sum", "line_number": null, "bug_type": null}
{"code": "y = 17\nx = (y - 7) / 4\nprint(\"x =\", x)", "line_number": null, "bug_type": null}
{"code": "class Celsius_to_Fahrenheit:\n    def __init__(self, celsius):\n        self.celsius = celsius\n    \n    def to_fahrenheit(self):\n        return (self.celsius * 9 / 5) + 32", "line_number": null, "bug_type": null}
{"code": "def limit_string(string):\n    \"\"\"Format the specified string to limit the number of characters to 6.\"\"\"\n    return string[:6]", "line_number": null, "bug_type": null}
{"code": "def add_two_numbers(a, b):\n    c = a + b\n    d = a - b\n    total = c + d + 1\n    print(total)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_random_number():\n\t# Generate a random number between 0 and 1\n    return random.random()", "line_number": null, "bug_type": null}
{"code": "def sqrt(x):\n    result = x\n    eps = 0.000001\n    while abs(result*result - x) > eps:\n        result = (result + x/result) / 2\n    return result", "line_number": null, "bug_type": null}
{"code": "prime_nums = [2, 3, 5, 7, 11]\nprint(\"The first 5 prime numbers are: \", prime_nums)", "line_number": null, "bug_type": null}
{"code": "for i in range(2, 101):\n    if i % 2 == 0:\n        print(i)", "line_number": null, "bug_type": null}
{"code": "import urllib.parse\n\ndef decode_url(url):\n parsed_url = urllib.parse.urlparse(url)\n return urllib.parse.parse_qs(parsed_url.query)\n\ndecode_url(\"http://www.example.com/?param1=hello&param2=world\")", "line_number": null, "bug_type": null}
{"code": "def functionA_opt(n):\n s = 0\n s = n*(n+1)*(n+2) // 6\n return s", "line_number": null, "bug_type": null}
{"code": "# Calculate the sum of two numbers\nnum1 = 12\nnum2 = 7\nsum = num1 + num2\n\n# Print the result\nprint('The sum of two numbers is ', sum)", "line_number": null, "bug_type": null}
{"code": "\"\"\"\nPython program to convert a name to uppercase\n\"\"\"\n\ndef to_uppercase(name):\n return name.upper()\n\nname = \"john\" \nprint(to_uppercase(name))", "line_number": null, "bug_type": null}
{"code": "def create_dict_squares(number):\n    squares_dict = {}\n\n    for i in range(1, number + 1):\n        squares_dict[i] = i**2\n\n    return squares_dict", "line_number": null, "bug_type": null}
{"code": "arr = [3, 4, 5]\nsum = 0\nfor i in arr:\n    sum = sum + i\n\naverage = sum / len(arr)\nprint(average)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef random_number():\n    return random.randint(1,100)\n\n# Testing\nprint(random_number())", "line_number": null, "bug_type": null}
{"code": "def mean(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total / len(numbers)", "line_number": null, "bug_type": null}
{"code": "class Person:\n\tdef __init__(self, name, age, address):\n\t\tself.name = name\n\t\tself.age = age\n\t\tself.address = address", "line_number": null, "bug_type": null}
{"code": "def extract_numbers(string):\n    numbers = []\n    for char in string:\n        if char.isdigit():\n            numbers.append(int(char))\n    return numbers", "line_number": null, "bug_type": null}
{"code": "d = { \"A\": 4, \"B\": 6, \"C\": 10 }", "line_number": null, "bug_type": null}
{"code": "def join_list_with_separator(list, separator):\n    joined_string = separator.join(list)\n    return joined_string", "line_number": null, "bug_type": null}
{"code": "def sort_numbers(numbers):\n    numbers.sort(reverse=True)\n    return numbers\n\nnumbers = [28, 5, 17, 10, 43]\n\nsorted_numbers = sort_numbers(numbers)\nprint(sorted_numbers)", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "line_number": null, "bug_type": null}
{"code": "def remove_duplicate_characters(string): \n result = \"\" \n  \n for i in range(len(string)): \n  if string[i] not in result: \n   result += string[i] \n  \n return result \n  \nprint(remove_duplicate_characters(\"tree traversal\"))", "line_number": null, "bug_type": null}
{"code": "def find_max(arr):\n    max_number = 0\n\n    for i in arr:\n        if i > max_number:\n            max_number = i\n    return max_number", "line_number": null, "bug_type": null}
{"code": "numbers = [1, 7, 8, 4, 9]\naverage = sum(numbers) / len(numbers)\nprint(average) # 5.6", "line_number": null, "bug_type": null}
{"code": "class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary", "line_number": null, "bug_type": null}
{"code": "sum = 0\nfor i in range(0,51):\n\tsum += i\n\nprint(\"The sum of the series is:\", sum)", "line_number": null, "bug_type": null}
{"code": "def sort_words(word_list):\n  word_list.sort(key = lambda x : x.lower())\n  return word_list", "line_number": null, "bug_type": null}
{"code": "def reverse_string(string):\n    return string[::-1]\n\nresult = reverse_string('Hello World')\nprint(result)", "line_number": null, "bug_type": null}
{"code": "class Animal:\n    def __init__(self, name):\n        self.name = name\n\nclass Cat(Animal):\n    def eat(self, food):\n        print(\"{} is eating {}!\".format(self.name, food))", "line_number": null, "bug_type": null}
{"code": "def isAnagram(string1, string2):\n s1 = sorted(string1)\n s2 = sorted(string2)\n \n return s1 == s2", "line_number": null, "bug_type": null}
{"code": "# Print out the powers of two from 2^0 to 2^10\nfor i in range(11):\n  print(2**i)", "line_number": null, "bug_type": null}
{"code": "import random\n\nrandom_list = [random.randint(0, 10) for _ in range(10)]\nunique_list = list(set(random_list))", "line_number": null, "bug_type": null}
{"code": "def check_strings_lengths(string_list):\n    string_length = len(string_list[0])\n\n    for string in string_list:\n        if len(string) != string_length:\n            return False\n\n    return True", "line_number": null, "bug_type": null}
{"code": "def repeat_string(string, n):\n     return [string]*n\n     \n# example\nprint(repeat_string(\"Hello\", 4)) \n# Output: ['Hello', 'Hello', 'Hello', 'Hello']", "line_number": null, "bug_type": null}
{"code": "def append_to_list (list_data, new_item):\n    list_data.append(new_item)\n    return list_data", "line_number": null, "bug_type": null}
{"code": "def max_list_element(list):\n    max_list_element = None\n    for element in list:\n        if max_list_element is None or max_list_element < element:\n            max_list_element = element\n    return max_list_element", "line_number": null, "bug_type": null}
{"code": "def print_n_elements(n, list):\n    for i in range(n):\n        print(list[i])", "line_number": null, "bug_type": null}
{"code": "def print_squares(N):\n    for x in range(1, N+1):\n        print(x*x)", "line_number": null, "bug_type": null}
{"code": "import random \ndef random_rgb():\n    r = random.randint(0,255)\n    g = random.randint(0,255)\n    b = random.randint(0,255)\n    return (r, g, b)", "line_number": null, "bug_type": null}
{"code": "list = [1,2,3,4,5]\n\nresult = list(filter(lambda x : x % 2 == 0 , list))\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(s):\n  s = s.lower()\n  return s == s[::-1]\n\nprint(is_palindrome(\"racecar\")) # True", "line_number": null, "bug_type": null}
{"code": "import random\n\nrandom_sequence = []\nfor _ in range(5):\n    random_sequence.append(random.randrange(0, 11))\n\nprint(random_sequence)", "line_number": null, "bug_type": null}
{"code": "def concat_and_capitalize(str1, str2):\n    result = str1 + str2\n    return result.capitalize()\n\nstr1 = 'python'\nstr2 = 'programming'\nprint(concat_and_capitalize(str1, str2))", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\nlength = 8\n\nalphabet = string.ascii_letters + string.digits\npassword = ''.join(random.choice(alphabet) for i in range(length))\n\nprint(\"Generated password:\", password)", "line_number": null, "bug_type": null}
{"code": "import re\n\nre_match = \"\\w+@\\w+\\.\\w+\"\nre_replace = \"<valid email>\"\n\nprint(re.sub(re_match, re_replace, \"my_email@example.com\"))", "line_number": null, "bug_type": null}
{"code": "def count_words(sentence):\n    words = sentence.split(' ')\n    return len(words)\n\nsentence = \"One two three four five\"\nword_count = count_words(sentence)\nprint(\"The number of words in the sentence is: \", word_count)", "line_number": null, "bug_type": null}
{"code": "def gcd(num1, num2): \n    if(num2 == 0): \n        return num1 \n    return gcd(num2, num1%num2)", "line_number": null, "bug_type": null}
{"code": "def area_of_circle(radius):\n    return 3.14 * (radius ** 2)\n\nif __name__ == '__main__':\n    radius = 5\n    print(area_of_circle(radius)) # 78.5", "line_number": null, "bug_type": null}
{"code": "def add_two_numbers():\n    num1 = int(input(\"Please enter a number: \"))\n    num2 = int(input(\"Please enter a another number: \"))\n    return num1 + num2", "line_number": null, "bug_type": null}
{"code": "def binary_to_decimal(binary):\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal", "line_number": null, "bug_type": null}
{"code": "def reverse_number(num):\n    rev = 0\n    while num > 0:\n        reminder = num%10\n        rev = (rev*10)+reminder\n        num = num//10\n    return rev", "line_number": null, "bug_type": null}
{"code": "def normalize(arr):\n   mean = sum(arr) / len(arr)\n   normalized_arr = [x - mean for x in arr]\n   return normalized_arr", "line_number": null, "bug_type": null}
{"code": "for i in range(1, 5):\n    for j in range(1, i+1):\n        print(i, end=\" \")\n    print()", "line_number": null, "bug_type": null}
{"code": "class Student: \n    def __init__(self, name, grade): \n        self.name = name \n        self.grade = grade \n  \n    def display(self): \n    \tprint(\"Name:\", self.name, \"Grade:\", self.grade)", "line_number": null, "bug_type": null}
{"code": "import sqlite3 \nconn = sqlite3.connect('Order.db')\nc = conn.cursor()\nc.execute(\"SELECT * FROM Orders WHERE OrderDate > '2018-12-31'\")\nresult = c.fetchall()\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def switch_order(a, b):\n  c = a\n  a = b\n  b = c\n  return a, b", "line_number": null, "bug_type": null}
{"code": "import re\n\nip_regex = re.compile(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$')", "line_number": null, "bug_type": null}
{"code": "def find_min(items):\n    min = float('inf')\n    for item in items:\n        if item < min:\n            min = item\n    return min", "line_number": null, "bug_type": null}
{"code": "s = input(\"Please enter a string: \")\nprint(\"The reverse of the string is: \" + s[::-1])", "line_number": null, "bug_type": null}
{"code": "import calendar\n\n# get the current month \ncurrent_month = calendar.month_name[calendar.datetime.now().month]\nprint('Current Month is %s' %current_month)", "line_number": null, "bug_type": null}
{"code": "class UserInformation:\n    def __init__(self, username, email, profile_picture):\n        self.username = username\n        self.email = email\n        self.profile_picture = profile_picture", "line_number": null, "bug_type": null}
{"code": "# create a dictionary\nmy_dict = {\"fruit\": \"apple\", \"color\": \"red\", \"size\": \"medium\"}\n\n# add a fourth item\nmy_dict[\"shape\"] = \"round\"\n\nprint(my_dict)", "line_number": null, "bug_type": null}
{"code": "arr = [[\"apple\", \"french fries\"],\n [\"banana\", \"rice\"],\n [\"carrot\", \"salad\"]]", "line_number": null, "bug_type": null}
{"code": "def find_common_elements(list1, list2):\n  common_elements = []\n  for i in list1: \n    if i in list2: \n        common_elements.append(i) \n  return common_elements", "line_number": null, "bug_type": null}
{"code": "def reverse_string(input_str):\n    reversed_str = \"\"\n    for i in range(len(input_str)-1,-1,-1):\n        reversed_str += input_str[i]\n    return reversed_str\n\nprint (reverse_string(\"Hello World!\"))", "line_number": null, "bug_type": null}
{"code": "def containsTwoDistinctChars(string):\n    distinctChars = set()\n    for char in string:\n        distinctChars.add(char)\n    \n    return len(distinctChars) >= 2\n\nprint(containsTwoDistinctChars(\"AbcdABC\"))", "line_number": null, "bug_type": null}
{"code": "from flask import Flask \n\napp = Flask(__name__) \n  \n@app.route('/') \ndef home(): \n    return 'Welcome!'\n  \nif __name__ == '__main__': \n    app.run()", "line_number": null, "bug_type": null}
{"code": "def celsius_to_fahrenheit(celsius):\n    return celsius * 9 / 5 + 32 \n\ndef fahrenheit_to_celsius(fahrenheit):\n    return (fahrenheit - 32) * 5 / 9", "line_number": null, "bug_type": null}
{"code": "def is_prime(number):\n    if number <= 1:\n        return False\n\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True", "line_number": null, "bug_type": null}
{"code": "def max_length(list1): \n\treturn max(list1, key=len) \n\nlist1 = ['cat', 'primate', 'monkey']\nprint(\"String with maximum length is : \", max_length(list1))", "line_number": null, "bug_type": null}
{"code": "def multiply_2_numbers(x, y):\n    product = 0\n    for i in range(y):\n        product += x\n    return product", "line_number": null, "bug_type": null}
{"code": "def transformations(arr):\n    result = [x*2 for x in arr if x%2 != 0]\n    result = [x-3 for x in result]\n    return result", "line_number": null, "bug_type": null}
{"code": "from flask import Flask\nimport datetime\n\napp = Flask(__name__)\n\n@app.route('/date_time')\ndef get_date_time():\n   return datetime.datetime.now()\n\nif __name__ == '__main__':\n    app.run()", "line_number": null, "bug_type": null}
{"code": "def compound_interest(principal, rate, time):\n    return principal * (1 + rate)**time\n\nresult = compound_interest(1000, 0.03, 5)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "total = 0\nfor num in [1, 4, 9, 16, 25]:\n  total += num\nprint(total)", "line_number": null, "bug_type": null}
{"code": "# Read file\nwith open('text_document.txt', 'r') as file:\n    data = file.read()\n\n# Calculate number of words   \nword_count = len(data.split())\n\n# Output\nprint(f\"Number of words: {word_count}\")", "line_number": null, "bug_type": null}
{"code": "def combine_strings(str1, str2):\n return [str1 + str2]\n\ncombined_string = combine_strings(\"Hello \", \"World!\")\nprint(combined_string) # [\"Hello World!\"]", "line_number": null, "bug_type": null}
{"code": "def non_repeating_character(string):\n    for c in string:\n        if string.count(c) == 1:\n            return c\n    return 'No result'\n\nprint(non_repeating_character('Hello, world!'))", "line_number": null, "bug_type": null}
{"code": "def sort_list(lst):\n  lst.sort(key = lambda x: x[1])\n  return lst", "line_number": null, "bug_type": null}
{"code": "def prime_factors(n):\n    factors = []\n    i = 2\n    while n > 1:\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n        i += 1\n    return factors", "line_number": null, "bug_type": null}
{"code": "def find_divisible(n):\n  result = []\n  for i in range(1, n+1):\n    if i % 7 == 0:\n      result.append(i)\n  return result", "line_number": null, "bug_type": null}
{"code": "def reverse_string(s): \n    string = \"\" \n    for i in s: \n        string = i + string \n    return string", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generatePassword():\n    charSet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%&*'\n    password = ''\n    for x in range(8):\n        password += random.choice(charSet)\n    return password", "line_number": null, "bug_type": null}
{"code": "def divide(num1, num2):\n    try:\n        result = num1 / num2\n        print(\"Result is {}\".format(result))\n    except:\n        print(\"Divide by zero error!\")", "line_number": null, "bug_type": null}
{"code": "arr = [1,3,7,9,10]\n\ndef print_array(arr):\n    '''This function prints the elements of an array'''\n    for ele in arr:\n        print(ele)\n\nprint_array(arr)", "line_number": null, "bug_type": null}
{"code": "def stars(n): \n    for i in range(1, n + 1): \n        for j in range(1, i + 1): \n            print(\"* \", end=\"\")  \n        print()", "line_number": null, "bug_type": null}
{"code": "def calculate_hash(s):\n    hash_value = 0\n    for c in s:\n        hash_value = (hash_value * 7 + ord(c)) % 8\n    return hash_value", "line_number": null, "bug_type": null}
{"code": "def capitalize_words(string): \n    words = string.split(' ') \n    capitalized_words = [word.capitalize() for word in words] \n    return ' '.join(capitalized_words)", "line_number": null, "bug_type": null}
{"code": "def parse(input):\n    output = []\n    for d in input:\n        for key, value in d.items():\n            output.append({key: value})\n    return output", "line_number": null, "bug_type": null}
{"code": "def count_vowels(string):\n    vowel_count = 0\n    vowels = 'aeiou'\n    for letter in string:\n        if letter in vowels:\n            vowel_count += 1\n    return vowel_count", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n < 1:\n        return 1\n    else:\n        return n * factorial(n - 1)", "line_number": null, "bug_type": null}
{"code": "num_list = [2, 7, 4, 10, 5]\n            \n# Replace the line below\ntotal = 0       \nfor num in num_list:\n    total += num\n\nprint(total)", "line_number": null, "bug_type": null}
{"code": "class ListOfInts:\n    def __init__(self, numbers):\n        self.numbers = numbers\n    \n    def get_list(self):\n        return self.numbers", "line_number": null, "bug_type": null}
{"code": "for i in range(1,11):\n    for j in range(1, 11):\n        print(f'{i} * {j} = {i*j}')\n    print()", "line_number": null, "bug_type": null}
{"code": "def toBinary(n): \n    if (n > 1): \n        toBinary(n//2) \n    print(n%2,end = '') \n \n# Driver Code \nnum = 8\ntoBinary(num)", "line_number": null, "bug_type": null}
{"code": "def reverse_string(string): \n  string = string[::-1] \n  return string \n  \nprint(reverse_string('hello'))", "line_number": null, "bug_type": null}
{"code": "sentence = \"Hooray! Great!\"\nwords = sentence.split(' ')\nfor word in words:\n print(word)", "line_number": null, "bug_type": null}
{"code": "def shallow_copy_dict(original_dict):\n    copies_dict = {}\n    for key, value in original_dict.items():\n        copies_dict[key] = value\n    return copies_dict", "line_number": null, "bug_type": null}
{"code": "def to_ascii(arr):\n    res = []\n    for c in arr:\n        res.append(ord(c))\n    return res\n\nprint(to_ascii(['a', 'b', 'c', 'd']))", "line_number": null, "bug_type": null}
{"code": "def concatenate_string(string1, string2):\n    return string1 + string2\n\nstring1 = \"Hello \"\nstring2 = \"World!\"\n\nconcatenated_string = concatenate_string(string1, string2)\nprint(concatenated_string)", "line_number": null, "bug_type": null}
{"code": "def first_letter_string(input_str):\n    output_str = \"\"\n\n    for w in input_str.split():\n        output_str += w[0]\n\n    return output_str\n\ninput_str = \"This is a sample string\"\nprint(first_letter_string(input_str))", "line_number": null, "bug_type": null}
{"code": "def remove_all(num, lst):\n    result = []\n    for i in range(len(lst)):\n        if lst[i] != num:\n            result.append(lst[i])\n    return result", "line_number": null, "bug_type": null}
{"code": "string = \"Hello World   \"\n\nno_space_string = string.replace(' ', '')\n\nprint(no_space_string)", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n    \n    return n*factorial(n-1)\n\nfact = factorial(5)\nprint('Factorial of 5 is ' + str(fact))", "line_number": null, "bug_type": null}
{"code": "class Queue:\n    def __init__(self):\n        self.queue = []\n\n    def enqueue(self, element):\n        self.queue.append(element)\n\n    def dequeue(self):\n        return self.queue.pop(0)", "line_number": null, "bug_type": null}
{"code": "import textblob\n\ntext = \"The movie was great! I really enjoyed watching it.\"\n\nblob = textblob.TextBlob(text)\nsentiment = blob.sentiment\n\nprint(\"Sentiment score:\", sentiment.polarity)", "line_number": null, "bug_type": null}
{"code": "def fibonacci(x):\n fib_numbers = [1,1]\n for i in range(2,x):\n  fib_numbers.append(fib_numbers[i-1] + fib_numbers[i-2])\n return fib_numbers", "line_number": null, "bug_type": null}
{"code": "from math import factorial \n  \ndef calculate_permutations(arr): \n    n = len(arr) \n    return factorial(n) \n  \nresult = calculate_permutations([2, 1, 3])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def indices_replace(string):\n  string_indices = ''\n  for index, value in enumerate(string):\n    string_indices += str(index)\n  return string_indices", "line_number": null, "bug_type": null}
{"code": "corpus = \"the cat in the hat\"\n\nwords = corpus.lower().split()\nbag_of_words = set(words)\n\nprint(bag_of_words)\n# Output: {'the', 'in', 'cat', 'hat'}", "line_number": null, "bug_type": null}
{"code": "import requests\nfrom bs4 import BeautifulSoup\n\ndef web_crawler(url):\n    page=requests.get(url)\n    soup=BeautifulSoup(page.content, 'html.parser')\n    for link in soup.findAll('a'):\n        print(link.get('href'))", "line_number": null, "bug_type": null}
{"code": "for num in range(1,11):\n    if num % 2 != 0:\n        print(num)", "line_number": null, "bug_type": null}
{"code": "def create_dict(keys, values):\n    return {key: val for key, val in zip(keys, values)}", "line_number": null, "bug_type": null}
{"code": "def area_of_triangle(base, height):\n return 0.5 * base * height\n\n# Calculate the area of triangle\na = area_of_triangle(5, 4)\nprint('The area of the triangle is: ', a)", "line_number": null, "bug_type": null}
{"code": "def reverse_string(s):\n    return s[::-1]\n\nif __name__ == '__main__':\n    s = 'Hello World!'\n    print(reverse_string(s))", "line_number": null, "bug_type": null}
{"code": "user_input = []\n\nwhile True:\n user_in = input(\"Please enter your input: \")\n user_input.append(user_in)\n \n print(user_input)", "line_number": null, "bug_type": null}
{"code": "import pyautogui\n\ndef get_mouse_pos():\n    x, y = pyautogui.position()\n    return (x, y)", "line_number": null, "bug_type": null}
{"code": "def find_max(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max", "line_number": null, "bug_type": null}
{"code": "def is_in_range(num, a, b):\n    if num >= a and num <= b:\n        return True\n    else:\n        return False\n\nresult = is_in_range(4, 2, 4)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "for num in range(0, 20, 2):\n    if num < 10:\n        print(num, end=' ') \n# Output: 0 2 4 6 8", "line_number": null, "bug_type": null}
{"code": "def print_names_and_ages(people):\n    for person in people:\n        print(\"Name: {}\\nAge: {}\".format(person['name'], person['age']))", "line_number": null, "bug_type": null}
{"code": "from random import shuffle\n\nsequence = [1, 2, 3]\nshuffle(sequence)\nprint(sequence)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_random_numbers():\n  results = []\n  for i in range(10):\n    results.append(random.randint(1, 10))\n\n  return results\n  \nif __name__ == \"__main__\":\n  print(generate_random_numbers())", "line_number": null, "bug_type": null}
{"code": "import random \n  \n# Generates a random integer between 0 and 1000 \nx = random.randint(0,1000) \n  \nprint(x)", "line_number": null, "bug_type": null}
{"code": "def check_substring(string1, string2):\n    if string2 in string1:\n        return True\n    else:\n        return False\n\n# example\nresult = check_substring(\"Hello world!\", \"world\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def reverseString(s): \n    return s[::-1] \n  \ndef capitalizeString(s):\n    return s.capitalize()", "line_number": null, "bug_type": null}
{"code": "def sort_string_list(strings):\n  strings.sort()\n  return strings\n\nmy_list = ['cat', 'dog', 'apple', 'zebra']\nprint(sort_string_list(my_list))", "line_number": null, "bug_type": null}
{"code": "def min(num1, num2):\n    if num1 < num2:\n        return num1\n    else:\n        return num2\n\nprint(min(2, 5))", "line_number": null, "bug_type": null}
{"code": "str = \"Hello, World!\"\n\n# loop to iterate through string\nfor i in range(len(str)-1, -1, -1):\n  print(str[i],end=\"\")\n\nprint()", "line_number": null, "bug_type": null}
{"code": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)", "line_number": null, "bug_type": null}
{"code": "def is_divisible_by_5(number):\n    if (number % 5 == 0):\n        return True\n    else:\n        return False\n    \nnumber = 10\nis_divisible_by_5(number)", "line_number": null, "bug_type": null}
{"code": "user_input = input(\"Enter a string: \")\nlength = len(user_input)\nprint(\"The length of the string is: \", length)", "line_number": null, "bug_type": null}
{"code": "my_list = [1, 2, 3, 4, 5]\n\nif len(my_list) > 0:\n  element = my_list[0]\nelse:\n  element = None", "line_number": null, "bug_type": null}
{"code": "def find_even_numbers(numbers):\n    even_numbers = filter(lambda num: num % 2 == 0, numbers)\n    return list(even_numbers)", "line_number": null, "bug_type": null}
{"code": "def calculate_time(speed, distance):\n time = distance / speed \n return time \n\nprint(calculate_time(100, 1000)) \n# Output: 10.0", "line_number": null, "bug_type": null}
{"code": "def get_words(input_str):\n    return input_str.split()\n\nresult = get_words(\"The quick brown fox jumps over the lazy dog\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def search_value(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1", "line_number": null, "bug_type": null}
{"code": "def to_uppercase(string):\n    return string.upper()\n\nprint(to_uppercase(\"hello World\"))\n\n# Outputs:\n# HELLO WORLD", "line_number": null, "bug_type": null}
{"code": "def checkKeyExists(dictionary, key):\n    return key in dictionary.keys()\n\ndict = {\n    \"Name\":\"John\",\n    \"Age\":25\n}\nString = \"Name\"\n\nprint(checkKeyExists(dict, String))", "line_number": null, "bug_type": null}
{"code": "def max(num1, num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2", "line_number": null, "bug_type": null}
{"code": "student_data = [\n    {\n        'name': 'John',\n        'id': 105, \n        'subjects': {\n            'Science': 90\n        }\n    }\n]", "line_number": null, "bug_type": null}
{"code": "d = {1: [1], 2: [1,2], 3: [1,2,3]}\nfor k,v in d.items():\n    print(k,v)", "line_number": null, "bug_type": null}
{"code": "def checkNum(s): \n    flag = True\n    for i in s: \n        if i.isdigit() == False: \n            flag = False\n            break\n  \n    return flag", "line_number": null, "bug_type": null}
{"code": "import os\n\ndef list_directory_contents(directory_path):\n    contents = os.listdir(directory_path)\n    return contents\n\ndirectory = \"your_directory_path\"\ncontents = list_directory_contents(directory)\nprint(contents)", "line_number": null, "bug_type": null}
{"code": "def order_by_length(input_list):\n  return sorted(input_list, key=len, reverse=True)\n  \ninput_list = [\"Hello\", \"World\", \"This\", \"is\", \"a\", \"test\"]\nprint(order_by_length(input_list))", "line_number": null, "bug_type": null}
{"code": "def str_to_int(input_str):\n    num = 0\n    for char in input_str:\n        num = num * 10 + ord(char) - ord('0')\n    return num", "line_number": null, "bug_type": null}
{"code": "keys = dict.keys()\nfor i in keys:\n    value = dict[i]\n    print(i, \":\", value)", "line_number": null, "bug_type": null}
{"code": "def multiplesOf7(number): \n    for i in range(1,number+1): \n        if(i % 7 == 0): \n            print(i, end =\" \")", "line_number": null, "bug_type": null}
{"code": "def reverse_str(str):\n    return str[::-1]\n\n# Example\nprint(reverse_str(\"Hello World!\"))  # Prints !dlroW olleH", "line_number": null, "bug_type": null}
{"code": "def average(a, b):\n    return (a+b)/2\n\nprint(average(4, 8))", "line_number": null, "bug_type": null}
{"code": "strings = ['Python', 'Java', 'C++', 'C']\n\nstrings.sort(reverse=True)\n\nprint(strings) # ['Python', 'Java', 'C++', 'C']", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_password(length):\n    chars=string.ascii_uppercase + string.ascii_lowercase + string.digits\n    return ''.join(random.choice(chars) for i in range(length))\n\nprint(generate_password(8))", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_password():\n password_characters = string.ascii_letters + string.digits \n password = ''.join(random.choice(password_characters) for i in range(6))\n return password\n\nprint(generate_password())", "line_number": null, "bug_type": null}
{"code": "import random\n\nrandom_array = random.sample(range(10,20), 50)\nprint(random_array)", "line_number": null, "bug_type": null}
{"code": "def find_max(list):\n    max_value = list[0]\n    for value in list:\n        if value > max_value:\n            max_value = value\n    return max_value", "line_number": null, "bug_type": null}
{"code": "[i for i in range (1, 10) if i % 2 != 0]", "line_number": null, "bug_type": null}
{"code": "inputList = [\"Hello\", \"World\"]\nnewString = \"Hi\"\n\noutputList = []\n\nfor string in inputList:\n    outputList.append(string)\n\noutputList.append(newString)\n\nprint(outputList)", "line_number": null, "bug_type": null}
{"code": "import string\nfrom random import choice\n\n''.join(choice(string.ascii_letters) for _ in range(10))", "line_number": null, "bug_type": null}
{"code": "strings = ['hello!', 'hey,', 'where, are, you?', 'I am here']\nstrings = [s.replace(\",\", \"\").replace(\"?\", \"\").replace(\"!\", \"\") for s in strings]\nprint(strings)", "line_number": null, "bug_type": null}
{"code": "import requests\n\n# Send GET request\nr = requests.get('https://reqres.in/api/users')\n\n# Get response\nif r.status_code == 200:\n print(r.text)", "line_number": null, "bug_type": null}
{"code": "def sum_digits(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n\nresult = sum_digits(323)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "import re\n\ndef validate_email(email):\n  email_regex = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,4}$'\n  return re.match(email_regex, email) != None", "line_number": null, "bug_type": null}
{"code": "x = [45, 65]\ntotal = 0\nfor i in range(len(x)):\n  total += x[i]\n  average = total / len(x)\n\nprint(\"Average of the numbers is:\", average)", "line_number": null, "bug_type": null}
{"code": "def is_abundant(number):\n    sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum > number", "line_number": null, "bug_type": null}
{"code": "import numpy as np\n\nx = np.random.randint(0,5,(5,5))\nprint(x)", "line_number": null, "bug_type": null}
{"code": "import tkinter as tk\n \nroot = tk.Tk()\n\n# Create greeting label\ngreeting = tk.Label(text='Hello World!')\ngreeting.pack()\n\ntk.mainloop()", "line_number": null, "bug_type": null}
{"code": "def extract_numbers(s): \n    return [int(el) for el in s.split(',') if el.lstrip('-').isnumeric()]", "line_number": null, "bug_type": null}
{"code": "# Detect the intent of the email\nintent = \"lead\"\n\n# Label the email\nlabel = \"Lead\"", "line_number": null, "bug_type": null}
{"code": "def add_numbers(a, b):\n  print(a + b)\n\nadd_numbers(3, 2)", "line_number": null, "bug_type": null}
{"code": "def compare_strings(str1, str2):\n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    return str1 == str2", "line_number": null, "bug_type": null}
{"code": "from random import shuffle \n\ndef random_permutation(lst): \n    shuffle(lst) \n    return lst", "line_number": null, "bug_type": null}
{"code": "import json\n\njson_string = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\npython_dict = json.loads(json_string)\n\nprint(python_dict)", "line_number": null, "bug_type": null}
{"code": "def flatten_list(list_of_lists):\n    flattened = []\n    for sub_list in list_of_lists:\n        for item in sub_list:\n            flattened.append(item)\n    return flattened", "line_number": null, "bug_type": null}
{"code": "from itertools import permutations\n\nstrings = ['AB', 'CD']\n\nperm = permutations(strings)\n\nfor string in list(perm):\n    print(string)", "line_number": null, "bug_type": null}
{"code": "class Student:\n    def __init__(self, firstName, lastName, age):\n        self.firstName = firstName\n        self.lastName = lastName\n        self.age = age", "line_number": null, "bug_type": null}
{"code": "from datetime import date\n\nstart_date = date(2020, 6, 5)\nend_date = date(2020, 6, 17)\ndelta = end_date - start_date\nprint(delta.days)", "line_number": null, "bug_type": null}
{"code": "class Car:\n    def __init__(self, year, make):\n        self.year = year\n        self.make = make", "line_number": null, "bug_type": null}
{"code": "customer_data = {\n    'Name': 'John Smith',\n    'Address': '123 Main Street, Anytown, CA 12345',\n    'Phone': '555-555-5555'\n}", "line_number": null, "bug_type": null}
{"code": "def remove_letter(word, letter):\n    new_word = ''\n    for char in word:\n        if char != letter:\n            new_word += char\n    return new_word \n\nprint(remove_letter('Hello World!', 'o'))", "line_number": null, "bug_type": null}
{"code": "def books_query():\n    books_query = '''\n    query {\n        books {\n            id\n            title\n            author\n            published_date\n        }\n    }\n    '''\n    return books_query", "line_number": null, "bug_type": null}
{"code": "def add_numbers(a, b):\n try:\n  sum = a + b\n except:\n  print(\"Error: Could not compute the sum of the numbers\")\n  return None\n else:\n  return sum", "line_number": null, "bug_type": null}
{"code": "import string\n\ndef remove_punctuation(sentence):\n    translator = str.maketrans('', '', string.punctuation)\n    return sentence.translate(translator)\n\n#Test\nprint(remove_punctuation(\"This is a sentence; with, punctuation.\"))", "line_number": null, "bug_type": null}
{"code": "def list_to_binary(nums):\n    binary = []\n    for num in nums:\n        binary.append(bin(num))\n    return binary\n\nresult = list_to_binary([3, 8, 6])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "celcius = 25\nfahrenheit = 77\nprint (\"{0}\u00b0 celcius is {1}\u00b0 fahrenheit\".format(celcius, fahrenheit))", "line_number": null, "bug_type": null}
{"code": "class Contact:\n    def __init__(self, name, email, phone):\n        self.name = name\n        self.email = email\n        self.phone = phone", "line_number": null, "bug_type": null}
{"code": "def modify_solution(solution, requirements):\n code_lines = solution.splitlines()\n code_lines.pop()\n code_lines.append(\"item_index = item_list.index(new_item)\")\n code_lines.append(\"return item_index\")\n return \"\\n\".join(code_lines)", "line_number": null, "bug_type": null}
{"code": "def is_even(number):\n    if (number % 2 == 0):\n        return True\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "def reverse_list(lst): \n    return lst[::-1] \n  \nlst = [1, 3, 5, 6, 10] \nprint(reverse_list(lst))", "line_number": null, "bug_type": null}
{"code": "my_list = [\"Apple\", \"Pear\", \"Banana\", \"Orange\"]\n\nfor item in reversed(my_list):\n print(item)", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n    else: \n        return n * factorial(n-1)", "line_number": null, "bug_type": null}
{"code": "user_preferences = {\n    'language': 'english',\n    'font_size': 12,\n    'background_color': '#FFFFFF'\n}", "line_number": null, "bug_type": null}
{"code": "def unique_list(lst):\n    unique = []\n    for item in lst:\n        if item not in unique:\n            unique.append(item)\n    return unique", "line_number": null, "bug_type": null}
{"code": "def generate(lst):\n    res = []\n    for i in range(1, len(lst) + 1):\n        for j in range(len(lst) - i + 1):\n            res.append(lst[j: j + i])\n    return res", "line_number": null, "bug_type": null}
{"code": "def sumOfList(list):\n   if len(list) == 1:\n       return list[0]\n   else:\n       return list[0] + sumOfList(list[1:])", "line_number": null, "bug_type": null}
{"code": "def remove_item(arr, item):\n    return [i for i in arr if i != item]\n\narr = [1,2,3,4]\nnew_arr = remove_item(arr, 3)\nprint(new_arr)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef roll_dice():\n    dice = random.randint(1, 8)\n    return dice\n\ndice = roll_dice()\nprint(f\"You rolled a {dice}\")", "line_number": null, "bug_type": null}
{"code": "def sum_of_digits(n):\n  result = 0\n  while (n > 0):\n    result += n % 10;\n    n //= 10;\n  return result", "line_number": null, "bug_type": null}
{"code": "def encrypt(string):\n    encrypted_string = \"\"\n    for i in range(len(string)):\n        char = string[i]\n        encrypted_string += chr(ord(char)+2)\n    return encrypted_string", "line_number": null, "bug_type": null}
{"code": "def endswith(s, substring): \n    return s.endswith(substring) \n\n\ns = 'Hello World'\nsubstring = 'ld'\nprint(endswith(s, substring)) # prints True", "line_number": null, "bug_type": null}
{"code": "import random \nimport string \n\nlength = 8\nrandom_str = ''.join(random.choices(string.ascii_letters + string.digits, k = length)) \nprint(random_str)", "line_number": null, "bug_type": null}
{"code": "import statistics \nsequence = [3, -2, 4, 7, 10, 12, 11, -4, 8]\nmedian = statistics.median(sequence) \nprint(median) # Output: 7", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_random_number(): \n    random_number = random.randint(100000, 999999) \n    return random_number\n\ngeneratedNumber = generate_random_number() \nprint(generatedNumber)", "line_number": null, "bug_type": null}
{"code": "def delete_every_second_word(input):\n    words = input.split()\n    output = \"\"\n    \n    for i, word in enumerate(words):\n        if i % 2 == 0:\n            output += word + \" \"\n    \n    return output.strip()", "line_number": null, "bug_type": null}
{"code": "import requests\nurl = 'http://www.example.com'\nresponse = requests.get(url)\nif response.status_code == 200:\n    html_contents = response.content\n    # Parse the html_contents and store the data", "line_number": null, "bug_type": null}
{"code": "def smallest_number(arr):\n    min_number = arr[0]\n    for num in arr[1:]:\n        if num < min_number:\n            min_number = num\n    return min_number", "line_number": null, "bug_type": null}
{"code": "def sort_tuples_by_second_element(tuples):\n  return sorted(tuples, key=lambda tup: tup[1])", "line_number": null, "bug_type": null}
{"code": "my_list = [1, 2, 3, 4, 5]\n\nmy_array = []\n\nfor number in my_list:\n    my_array.append(number)\n\nprint(my_array)", "line_number": null, "bug_type": null}
{"code": "def my_function(values):\n    sorted_values = sorted(values)\n    return sorted_values\n\nif __name__ == \"__main__\":\n    values = [int(value) for value in input().split(',')]\n    print(my_function(values))", "line_number": null, "bug_type": null}
{"code": "words = ['cat', 'dog', 'bird', 'fish']\n\nsorted_words = sorted(words)\n\nprint(sorted_words)", "line_number": null, "bug_type": null}
{"code": "def sum_digits(n):\n    num_str = str(n)\n    total = 0\n    for digit in num_str:\n        total += int(digit)\n    return total", "line_number": null, "bug_type": null}
{"code": "def string_to_list(string):\n    char_list = []\n    for char in string:\n        char_list.append(char)\n    return char_list", "line_number": null, "bug_type": null}
{"code": "def display_first_last_elements(lst):\n    print(\"First element of the list:\", lst[0])\n    print(\"Last element of the list:\", lst[-1])", "line_number": null, "bug_type": null}
{"code": "def is_armstrong_number(num):\n    digits_sum = 0\n    num_string = str(num)\n    for digit in num_string:\n        digits_sum += int(digit)**len(num_string)\n    return digits_sum == num", "line_number": null, "bug_type": null}
{"code": "import matplotlib.pyplot as plt\n \n# Data points\ndata = [5, 8, 9, 10, 12]\n \n# Create bar chart\nplt.bar(range(len(data)), data)\n \n# Show bar chart\nplt.show()", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_random_number(min_value, max_value):\n    return random.randint(min_value, max_value)", "line_number": null, "bug_type": null}
{"code": "class MyClass:\n    def FirstMethod(self):\n        pass\n    def SecondMethod(self):\n        pass", "line_number": null, "bug_type": null}
{"code": "def contains_punctuation(string):\n    for character in string:\n        if character in string.punctuation:\n            return True\n    return False\n\nresult = contains_punctuation('Hello world!')\nprint(result)", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef random_string():\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(10))\n\nmy_string = random_string()\nprint(my_string)", "line_number": null, "bug_type": null}
{"code": "def average(k):\n    sum = 0\n    for i in range(1, k+1):\n        sum += i\n\n    return sum / k", "line_number": null, "bug_type": null}
{"code": "def remove_non_letter_characters(s): \n    return \"\".join(e for e in s if e.isalpha() or e == \" \") \n      \ns = 'Hello $% World'\nprint(remove_non_letter_characters(s))", "line_number": null, "bug_type": null}
{"code": "words = ['these', 'are', 'some', 'words']\nwords = [word.capitalize() for word in words]", "line_number": null, "bug_type": null}
{"code": "def twoNumberSum(list, k):\n  seen = set()\n  for num in list:\n    if k-num in seen:\n      return [num, k-num]\n    else:\n      seen.add(num)\n  return []", "line_number": null, "bug_type": null}
{"code": "def reverse_string(string):\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string", "line_number": null, "bug_type": null}
{"code": "def print_table(n):\n    for i in range(1, 11):\n        print('{0} x {1} = {2}'.format(n ,i , n*i))\n\nprint_table(4)", "line_number": null, "bug_type": null}
{"code": "def sort_dict_by_key(d):\n    \"\"\"Sort a dictionary by key.\"\"\"\n    return {k: d[k] for k in sorted(d)}", "line_number": null, "bug_type": null}
{"code": "import numpy as np\nimport pandas as pd\n\n# Load the data\ndata = np.load('data.npy')\n\n# Create the pandas DataFrame\ndf = pd.DataFrame(data)", "line_number": null, "bug_type": null}
{"code": "def split_string(s, char):\n    new_list = s.split(char)\n    return new_list\n\nresult = split_string(\"apple-banana-orange\", \"-\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def sum_numbers(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total", "line_number": null, "bug_type": null}
{"code": "class Student:\n    def __init__(self, name, age, gpa):\n        self.name = name\n        self.age = age\n        self.gpa = gpa", "line_number": null, "bug_type": null}
{"code": "x = 0\n\nwhile x < 10:\n    x = x + 2\n    if x == 4:\n        continue\n    print(x)", "line_number": null, "bug_type": null}
{"code": "def compare_dictionaries(dict1, dict2):\n    common_elements = []\n    for key1 in dict1:\n        if key1 in dict2:\n            common_elements.append(key1)\n    return common_elements", "line_number": null, "bug_type": null}
{"code": "weight_pounds = 1\nweight_kilograms = weight_pounds/2.2\nprint(\"Weight in kilograms is:\", weight_kilograms)", "line_number": null, "bug_type": null}
{"code": "def fibonacci(n):\n a, b = 0, 1\n for i in range(n):\n  a, b = b, a + b\n return a\n \nfor i in range(10):\n print(fibonacci(i))", "line_number": null, "bug_type": null}
{"code": "def count_char(string, char): \n  \n    count = 0\n    for i in string: \n        if(i == char): \n            count = count + 1\n  \n    return count", "line_number": null, "bug_type": null}
{"code": "def multiply_by_int(array, int):\n    new_array = []\n    for elem in array:\n        new_array.append(elem * int)\n    return new_array", "line_number": null, "bug_type": null}
{"code": "def area_circle (radius):\n    return 3.14159 * (radius ** 2)\n\n# Test\nprint(area_circle(3.5)) # prints 38.48685", "line_number": null, "bug_type": null}
{"code": "def calculate(expr):\n    return eval(expr)\n\nresult = calculate(\"4 + 7\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def find_negatives(l):\n  negative_numbers = []\n  for num in l:\n    if num < 0:\n      negative_numbers.append(num)\n  print(negative_numbers)\n\nfind_negatives(list) # prints [-3, -9]", "line_number": null, "bug_type": null}
{"code": "def add(nums):\n    return nums[0] + nums[1]\n\nprint(add([5, 10]))  #Prints 15", "line_number": null, "bug_type": null}
{"code": "def printCommonChars(str1, str2):\n    commonChars = ''\n    for char in str1:\n        if char in str2:\n            commonChars += char\n    \n    print(commonChars)\n\nprintCommonChars('Hello','World')", "line_number": null, "bug_type": null}
{"code": "string = 'Hello world'\n\ncount = len(string)\n\nprint(\"Length of the string is\", count)", "line_number": null, "bug_type": null}
{"code": "def usd_to_euro(amount):\n  euro = amount * 0.9\n  print(amount, \"USD is equal to\", euro, \"Euros.\")\n  \nusd_to_euro(12.5)", "line_number": null, "bug_type": null}
{"code": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def getInfo(self):\n        return \"Name: {}, Age: {}\".format(self.name, self.age)", "line_number": null, "bug_type": null}
{"code": "import json\n\ndef parse_json(json_obj):\n    json_dict = json.loads(json_obj)\n    return json_dict", "line_number": null, "bug_type": null}
{"code": "mystring = \"1,2,3,4,5,6,7,8,9\"\n\nnumbers = mystring.split(\",\")\nfor num in numbers:\n    print(int(num))", "line_number": null, "bug_type": null}
{"code": "def avg(nums):\n    return sum(nums) / len(nums)\n\nnums = [1, 5, 8, 10]\nprint(avg(nums))", "line_number": null, "bug_type": null}
{"code": "from collections import Counter\n\ninput = \"Python is a great programming language\"\nwords = input.split()\n\ncounts = Counter(words)\n\nfor word, count in counts.most_common(5):\n    print(word, count)", "line_number": null, "bug_type": null}
{"code": "def calculate_volume_rectangular_prism(length, width, height):\n    return length * width * height;", "line_number": null, "bug_type": null}
{"code": "def count_element_occurrence(lst, target):\n count = 0\n for element in lst:\n     if element == target:\n         count += 1\n return count", "line_number": null, "bug_type": null}
{"code": "# This program to calculate sum of first n numbers\ndef sumN(n): \n    sum = n * (n + 1) // 2\n    return sum\n\nprint(sumN(100))", "line_number": null, "bug_type": null}
{"code": "def kms_to_miles(kms):\n  miles = kms / 1.609\n  return miles", "line_number": null, "bug_type": null}
{"code": "my_list = [1,2,3,4,5]\n\nsquares_dictionary = {}\n\nfor x in my_list:\n  squares_dictionary[x] = x**2\n\nprint(squares_dictionary)", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "line_number": null, "bug_type": null}
{"code": "def add(x, y):\n    # assert y is not zero\n    assert y != 0, \" y must not be zero!\"\n    z = x + y\n    return z", "line_number": null, "bug_type": null}
{"code": "for i in range(0, 101): \n    if (i % 2 == 0): \n        print(i)", "line_number": null, "bug_type": null}
{"code": "def filter_odd(list):\n    return [num for num in list if num % 2 == 0]", "line_number": null, "bug_type": null}
{"code": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def __str__(self):\n        return f\"Name: {self.name}\\nAge: {self.age}\"", "line_number": null, "bug_type": null}
{"code": "name = {\n    \"Harry\"\n}\nage = {\n    23\n}\ncountry = {\n    \"India\"\n}\n\ndata_list = [name, age, country]\n\nfor item in data_list:\n    print(item)", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(5))", "line_number": null, "bug_type": null}
{"code": "unsorted_list = [52, 34, 12, 33, 16]\n\nsorted_list = sorted(unsorted_list)\n\nprint(sorted_list) # prints [12, 16, 33, 34, 52]", "line_number": null, "bug_type": null}
{"code": "def countChars(firstStr, secondStr):\n    combinedStr = firstStr + secondStr\n    return len(combinedStr)", "line_number": null, "bug_type": null}
{"code": "d = {} \n  \n# Let us add 10 key-value pairs to dictionary \nfor i in range(1,11): \n    d[i] = i ** 2 \n  \n# Print the dictionary items \nprint(d.items())", "line_number": null, "bug_type": null}
{"code": "def combine_dict(dict1, dict2):\n    combined_dict = dict1.copy()\n    combined_dict.update(dict2)\n    return combined_dict", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef random_list():\n    random_list = []\n    for _ in range(10):\n        num = random.randint(1, 10)\n        random_list.append(num)\n    return random_list\n\nlist = random_list()\nprint(list)", "line_number": null, "bug_type": null}
{"code": "def count_vowels(word):\n    vowels = 'aeiou'\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "def compare_lists(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    if sorted(list1) == sorted(list2):\n        return True\n    return False", "line_number": null, "bug_type": null}
{"code": "def sortDescending(arr):\n    arr.sort(reverse=True)\n    return arr\n\narray = [3, 7, 1, 5]\nsortedArray = sortDescending(array)", "line_number": null, "bug_type": null}
{"code": "string = \"Hello, World, I am here\"\n\nlist = string.split(\", \")\nprint(list)\n\n# Output\n['Hello', 'World', 'I am here']", "line_number": null, "bug_type": null}
{"code": "def combine_strings(str1, str2):\n    result = [] \n    for i in range(len(str1)): \n        for j in range(len(str2)): \n            result.append(str1[i] + str2[j]) \n    return result", "line_number": null, "bug_type": null}
{"code": "import re\n\nstring = \"This movie was released in 1980\"\n\n# search for substring of 4 digits\nresult = re.search(r'\\d{4}', string)\n\n# print the year\nif result:\n    print(result.group())", "line_number": null, "bug_type": null}
{"code": "def is_even_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"", "line_number": null, "bug_type": null}
{"code": "import requests\n\nurl = 'https://www.example.com/'\n\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    print('Success!')\nelse:\n    print('An error has occurred.')", "line_number": null, "bug_type": null}
{"code": "def factorial(num):\n    result = 1\n    if num > 1:\n        for i in range(2,num+1):\n            result *= i\n    return result", "line_number": null, "bug_type": null}
{"code": "def append_list(list_to_append, list_to_add):\n    return list_to_append + list_to_add", "line_number": null, "bug_type": null}
{"code": "list_odd = [] \nfor num in [3, 5, 7, 4, 8, 10]:\n    if num %2 != 0:\n        list_odd.append(num)\n        \nprint(list_odd)", "line_number": null, "bug_type": null}
{"code": "def check_sorted(array):\n    return all(array[i] <= array[i+1] for i in range(len(array)-1))", "line_number": null, "bug_type": null}
{"code": "def my_function():\n    print(\"Hello, World!\")\n\nif __name__ == '__main__':\n    my_function()\n\nif __name__ == '__main__':\n    my_function()", "line_number": null, "bug_type": null}
{"code": "def encodeString (text):\n    encoded_string = ''\n    for char in text:\n        encoded_char = ord(char) + 3\n        encoded_string += chr(encoded_char)\n\n    return encoded_string\n\nencodeString(\"Hello\")  # khoor", "line_number": null, "bug_type": null}
{"code": "new_string = []\nprev_word = ''\nfor word in \"This is a sample string\".split():\n    if word != prev_word:\n        new_string.append(word)\n    prev_word = word\nprint(' '.join(new_string))", "line_number": null, "bug_type": null}
{"code": "def sort_strings(str1, str2): \n    str1 = sorted(str1)\n    str2 = sorted(str2)\n    return str1, str2", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(my_list):\n    unique_list = []\n    for i in my_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list", "line_number": null, "bug_type": null}
{"code": "def sum_of_array(arr):\n    result = 0\n    for x in arr:\n        result += x\n    return result\n\nsum = sum_of_array([3, 5, 6])\nprint(sum)", "line_number": null, "bug_type": null}
{"code": "import random\n\npassword_characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*().,?0123456789'\n\ndef generate_password(length):\n    return ''.join(random.choices(password_characters, k=length))\n  \nprint(generate_password(10))", "line_number": null, "bug_type": null}
{"code": "\"\"\"\nImperial to Metric conversion program.\n\"\"\"\n\ndef inches_to_cm(inches):\n    return inches * 2.54\n\nif __name__ == '__main__':\n    print(inches_to_cm(5))", "line_number": null, "bug_type": null}
{"code": "def list_to_number(list1):\n    result = list1[0]\n    for i in range(1, len(list1)):\n        result -= list1[i]\n    return result", "line_number": null, "bug_type": null}
{"code": "import math\n\ndef area_circumference(radius):\n    area = math.pi * radius ** 2\n    return area", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef get_password(length):\n    alphabet = string.ascii_letters + string.digits\n    password = ''.join(random.choice(alphabet) for i in range(length))\n    print (password)\n\nget_password(7)", "line_number": null, "bug_type": null}
{"code": "def add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y", "line_number": null, "bug_type": null}
{"code": "import requests\n\nurl = 'https://example.com/api/submit'\ndata = {'message': 'Hello!', 'name': 'John' }\n\nr = requests.post(url, json=data)\nprint(r.text)", "line_number": null, "bug_type": null}
{"code": "def top_three(lst): \n  sorted_lst = sorted(lst, reverse=True) \n  return sorted_lst[:3]\n\nprint(top_three([10, 8, 3, 11, 7, 14, 13]))", "line_number": null, "bug_type": null}
{"code": "def round_nearest_int(num):\n    return round(num)\n\nresult = round_nearest_int(2.6)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "import hashlib\ndef encode_string_sha256(string):\n  return hashlib.sha256(string.encode('utf-8')).hexdigest()", "line_number": null, "bug_type": null}
{"code": "import datetime \n\ncurrent_time = datetime.datetime.now()\n\nprint('Current Time in 12-hour format :', current_time.strftime(\"%I:%M %p\"))", "line_number": null, "bug_type": null}
{"code": "def reverse_string(s):\n reversed_string = ''.join(reversed(s))\n return reversed_string\n\nstring = 'Hello World!'\nreversed_string = reverse_string(string)\nprint(reversed_string)", "line_number": null, "bug_type": null}
{"code": "user_input = input('Enter a string: ')\n\nrev_string = user_input[::-1]\n\nprint(f\"The reversed string is: {rev_string}\")", "line_number": null, "bug_type": null}
{"code": "def is_prime(num):\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n    else:\n        return False\n    return True", "line_number": null, "bug_type": null}
{"code": "import random\nimport string\n\ndef generate_random_string():\n    return ''.join(random.choices(string.ascii_lowercase, k=10))\n\nprint(generate_random_string())", "line_number": null, "bug_type": null}
{"code": "def replace_space(string):\n    return string.replace(\" \", \"_\")\n\nreplace_space(\"The quick brown fox\") # Outputs: The_quick_brown_fox", "line_number": null, "bug_type": null}
{"code": "objects = [\n    {'name': 'a', 'value': None},\n    {'name': 'b', 'value': None},\n    {'name': 'c', 'value': None}\n]", "line_number": null, "bug_type": null}
{"code": "class Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def isEmpty(self):\n        return self.items == []", "line_number": null, "bug_type": null}
{"code": "def repeat_string(string, num_times):\n    return string*num_times\n\nresult = repeat_string(\"Hello!\", 3)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(list):\n  new_list = []\n  for item in list:\n    if item not in new_list:\n      new_list.append(item)\n  return new_list", "line_number": null, "bug_type": null}
{"code": "def is_prime(number): \n    if number <= 1: \n        return False \n\n    for i in range(2, number): \n        if number % i == 0: \n            return False \n\n    return True", "line_number": null, "bug_type": null}
{"code": "def print_list(L):\n    for item in L:\n        print(item)\n\nL = [1,2,3,4,5]\nprint_list(L)", "line_number": null, "bug_type": null}
{"code": "def reverse_list(numbers):\n reversed_list = numbers[::-1]\n print(reversed_list)\n return sum(reversed_list)", "line_number": null, "bug_type": null}
{"code": "def check_palindrome(string_list):\n    for string in string_list:\n        if string == string[::-1]:\n            return True\n    return False\n\nresult = check_palindrome([\"civic\", \"apple\", \"racecar\"])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def strip_whitespace(string):\n  return string.replace(\" \", \"\")\n\nprint(strip_whitespace('Hello World')) # HelloWorld", "line_number": null, "bug_type": null}
{"code": "def get_fibonacci_sequence(n):\n    series = [0,1]\n    while len(series) < n:\n        series.append(sum(series[-2:]))\n    return series\n\nprint(get_fibonacci_sequence(10))", "line_number": null, "bug_type": null}
{"code": "def collect_even_numbers(nums):\n    even_nums = []\n    for num in nums:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums", "line_number": null, "bug_type": null}
{"code": "def sort_int_asc(arr):\n    arr.sort()\n    return arr\n\nprint(sort_int_asc([3, 7, 8, 1, 5, 4]))", "line_number": null, "bug_type": null}
{"code": "def hexToASCII(hexStr):\n num = int(hexStr, 16)\n return chr(num)", "line_number": null, "bug_type": null}
{"code": "def split_words(s): \n    words = s.split(\" \") \n    return words  \ns = \"Hello,World!\"\nwords = split_words(s) \nprint(words)", "line_number": null, "bug_type": null}
{"code": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\ntext = soup.get_text()\n\nprint(text)", "line_number": null, "bug_type": null}
{"code": "user_input = input('Please enter a string: ')\n \nwords = user_input.split(' ')\n \nreverse_words = [word[::-1] for word in words]\n \nprint(' '.join(reverse_words))", "line_number": null, "bug_type": null}
{"code": "list = [10, 20, 30, 40, 50] \n  \n# reversing the list \nlist.reverse() \n  \n# printing the reversed list \nprint (\"The reversed list is : \" +  str(list))", "line_number": null, "bug_type": null}
{"code": "def insert_list(list, index, elements): \n    return (list[0:index] + elements + list[index:])", "line_number": null, "bug_type": null}
{"code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True", "line_number": null, "bug_type": null}
{"code": "import socket\n\ndef resolve_domain(domain):\n    try:\n        addr = socket.gethostbyname(domain) # Resolve the address by DNS\n        return addr\n    except socket.gaierror: # Raise when the domain name not found\n        return None", "line_number": null, "bug_type": null}
{"code": "\"\"\"\nGenerate a function for converting JSON data to a Python object\n\"\"\"\n\nimport json\n\ndef json_to_object(json_data):\n    return json.loads(json_data)", "line_number": null, "bug_type": null}
{"code": "def reverse_string(string):\n    reversed_string = \"\"\n    for i in range(len(string) - 1, -1 , -1):\n        reversed_string += string[i]\n    return reversed_string\n\nresult = reverse_string('Hello')\nprint(result)", "line_number": null, "bug_type": null}
{"code": "mylist = [1,2,3,4,5,6,7,8,9,10]", "line_number": null, "bug_type": null}
{"code": "a, b = 0, 1\nfor _ in range(10):\n a, b = b, a + b", "line_number": null, "bug_type": null}
{"code": "import random\nimport string\n\ndef generate_random_password(n=10):\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    return ''.join(random.choice(chars) for _ in range(n))", "line_number": null, "bug_type": null}
{"code": "def powersOfTwo(n):\n    powers = []\n    for i in range(n + 1):\n        powers.append(2**i)\n    return powers\n\nn = 8\nprint(powersOfTwo(n))", "line_number": null, "bug_type": null}
{"code": "def reverse_words(sentence):\n    words = sentence.split(\" \")\n    reversed_words = words[::-1]\n    return \" \".join(reversed_words)\n\nprint(reverse_words(\"Hello world!\"))\n# Output: world! Hello", "line_number": null, "bug_type": null}
{"code": "def sqrt(x): \n    root = x \n    epsilon = 0.0001\n    while abs(x - root * root) > epsilon:\n        root = (x/root + root)/2\n    return root", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generateRandomIP():\n    ip = \".\".join(str(random.randint(0,255)) for i in range(4))\n    return ip\n\nip_address = generateRandomIP()\nprint(\"Random IP address:\", ip_address)", "line_number": null, "bug_type": null}
{"code": "import random\n\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\n\ndef generate_random_word():\n    word = ''\n    for i in range(5):\n        word += random.choice(alphabet)\n    return word\n\nprint(generate_random_word())", "line_number": null, "bug_type": null}
{"code": "# Create a multiplication table for a given number\nnum = 6\n\n# Loop to generate the table\nfor i in range(1, 11):\n  print(f'{num} x {i} = {num * i}')", "line_number": null, "bug_type": null}
{"code": "def find_first_occurrence(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i", "line_number": null, "bug_type": null}
{"code": "def countOccurences(str, char):\n    count = 0\n    for ch in str:\n        if ch == char:\n            count += 1\n    return count\n\nprint(countOccurences('abcdefg', 'a'))", "line_number": null, "bug_type": null}
{"code": "def validate_syntax(code):\n    try: \n        compile(code, '<string>', 'exec')\n        return True\n    except SyntaxError: \n        return False", "line_number": null, "bug_type": null}
{"code": "arr = [1, 2, 3, 4]\nresult = 0\n\nfor i in range(len(arr)):\n  result += arr[i]", "line_number": null, "bug_type": null}
{"code": "def gcd(a, b): \n    if a == 0 : \n        return b  \n  \n    return gcd(b % a, a)  \n  \n# Driver program  \nprint(gcd(30,15))", "line_number": null, "bug_type": null}
{"code": "# Max value in array\n\ndef max_val(array):\n    max_val = array[0]\n    for num in array[1:]:\n        if num > max_val:\n            max_val = num\n    return max_val", "line_number": null, "bug_type": null}
{"code": "def most_frequent(list): \n    return max(set(list), key = list.count) \n  \nlist = [4, 8, 9, 4, 6, 4, 8]\nprint(most_frequent(list))", "line_number": null, "bug_type": null}
{"code": "sum = 0\nfor x in [1,2,3,4,5]:\n sum += x\nprint(sum)", "line_number": null, "bug_type": null}
{"code": "d = {\"name\": \"John\", \"age\": 24, \"class\": \"Engineering\"}\n\nsorted_d = sorted(d.items(), key=lambda x: x[0]) \n\nprint(sorted_d)", "line_number": null, "bug_type": null}
{"code": "def remove_nth_index(text, n):\n    return text[:n] + text[n + 1:]", "line_number": null, "bug_type": null}
{"code": "def volume_of_cube(edge_length):\n    return edge_length ** 3\n    \nprint(volume_of_cube(3))", "line_number": null, "bug_type": null}
{"code": "def max_element(lst):\n    max_element = lst[0]\n    for element in lst:\n        if element > max_element:\n            max_element = element\n    return max_element", "line_number": null, "bug_type": null}
{"code": "import random\nlength = 5\n\nrand_nums = [random.randint(0,100) for i in range(length)]\nprint(rand_nums)", "line_number": null, "bug_type": null}
{"code": "import numpy as np\n\nclass CrossEntropy:\n    def __init__(self):\n        pass\n    \n    def loss(self, p, q):\n        return - np.sum(p * np.log(q))", "line_number": null, "bug_type": null}
{"code": "def get_full_name(first, last):\n  full_name = f\"{first} {last}\"\n  return full_name\n\nname = get_full_name(\"John\", \"Smith\")\nprint(name)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef shuffle_list(lst):\n    random.shuffle(lst)\n    return lst\n\nmy_list = [1,2,3,4,5]\nshuffled_list = shuffle_list(my_list)\nprint(shuffled_list)", "line_number": null, "bug_type": null}
{"code": "import re\n\ndef extract_zip_codes(string):\n    zip_codes = re.findall(\"(?<=ZIP )\\d+\", string)\n    return zip_codes\n\nprint(extract_zip_codes(\"My address is 123 Main St, ZIP 12345\"))", "line_number": null, "bug_type": null}
{"code": "def generate_list(start, end):\n    result = []\n    for i in range(start, end+1):\n        if i%2 == 0:\n            result.append(i)\n    return result\n\nprint(generate_list(2, 20))", "line_number": null, "bug_type": null}
{"code": "def count_element(list, element):\n    count = 0\n    for i in list:\n        if i == element:\n            count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "def remove_item(lst, item):\n    while item in lst:\n        lst.remove(item)\n    return lst\n\nresult = remove_item([1, 2, 3, 4], 2)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def printMultTable(n):\n    for i in range(1, 11):\n        print(n, 'x', i, '=', n*i)\n\nprintMultTable(4)", "line_number": null, "bug_type": null}
{"code": "def print_ascii_table():\n    for i in range(32, 127):\n        print(f\"Character:{chr(i)}, ASCII Number:{i}\")", "line_number": null, "bug_type": null}
{"code": "user_input = input('Input Y or N: ')\n\nif user_input == 'Y':\n    print('Hello World')\nelif user_input == 'N':\n    print('Goodbye')", "line_number": null, "bug_type": null}
{"code": "def sort_strings(list_of_strings):\n    sorted_list = sorted(list_of_strings, key=lambda str: str.lower())\n    return sorted_list\n\nresult = sort_strings(['apple', 'orange', 'pear'])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "data = [{\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"occupation\": \"programmer\"\n}]\n\narr = []\n\nfor item in data:\n    arr.append(item)\n    \nprint(arr)", "line_number": null, "bug_type": null}
{"code": "def celsiusToFahrenheit(celsius):\n  fahrenheit = celsius * 9/5 + 32\n  return fahrenheit", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(s):\n  return s == s[::-1]\n\nprint(is_palindrome(\"moon\"))", "line_number": null, "bug_type": null}
{"code": "import math\ndef area(radius):\n    area = math.pi * radius ** 2\n    return area", "line_number": null, "bug_type": null}
{"code": "import json \n\njson_data = '{\"key\": \"value\"}'\n\npydict = json.loads(json_data) \nprint (\"Python dictionary:\", pydict)", "line_number": null, "bug_type": null}
{"code": "my_dict ={}\nfor num in range(1, 16):\n    my_dict[num] = num*num\n\nprint(my_dict)", "line_number": null, "bug_type": null}
{"code": "def find_profit(cost_price, selling_price):\n    profit = selling_price - cost_price\n    return profit", "line_number": null, "bug_type": null}
{"code": "for i in range(1, 6):\n    print(\"*\" * i)\n    for j in range(1, i+1):\n        print(j, end=\"\")\n    print()", "line_number": null, "bug_type": null}
{"code": "def remove_from_dict(dictionary, key):\n    if key in dictionary.keys():\n        del dictionary[key]", "line_number": null, "bug_type": null}
{"code": "list = [2, 5, 7, 8, 11, 13]\nseek = 8\n\nif seek in list:\n    print(\"Found!\")\nelse:\n    print(\"Not Found\")", "line_number": null, "bug_type": null}
{"code": "def factorial(x):\n    factorial = 1\n    while x > 1:\n        factorial = factorial * x\n        x = x - 1\n    return factorial\n\nnumber = 7\nresult = factorial(number)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def reverse(s):\n    if len(s) == 0: \n        return s \n    else: \n        return reverse(s[1:]) + s[0]", "line_number": null, "bug_type": null}
{"code": "def get_perimeter(length, width):\n    return 2 * (length + width)\n\nperimeter = get_perimeter(10, 5)\nprint(perimeter)", "line_number": null, "bug_type": null}
{"code": "class Car:\n    def __init__(self, color, make, model, price):\n        self.color = color\n        self.make = make\n        self.model = model\n        self.price = price", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef random_day():\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    return random.choice(days)", "line_number": null, "bug_type": null}
{"code": "import itertools\n\nlst = [1,2,3,4]\n\n# Get all possible combinations of the list\nresult = list(itertools.combinations(lst, 2))\n\n# Print the combinations\nfor combination in result:\n    print(combination)", "line_number": null, "bug_type": null}
{"code": "def maximum_two(arr):\n    arr.sort(reverse=True) \n    m1 = arr[0] \n    m2 = arr[1]\n    return (m1, m2)", "line_number": null, "bug_type": null}
{"code": "numbers = {\"apple\": 0, \"orange\": 25, \"banana\": 52}", "line_number": null, "bug_type": null}
{"code": "def extractFirstName(full_name):\n    first_name = full_name.split()[0]\n    return first_name\n\n# Input\nfull_name = 'John Smith'\n\n# Output\nresult = extractFirstName(full_name)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "while True:\n    num = int(input(\"Please input a number between 1 and 10: \"))\n    if num in range(1, 11):\n        print(num + 1)\n    else:\n        print(\"Invalid number!\")", "line_number": null, "bug_type": null}
{"code": "def list_reverse(sequence):\n    if len(sequence) == 0:\n        return []\n    else:\n        return list_reverse(sequence[1:]) + [sequence[0]]", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_password():\n    chars = string.ascii_letters \n    size = 8\n    return ''.join(random.choice(chars) for x in range(size))\n\nprint(generate_password())", "line_number": null, "bug_type": null}
{"code": "import random\n\nrandom_numbers = []\n\nwhile len(random_numbers) < 20:\n    n = random.randint(1, 100)\n    if n not in random_numbers:\n        random_numbers.append(n)\n\nprint(random_numbers)", "line_number": null, "bug_type": null}
{"code": "temps = [87, 97, 75, 104]\n\nmin_temp = temps[0]\n\nfor temp in temps:\n    if temp < min_temp:\n        min_temp = temp\n\nprint('Lowest temperature: ', min_temp)", "line_number": null, "bug_type": null}
{"code": "class sequenceGenerator:\n    def __init__(self, n):\n        self.n = n\n    \n    def genSequence(self):\n        sequence = []\n        for i in range(self.n+1):\n            sequence.append(i)\n        return sequence", "line_number": null, "bug_type": null}
{"code": "def sum_numbers(num1, num2, num3):\n    return num1 + num2 + num3\n    \nif __name__ == \"__main__\":\n    print(sum_numbers(5, 10, 15))", "line_number": null, "bug_type": null}
{"code": "def is_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "def classify(lst):\n    result = []\n    for item in list:\n        if item % 2 == 0:\n            result.append(\"even\")\n        else:\n            result.append(\"odd\")\n    return result", "line_number": null, "bug_type": null}
{"code": "def count_characters(string):\n    count = 0\n    for char in string:\n        count += 1\n    print(\"Total number of characters:\", count)", "line_number": null, "bug_type": null}
{"code": "import numpy as np\n\n# define an array of size 5x5\nmy_array = np.zeros((5, 5))\n\nprint(my_array)", "line_number": null, "bug_type": null}
{"code": "n1 = int(input(\"Enter first number: \"))\nn2 = int(input(\"Enter second number: \"))", "line_number": null, "bug_type": null}
{"code": "def power(n,k):\n    result = 1\n    for i in range(0,k):\n        result *= n\n    return result", "line_number": null, "bug_type": null}
{"code": "def sort_list(numbers): \n    sorted_list = sorted(numbers, reverse=True)\n    return sorted_list", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(input):\n s = input.lower()\n return s == s[::-1]\n\nprint(is_palindrome(\"racecar\")) # True", "line_number": null, "bug_type": null}
{"code": "def reverse_string(my_string):\n  reversed_string = ''\n  for i in range(len(my_string) - 1, -1, -1):\n    reversed_string += my_string[i]\n\n  return reversed_string", "line_number": null, "bug_type": null}
{"code": "def search_element(arr, ele):\n    for i in range(len(arr)):\n        if arr[i] == ele:\n            return i\n    return -1", "line_number": null, "bug_type": null}
{"code": "def sort_list(numbers): \n    numbers.sort() \n    return numbers \n  \n# Driver code \nnumbers = [5, 2, 3, 7, 4]\nprint(sort_list(numbers))", "line_number": null, "bug_type": null}
{"code": "def is_anagram(word1, word2):\n    if sorted(word1) == sorted(word2):\n        return True\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "words = [\"hello\", \"world\", \"foobar\"] \nfiltered_words = list(filter(lambda x: len(x) > 5, words)) \nprint(filtered_words) # ['world', 'foobar']", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(list_of_strings):\n  palindrome_list = [string for string in list_of_strings if string == string[::-1]]\n  if palindrome_list:\n    return True\n  return False", "line_number": null, "bug_type": null}
{"code": "import math\n\n# Caluclate pi to the 5th decimal place\npi = round(math.pi, 5)\n\n# Print the pi\nprint(pi)", "line_number": null, "bug_type": null}
{"code": "def char_in_string(char, string):\n    for c in string:\n        if c == char:\n            return True\n    return False", "line_number": null, "bug_type": null}
{"code": "def avg(arr):\n    tot_sum = 0\n    for num in arr:\n        tot_sum += num\n    \n    return tot_sum/len(arr)", "line_number": null, "bug_type": null}
{"code": "def distinct_pair(product):\n    pairs = []\n    for i in range(1,product):\n        if product % i == 0:\n            pairs.append((i,product//i))\n\n    return set(pairs)", "line_number": null, "bug_type": null}
{"code": "def to_square(nums):\n    squares = [num * num for num in nums]\n    return squares", "line_number": null, "bug_type": null}
{"code": "import random\nimport string\n\ndef generate_random_string(target_length):\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.choice(chars) for _ in range(target_length))", "line_number": null, "bug_type": null}
{"code": "perfect_squares = []\ni = 1\nwhile len(perfect_squares) < 20:\n perfect_square = i * i \n perfect_squares.append(perfect_square)\n i = i + 1\n\nprint(perfect_squares)", "line_number": null, "bug_type": null}
{"code": "def concatStrings(string1, string2):\n  return string1 + string2\n\nprint(concatStrings('Hello', 'World'))", "line_number": null, "bug_type": null}
{"code": "import asyncio\n\ndef callback():\n    print('Callback triggered')\n\nasync def async_task(callback):\n    await asyncio.sleep(3)\n    callback()\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(async_task(callback))", "line_number": null, "bug_type": null}
{"code": "#!/usr/bin/env python\n\ntext = \"Hello World this is a Test\"\nwords = text.split()\n\nfor word in words:\n print(word)", "line_number": null, "bug_type": null}
{"code": "def item_exists(mylist, element):\n    if element in mylist:\n        return True\n    return False\n\nresult = item_exists([1,2,3,4,5], 3)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "class BaseClass:\n    def __init__(self):\n        self.var1 = None\n    \n    def method1(self, var1):\n        raise NotImplementedError", "line_number": null, "bug_type": null}
{"code": "numbers = [3, 5, 9, 1, 2] \n\nnumbers.sort() \n\nprint(numbers)", "line_number": null, "bug_type": null}
{"code": "def to_title_case(text):\n    words = text.split()\n    title_case_words = [word.capitalize() for word in words]\n\n    return \" \".join(title_case_words)", "line_number": null, "bug_type": null}
{"code": "student_grades = {\n   \"Adam\": \"A\",\n   \"Amy\": \"B\",\n   \"Aaron\": \"A\",\n   \"Bella\": \"C\"\n}", "line_number": null, "bug_type": null}
{"code": "unique_dict = {\n  'alec' : 'alec',\n  'bob'  : 'bob',\n  'sara' : 'sara',\n  'john' : 'john',\n  'elon' : 'elon'\n}", "line_number": null, "bug_type": null}
{"code": "def dfs(graph, start):\n    visited, stack = set(), [start]\n    while stack:\n        vertex = stack.pop()\n        if vertex not in visited:\n            visited.add(vertex)\n            stack.extend(graph[vertex] - visited)\n    return visited", "line_number": null, "bug_type": null}
{"code": "def string_to_list(text):\n    lst = text.split()\n    return lst\n\ntext = \"This is a sentence.\"\nprint(string_to_list(text))", "line_number": null, "bug_type": null}
{"code": "def countUppercase(myStr):\n    uppercaseCount = 0\n    for l in myStr:\n        if l.isupper():\n            uppercaseCount+=1\n    return uppercaseCount\n\nprint(countUppercase('Hello World'))", "line_number": null, "bug_type": null}
{"code": "import json\n\ndata = {\n    'name': 'John Doe',\n    'email': 'john@example.com',\n    'age': 32\n}\n\njson_data = json.dumps(data)\nprint(json_data)", "line_number": null, "bug_type": null}
{"code": "import requests \nfrom bs4 import BeautifulSoup\n\nurl = \"http://example.com\"\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\n# scrape data from website", "line_number": null, "bug_type": null}
{"code": "def reverse_list(l): \n    return [ele for ele in reversed(l)] \n  \nmy_list = [1, 2, 3, 4, 5]\n \nprint(reverse_list(my_list))", "line_number": null, "bug_type": null}
{"code": "def to_lowercase(string):\n    lowercase_string = \"\"\n    for char in string:\n        lowercase_string += char.lower()\n    return lowercase_string\n\nif __name__ == '__main__':\n    string = \"HELLO WORLD\"\n    print(to_lowercase(string))", "line_number": null, "bug_type": null}
{"code": "def sort_string(string): \n    return ''.join(sorted(string)) \n  \nstring = \"Fortnite\"\nprint(sort_string(string))", "line_number": null, "bug_type": null}
{"code": "sentence = \"It's a beautiful day\"\n\nword = \"beautiful\"\n\nresult = sentence.replace (word, \"XXX\")\n\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def first_non_repeating_char(string): \n    for c in string: \n        if string.count(c) == 1: \n            return c \n      \n    return -1", "line_number": null, "bug_type": null}
{"code": "def to_title_case(string):\n    words = string.split()\n\n    result = []\n    for word in words:\n        result.append(word.title())\n\n    return ' '.join(result)\n\ntitle = to_title_case(\"hello world\")\nprint(title)", "line_number": null, "bug_type": null}
{"code": "def word_counts(words):\n    counts = {}\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    return counts", "line_number": null, "bug_type": null}
{"code": "def get_min_max(nums): \n  min_value = min(nums) \n  max_value = max(nums) \n  return (min_value, max_value)", "line_number": null, "bug_type": null}
{"code": "def print_sum(a, b):\n    \"\"\"Print the sum of two numbers.\"\"\"\n    print(a + b)", "line_number": null, "bug_type": null}
{"code": "sentence = \"The quick brown fox\"\nwords = sentence.split(\" \")\n\nfor word in words:\n print(word)\n\n# Output\n# The\n# quick\n# brown\n# fox", "line_number": null, "bug_type": null}
{"code": "def text_to_hex(text):\n    hex_encoded = \"\"\n    for i in text:\n        hex_encoded += ((hex(ord(i)))[2:]).zfill(2) \n    return hex_encoded\n\nprint(text_to_hex(\"Hello World\"))", "line_number": null, "bug_type": null}
{"code": "my_dict = {\n    'name': 'John',\n    'age': 24,\n    'gender': 'male'\n}", "line_number": null, "bug_type": null}
{"code": "from pyspark.sql import functions as F\n\ndef removeDuplicates(df):\n df = df.dropDuplicates()\n df = df.orderBy(F.desc(\"date\"))\n return df", "line_number": null, "bug_type": null}
{"code": "# code to display the result of a mathematical expression\n\nexpr = '(3 + 4) * 5'\n\n# Evaluate the expression\nresult = eval(expr)\n\n# Print the result\nprint(\"Result of the expression: \" + str(result))", "line_number": null, "bug_type": null}
{"code": "def index_of(arr, ele):\n    for i in range(len(arr)):\n        if arr[i] == ele:\n            return i\n    return -1", "line_number": null, "bug_type": null}
{"code": "def find_max(lst):\n    max = lst[0]\n    for i in lst:\n        if i > max:\n            max = i\n    return max", "line_number": null, "bug_type": null}
{"code": "def linear_search(arr, key): \n    n = len(arr) \n  \n    for i in range(0, n): \n        if arr[i] == key: \n            return i\n    return -1", "line_number": null, "bug_type": null}
{"code": "numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "line_number": null, "bug_type": null}
{"code": "def num_chars(string):\n    char_count = 0\n    for i in string:\n        char_count += 1\n    print(\"The number of characters in the string is\", char_count)", "line_number": null, "bug_type": null}
{"code": "def find_string(search_string, myList):\n    for index, s in enumerate(myList):\n        if s == search_string:\n            return index", "line_number": null, "bug_type": null}
{"code": "import random\nimport string\n\ndef generate_random_string(length):\n    letters = string.ascii_letters\n    return ''.join(random.choice(letters) for i in range(length))", "line_number": null, "bug_type": null}
{"code": "def sum_list(numbers):\n  summed_value = 0\n  for num in numbers:\n    summed_value += num\n  return summed_value", "line_number": null, "bug_type": null}
{"code": "def addNumbers(a, b):\n    return a + b\n\nx = 3\ny = 7\nresult = addNumbers(x, y)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "# Import the requests library \nimport requests \n\n# Get the website's content \nr = requests.get('https://www.example.com/') \n\n# Get the webpage's HTML \nhtml = r.text\n\n# Print the HTML \nprint(html)", "line_number": null, "bug_type": null}
{"code": "import psutil\n\n# terminate all running processes\nfor proc in psutil.process_iter():\n    proc.terminate()", "line_number": null, "bug_type": null}
{"code": "def repeatString(string, num):\n    return string * num\n\nresult = repeatString(\"xyz\", 3)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def replace_substring(string, old_substring, new_substring):\n return string.replace(old_substring, new_substring)\n\nresult = replace_substring(\"Hello World, Hello\", \"Hello\", \"Hi\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "string = \"This is a test string\"\n\nlist = string.split(\" \")\n\nprint(list) # Output: ['This', 'is', 'a', 'test', 'string']", "line_number": null, "bug_type": null}
{"code": "import re\n \ndef tokenizeText(text):\n    tokens = re.findall(r'\\w+', text)\n    return tokens", "line_number": null, "bug_type": null}
{"code": "def sum_digits(num):\n    total = 0\n    while num != 0:\n        total += num % 10\n        num //= 10\n    return total", "line_number": null, "bug_type": null}
{"code": "def sum_of_array(array):\n    sum = 0 \n    for i in range(len(array)):\n        sum += array[i]\n    return sum", "line_number": null, "bug_type": null}
{"code": "# Convert the given binary string to an integer number\nbinary_string = \"1101\"\ndecimal_number = int(binary_string, 2)\n\n# Print the result\nprint(decimal_number) # 13", "line_number": null, "bug_type": null}
{"code": "def sort_by_length_descending(list_of_strings):\n    list_of_strings.sort(key=len, reverse=True)\n    return list_of_strings\n\nresult = sort_by_length_descending(['Math', 'English', 'Computer Science', 'Physics'])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def parse_str(str, separator):\n    strList = str.split(separator) \n    return strList", "line_number": null, "bug_type": null}
{"code": "def find_max(list):\n    max_num = list[0]\n    for i in list:\n        if i > max_num: \n            max_num = i\n    return max_num", "line_number": null, "bug_type": null}
{"code": "def add_numbers(a, b):\n   \"\"\"\n   This function takes two numbers as arguments and\n   returns their sum.\n   \"\"\"\n\n   return a + b", "line_number": null, "bug_type": null}
{"code": "for i in range(1, 6):\n  for j in range(i):\n    print(\"*\", end=\"\")\n  print()", "line_number": null, "bug_type": null}
{"code": "import re\n\ndef identify_words(str1):\n    regex = \"\\w*t\\w*e\\b\"\n    words = re.findall(regex, str1)\n    return words\n\nprint(identify_words(\"this is a python program\"))", "line_number": null, "bug_type": null}
{"code": "def bin_to_string(bin_num):\n    bin_string = bin(bin_num)[2:]\n    return bin_string", "line_number": null, "bug_type": null}
{"code": "arr = [3, 1, 2, 5, 4]\nnew_arr = [element for element in arr if element % 2 == 0]", "line_number": null, "bug_type": null}
{"code": "def replace_vowels(s):\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  for char in s:\n    if char in vowels:\n      s = s.replace(char, 'x')\n  return s", "line_number": null, "bug_type": null}
{"code": "# Program to subtract two integers\n\nint1 = -5\nint2 = 3\n\n# Subtract\nsubtract = int1 - int2\n \nprint(\" Difference of two given integers is :\", subtract)", "line_number": null, "bug_type": null}
{"code": "[x**2 for x in [1, 2, 3, 4, 5]]", "line_number": null, "bug_type": null}
{"code": "# import the module\nimport calendar\n\n# print the calendar \nprint(calendar.month(2021, 5))", "line_number": null, "bug_type": null}
{"code": "def reverse_string(string):\n    reversed_string = string[::-1] \n    return reversed_string\n\nreversed_string = reverse_string(\"Hello World!\")\nprint(reversed_string)", "line_number": null, "bug_type": null}
{"code": "even_or_odd = int(input(\"Please enter a number: \"))\nif even_or_odd % 2 == 0:\n  print(\"The number is Even.\")\nelse:\n  print(\"The number is Odd.\")", "line_number": null, "bug_type": null}
{"code": "# Python program to detect duplicate objects in an array\n\ndef detectDuplicates(arr):\n  seen = set()\n  for item in arr:\n    if item in seen:\n      return True\n    else:\n      seen.add(item)\n  return False", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef random_number_generator():\n    return random.randint(1, 10)\n\nfor _ in range (10):\n    print(random_number_generator())", "line_number": null, "bug_type": null}
{"code": "string1 = \"Hello\"\nstring2 = \"World\"\n\nconcatenatedString = string1 + string2\n\nprint(concatenatedString) # \"HelloWorld\"", "line_number": null, "bug_type": null}
{"code": "def convert_base10_to_binary(num):\n    binary_num = []\n    while (num > 0): \n        binary_num.append(num % 2)\n        num //= 2\n  \n    binary_num.reverse() \n    return binary_num", "line_number": null, "bug_type": null}
{"code": "def convertToBinary(n): \n  \n    if n > 1: \n        convertToBinary(n//2) \n  \n    print(n % 2,end = '') \n  \n\n# driver code \nnum = 17\nconvertToBinary(num)", "line_number": null, "bug_type": null}
{"code": "def alphabeticalSort(arr):\n    arr.sort()\n    return arr\n\nresult = alphabeticalSort(['Jan', 'June', 'Raju', 'April'])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "points = []\n \nfor x in range(1, 11):\n    for y in range(1, 11):\n        points.append([x, y])\n \nprint(points)", "line_number": null, "bug_type": null}
{"code": "def printOddNumbers(array):\n  for number in array:\n    if number % 2 != 0:\n      print(number)\n\narray = [3, 5, 7, 10, 15]\nprintOddNumbers(array)", "line_number": null, "bug_type": null}
{"code": "name = input(\"What is your name? \")\n\nprint(\"Your name is: \" + name)", "line_number": null, "bug_type": null}
{"code": "import random\n\nnumber_list = [random.randint(0, 100) for n in range(10)]\n\nprint(number_list)", "line_number": null, "bug_type": null}
{"code": "def sort_list_of_strings(list_of_strings):\n    list_of_strings.sort()\n    for string in list_of_strings:\n        print(string)", "line_number": null, "bug_type": null}
{"code": "def foo(a, b, c):\n    result = a + b + c\n    return result", "line_number": null, "bug_type": null}
{"code": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\nresult = [x + y for x in list1 for y in list2]\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def gcd(x, y):\n    while y != 0:\n        x, y = y, x % y\n    return x", "line_number": null, "bug_type": null}
{"code": "def sort_list(lst, order):\n    sorted_list = sorted(lst, reverse = order)\n    return sorted_list", "line_number": null, "bug_type": null}
{"code": "def evaluate(expression):\n    \"\"\"Evaluates the given expression\"\"\"\n\n    try:\n        return eval(expression)\n    except TypeError:\n        raise ValueError(\"The expression must be a valid Python expression\")", "line_number": null, "bug_type": null}
{"code": "def generate_pairs(n):\n    lst = []\n    for i in range(n+1):\n        for j in range(i+1,n+1):\n            if i + j == n:\n                lst.append((i,j))\n    return lst", "line_number": null, "bug_type": null}
{"code": "def element_in_array(arr, el):\n    for item in arr:\n        if item == el:\n            return True\n    return False", "line_number": null, "bug_type": null}
{"code": "import pandas as pd\n\n# Read CSV data\ndata = pd.read_csv(\"data.csv\")\n\n# Store data to DataFrame\ndf = pd.DataFrame(data)", "line_number": null, "bug_type": null}
{"code": "arr = [10, 15, 7, 8, 12]\narr.sort()\nprint(arr)", "line_number": null, "bug_type": null}
{"code": "for year in range(2001,2026):\n    # leap year condition\n    if((year%4 == 0 and year%100 != 0) or year%400 == 0):\n        print(year, end=' ')", "line_number": null, "bug_type": null}
{"code": "String = \"Hello World\"\n\ndef count_characters(str):\n  return len(str)\n\nprint(\"Number of characters in the string:\", count_characters(String))", "line_number": null, "bug_type": null}
{"code": "class Student: \n    def  __init__(self, name, grade): \n        self.name = name\n        self.grade = grade \n  \n    def getGrade(self): \n        return self.grade", "line_number": null, "bug_type": null}
{"code": "def reverseString(s):\n    return s[::-1]\n \ns = \"Hello\"\nprint(reverseString(s))", "line_number": null, "bug_type": null}
{"code": "num = 0\nwhile num<=10:\n    if num % 2 == 0:\n        print(num)\n    num+=1", "line_number": null, "bug_type": null}
{"code": "import random\n\nfor i in range(10):\n    x = random.randint(1, 100)\n    print(x)", "line_number": null, "bug_type": null}
{"code": "import random\n\nrandom_list = [random.randint(0, 10) for _ in range(10)]\nprint(random_list)", "line_number": null, "bug_type": null}
{"code": "def merge(lst1, lst2):\n    merged_list = lst1 + lst2\n    return merged_list", "line_number": null, "bug_type": null}
{"code": "for num in range(1, 12, 2):\n    print(num, end=\" \")", "line_number": null, "bug_type": null}
{"code": "import json\n\ndef parseJSON(json_string):\n    return json.loads(json_string)\n\ndictionary = parseJSON('{\"name\": \"John\", \"age\": 32}')", "line_number": null, "bug_type": null}
{"code": "def func(a, b, c):\n    return a*b + a*c + b*c    # Use an optimized expression for lowest execution time", "line_number": null, "bug_type": null}
{"code": "def sum_list_items(list):\n    sum = 0\n    for item in list:\n        sum += item\n    return sum\n\nprint(sum_list_items(list))", "line_number": null, "bug_type": null}
{"code": "import numpy as np\n\ndef generateRandomMatrix(m, n):\n  return np.random.randn(m, n)", "line_number": null, "bug_type": null}
{"code": "class Patient:\n def __init__(self, name, condition):\n  self.name = name\n  self.condition = condition\n \n def get_name(self):\n  return self.name\n \n def get_condition(self):\n  return self.condition", "line_number": null, "bug_type": null}
{"code": "divisible_by_four = [num for num in range(1000) if num % 4 == 0]", "line_number": null, "bug_type": null}
{"code": "students_dict = {\n \"John\": 98,\n \"Jennifer\": 95,\n \"Noah\": 87,\n \"Frank\": 92\n}", "line_number": null, "bug_type": null}
{"code": "def to_upper(string):\n    return string.upper()\n\nstring = \"Python Programming\"\nprint(to_upper(string))", "line_number": null, "bug_type": null}
{"code": "total = 0\n\nnums = [1, 2, 3, 4]\n\nfor num in nums:\n    total += num\n\nprint(total)", "line_number": null, "bug_type": null}
{"code": "def are_all_characters_unique(string): \n    return len(set(string)) == len(string) \n\n# Driver code \nprint(are_all_characters_unique(\"Hello\")) # Output: false\nprint(are_all_characters_unique(\"abcdef\")) # Output: true", "line_number": null, "bug_type": null}
{"code": "def is_even(num): \n    if num % 2 == 0: \n        return True \n    else: \n        return False", "line_number": null, "bug_type": null}
{"code": "def gcd(a, b): \n    if a == 0: \n        return b \n    return gcd(b % a, a)", "line_number": null, "bug_type": null}
{"code": "def string_to_words(s):\n    return s.split(' ')\n\nwords = string_to_words('Hello World')\nprint(words)", "line_number": null, "bug_type": null}
{"code": "def sort_tuples(list): \n    \"\"\"Function to sort tuples according to their second parameter\"\"\" \n    list.sort(key = lambda x : x[1]) \n    return list\n\n#Example:\nprint(sort_tuples(list))", "line_number": null, "bug_type": null}
{"code": "def Fib_recursive(n):\n    if n <= 1:\n        return n\n    else:\n        return Fib_recursive(n - 1) + Fib_recursive(n - 2)", "line_number": null, "bug_type": null}
{"code": "def concatenateString(list):\n    result = \"\"\n    for item in list:\n        result += item\n    return result\n \nprint(concatenateString([\"Hello\", \"World\", \"How\", \"are\", \"you\"]))", "line_number": null, "bug_type": null}
{"code": "mylist = [\"apple\", \"eye\", \"ball\", \"abba\"]\n\npalindromes = [word for word in mylist if word == word[::-1]]\nprint(palindromes)", "line_number": null, "bug_type": null}
{"code": "def average(arr):\n    return sum(arr) / len(arr)\n\nmylist = [3, 5, 7, 9, 12]\n\nprint(\"Average of mylist is:\", average(mylist))", "line_number": null, "bug_type": null}
{"code": "def factorial(n): \n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)", "line_number": null, "bug_type": null}
{"code": "def listToTuple(list):\n tupleList = []\n for element in list:\n  tupleList.append((element,))\n return tupleList\n\nprint(listToTuple(list))", "line_number": null, "bug_type": null}
{"code": "def generate_dict(list1):\n    my_dict = {}\n    for item in list1:\n        my_dict[item] = item ** 2\n    return my_dict", "line_number": null, "bug_type": null}
{"code": "class Person:\n    def __init__(self, name, age, height):\n        self.name = name\n        self.age = age\n        self.height = height", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(arr):\n  res = []\n  for i in arr: \n    if i not in res: \n      res.append(i)\n  return res", "line_number": null, "bug_type": null}
{"code": "def compare_strings_charwise(s1, s2):\n    for i in range(min(len(s1), len(s2))):\n        if s1[i] != s2[i]:\n            return i\n    return -1", "line_number": null, "bug_type": null}
{"code": "numbers = [1, 2, 3, 4, 5]\n\nfor number in numbers:\n    print(number)", "line_number": null, "bug_type": null}
{"code": "def diff(nums):\n    return max(nums) - min(nums)\n\nprint(diff([10, 4, 2, 5, 7])) # 8", "line_number": null, "bug_type": null}
{"code": "def convert_to_list(s):\n    return s.split()\n\nstring = 'Hello world'\nresult = convert_to_list(string)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def modify_number(number):\n   if number % 2 == 0:\n       return number * 2\n   else:\n       return number - 1", "line_number": null, "bug_type": null}
{"code": "def countPosAndNeg(lst):\n positive = 0\n negative = 0\n for num in lst:\n  if num >= 0:\n   positive += 1\n  else:\n   negative += 1\n return (positive, negative)", "line_number": null, "bug_type": null}
{"code": "# Program to print the multiplication table\nnum = 5\n\n# Iterate from 1 to 10\nfor i in range(1,11):\n print(f'{num} X {i} = {num * i}')", "line_number": null, "bug_type": null}
{"code": "def convert_string_to_int(string):\n    x = 0\n    for i in string:\n        x = x*10 + ord(i) - ord('0')\n    return x", "line_number": null, "bug_type": null}
{"code": "def filter_by_length(strings):\n    return [s for s in strings if len(s) > 3]", "line_number": null, "bug_type": null}
{"code": "def linear_search(data, target):\n    for i in range(len(data)): \n        if data[i] == target: \n            return i\n    return -1", "line_number": null, "bug_type": null}
{"code": "def is_perfect_square(lst):\n    for num in lst:\n        if (int(num ** 0.5)) ** 2 != num: \n            return False\n    return True", "line_number": null, "bug_type": null}
{"code": "def sort_dicts_by_field(dict_list, field):\n    sorted_list = sorted(dict_list, key=lambda k: k[field])\n    return sorted_list", "line_number": null, "bug_type": null}
{"code": "sum = 0\nfor num in [2, 7, 8, 4, 5]:\n    sum += num\nprint(sum)", "line_number": null, "bug_type": null}
{"code": "def reverse_string(string):\n    \"\"\"\n    Takes a string and returns it reversed quickly with Python\n    slice notation.\n    \"\"\"\n    return string[::-1]", "line_number": null, "bug_type": null}
{"code": "def find_string_length(string): \n    length = 0\n    for char in string: \n        length += 1\n    return length\n\nresult = find_string_length('Hello World!')\nprint(result)", "line_number": null, "bug_type": null}
{"code": "import re\n\ndef check_lowercase(text):\n    pattern = r\"^[a-z]*$\"\n    if re.fullmatch(pattern, text):\n        return True\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "target_sum = 10\n\ncurrent_sum = 0\ni = 0\n\nwhile current_sum < target_sum:\n  current_sum = current_sum + i\n  i = i + 1\n\nprint(i - 1)", "line_number": null, "bug_type": null}
{"code": "def filter_duplicate_words(original_string):\n  words = original_string.split(\" \")\n  filtered_words = []\n  for word in words:\n    if word not in filtered_words:\n      filtered_words.append(word)\n  return ' '.join(filtered_words)", "line_number": null, "bug_type": null}
{"code": "def add_recursively(num1, num2):\n    if num2 == 0:\n        return num1\n    else:\n        return add_recursively(num1 ^num2, (num1 & num2) << 1)", "line_number": null, "bug_type": null}
{"code": "def sum_list(list_two_dim): \n    sum = 0\n    for row in list_two_dim: \n        sum += sum(row) \n    return sum", "line_number": null, "bug_type": null}
{"code": "def upper_words(list):\n    result = []\n    for word in list:\n        if word[0].isupper():\n            result.append(word)\n    return result", "line_number": null, "bug_type": null}
{"code": "numbers = [12, 15, 20, 9, 5]\n\nfiltered = list(filter(lambda x: x > 10, numbers))\nprint(filtered)", "line_number": null, "bug_type": null}
{"code": "def fahrenheit_to_celcius(fahrenheit):\n    celcius = (fahrenheit - 32) * (5/9)\n    return celcius", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(my_list):\n    my_list = list(dict.fromkeys(my_list))\n    return my_list", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_password():\n    password_characters = string.ascii_lowercase + string.ascii_uppercase + string.punctuation \n    return ''.join(random.choice(password_characters) for i in range(10)) \n\nprint(generate_password())", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef shuffle(arr):\n  for i in range(len(arr)):\n    j = random.randint(0, len(arr)-1)\n    arr[i], arr[j] = arr[j], arr[i]\n \n  return arr", "line_number": null, "bug_type": null}
{"code": "def count_unique_elements(numbers_list): \n    seen = set() \n    count = 0 \n    for number in numbers_list: \n        if number not in seen: \n            seen.add(number) \n            count+=1 \n    return count", "line_number": null, "bug_type": null}
{"code": "import calendar\nfrom datetime import date\n\ntoday = date.today()\n\ncal = calendar.month(today.year, today.month)\nprint(cal)", "line_number": null, "bug_type": null}
{"code": "def array_sum(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n\nprint(array_sum([10, 20, 30, 40]))\n\n# Output: 100", "line_number": null, "bug_type": null}
{"code": "def max_product_three(numbers):\n numbers.sort()\n return max(\n  numbers[0] * numbers[1] * numbers[-1], \n  numbers[-1] * numbers[-2] * numbers[-3]\n )", "line_number": null, "bug_type": null}
{"code": "class StudentList:\n    def __init__(self):\n        self.students = []\n\n    def add_student(self, student):\n        self.students.append(student)\n\n    def remove_student(self, student):\n        self.students.remove(student)", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(lst): \n    new_list = [] \n    for item in lst: \n        if item not in new_list: \n            new_list.append(item) \n    return new_list", "line_number": null, "bug_type": null}
{"code": "def classify(data):\n    if min(data) < 0:\n        return False\n    elif max(data) > 1:\n        return False\n    else:\n        return True", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef get_random_string(length=10):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return \"\".join(random.choices(vowels, k=length))", "line_number": null, "bug_type": null}
{"code": "def find_max_min(lst):\n max_val = max(lst)\n min_val = min(lst)\n return max_val, min_val", "line_number": null, "bug_type": null}
{"code": "def is_prime(num):\n    if num <= 1:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True", "line_number": null, "bug_type": null}
{"code": "class Person:\n    def __init__(self, firstName, lastName, age):\n        self.firstName = firstName\n        self.lastName = lastName\n        self.age = age", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_array():\n  my_array = []\n  for i in range(20):\n    my_array.append(random.randint(1,100))\n  return my_array", "line_number": null, "bug_type": null}
{"code": "def case_insensitive_compare(str1, str2):\n return str1.lower() == str2.lower()\n\nstring1 = \"Hello\"\nstring2 = \"hello\"\n\nprint(case_insensitive_compare(string1, string2))\n\n# Output\nTrue", "line_number": null, "bug_type": null}
{"code": "list1 = [\"apple\", \"banana\", \"orange\"]\nlist2 = [\"fruit\", \"fruit\", \"fruit\"] \n\ndictionary = dict(zip(list1, list2))\n\nprint(dictionary)", "line_number": null, "bug_type": null}
{"code": "def reverseString(text):\n    return text[::-1]\n \nresult = reverseString(\"Hello World!\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "string = \"Python is powerful & fun\"\nsubstring = \"pow\"\n \nstart_pos = string.find(substring)\nif start_pos == -1:\n    print(\"substring not found\")\nelse:\n    print(\"substring found at position:\", start_pos)", "line_number": null, "bug_type": null}
{"code": "def Fibonacci(n):\n    first, second = 0, 1\n    for _ in range(n):\n        print(first)\n        first, second = second, first + second", "line_number": null, "bug_type": null}
{"code": "def evaluate_expression(exp):\n  return eval(exp) \n\nexpression = \"7*6+20\"\noutput = evaluate_expression(expression)\nprint(output)", "line_number": null, "bug_type": null}
{"code": "def get_factors(n): \n    factors = [1]\n    for i in range(2, n + 1):\n        if (n % i == 0): \n            factors.append(i) \n    return factors", "line_number": null, "bug_type": null}
{"code": "my_list = [3, 5, 7, 9, 2]\n\nlast_element = my_list[-1]\nprint('Last element in the list is %d' % (last_element))", "line_number": null, "bug_type": null}
{"code": "from scipy.optimize import minimize\ndef f(x):\n    return x[0]**2 + 4*x[1]**2\n\nres = minimize(f, [3, -2], method='nelder-mead')\n\nprint(res.x)", "line_number": null, "bug_type": null}
{"code": "def reverseWords(sentence):\n  words = sentence.split()\n  words.reverse()\n  newSentence = ' '.join(words)\n  print(newSentence)\nreverseWords(\"Hello, World!\")", "line_number": null, "bug_type": null}
{"code": "def findMaxValue(arr):\n    max_value = None\n    for element in arr:\n        if max_value == None or element > max_value:\n            max_value = element\n    return max_value", "line_number": null, "bug_type": null}
{"code": "import requests\nfrom bs4 import BeautifulSoup\n\nresponse = requests.get('https://example.com/')\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nfor h1 in soup.find_all('h1'):\n print(h1.text)", "line_number": null, "bug_type": null}
{"code": "import datetime\ndef convert_datetime_to_timestamp(date_time, timestamp_format):\n    return datetime.strptime(date_time, \"%Y-%m-%d %H:%M:%S\").strftime(timestamp_format)", "line_number": null, "bug_type": null}
{"code": "def format_string(s):\n return s.upper() if (s.count(\" \")+1) / len(s) > 0.66 else s\n\ns = \"Hello World\"\nprint(format_string(s))\n# Output: HELLO WORLD", "line_number": null, "bug_type": null}
{"code": "for i in range(1, 11):\n  for j in range(1, 11):\n    print(i * j, end='\\t')\n  print()", "line_number": null, "bug_type": null}
{"code": "def find_max_element(arr):\n    maxElement = arr[0]\n    for val in arr:\n        if val > maxElement:\n            maxElement = val\n    return maxElement", "line_number": null, "bug_type": null}
{"code": "def square_list(l):\n return [i**2 for i in l]\n\nprint(square_list([1, 2, 3, 4]))\n# Output: [1, 4, 9, 16]", "line_number": null, "bug_type": null}
{"code": "def count_characters(my_string):\n    count = 0\n    for char in my_string:\n        count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "import random\narray = [1, 2, 3, 4, 5, 6]\nrandom.shuffle(array)  # shuffle list in-place using a random permutation", "line_number": null, "bug_type": null}
{"code": "def count_words(sentences):\n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        count += len(words)\n    return count", "line_number": null, "bug_type": null}
{"code": "import random\n\nfor i in range(10):\n  print(random.randint(1, 15))", "line_number": null, "bug_type": null}
{"code": "def reverse_string(input_string):\n    output_string = \"\"\n    for char in input_string:\n        output_string = char + output_string\n    return output_string", "line_number": null, "bug_type": null}
{"code": "def generate_message(name, message):\n    print(name + ' said: ' + \"'\" + message + \"'\")", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(arr): \n    result = [] \n    seen = set() \n   \n    for item in arr: \n        if item not in seen: \n            seen.add(item) \n            result.append(item) \n    return result", "line_number": null, "bug_type": null}
{"code": "def sum_array(arr): \n \n    total = 0\n    for item in arr: \n        total += item \n \n    return total\n \nprint(sum_array([2, 4, 6, 8])) \n# Output: 20", "line_number": null, "bug_type": null}
{"code": "def sum_list(numbers):\n  total = 0\n  for number in numbers:\n    total += number\n  return total", "line_number": null, "bug_type": null}
{"code": "first_string = input('Enter the main string: ')\nsecond_string = input('Enter the substring: ')\n\nif second_string in first_string:\n print(True)\nelse:\n print(False)", "line_number": null, "bug_type": null}
{"code": "def parse_int(string):\n return int(string)\n\nresult = parse_int(\"47\")\nprint(result)\n\n# Result: 47", "line_number": null, "bug_type": null}
{"code": "list = [3, 1, 6, 9, 10, 5]\nlist.sort()\nprint(list)  # prints [1, 3, 5, 6, 9, 10]", "line_number": null, "bug_type": null}
{"code": "import nltk\n\nsentence = \"I had a great day yesterday\"\n\nwords = nltk.word_tokenize(sentence)\n\ntext = nltk.Text(words)\n\npolarity_score = text.polarity_scores()\n\nprint(polarity_score)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_numbers(n):\n numbers = [random.randint(1, 1000) for _ in range(n)]\n\n return numbers", "line_number": null, "bug_type": null}
{"code": "def my_function(n):\n  sum = 1\n  for j in range(1, n+1):\n    sum *= j\n  return sum", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_matrix(N):\n    matrix = []\n    for i in range(N):\n        row = []\n        for j in range(N):\n            row.append(random.randint(0, 9))\n        matrix.append(row)\n    return matrix", "line_number": null, "bug_type": null}
{"code": "import random \n\ndef generate_random_letter(): \n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    letter = random.choice(letters)\n    return letter", "line_number": null, "bug_type": null}
{"code": "# input expression as a string\nexpr = \"2 * (3 + 1)\"\n\n# Evaluate the expression using eval()\nresult = eval(expr)\n\n# print the result\nprint(\"Result:\", result)", "line_number": null, "bug_type": null}
{"code": "def avg_three_nums(num1, num2, num3):\n return (num1 + num2 + num3) / 3", "line_number": null, "bug_type": null}
{"code": "def divide(a,b):\n    return a/b\n\nresult = divide(3,5)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def concat_items(items):\n    # Use join() to join the elements in the given list with an empty string\n    return \"\".join(items)", "line_number": null, "bug_type": null}
{"code": "def reverseCharacters (string):\n    reverseStr = \"\"\n    for i in range(len(string)-1, -1, -1):\n        reverseStr += string[i]\n    return reverseStr", "line_number": null, "bug_type": null}
{"code": "import re\n\nstring = \"ABCDDEFG\"\npattern = \"AB*EFG\"\nmatch = re.search(pattern, string)\n \nif match:\n    print(\"Pattern found!\")\nelse:\n    print(\"Pattern not found!\")", "line_number": null, "bug_type": null}
{"code": "class Employee:\n    def __init__(self, name, position, salary):\n        self.name = name\n        self.position = position\n        self.salary = salary\n\njohn = Employee('John', 'Software Engineer', 6000)", "line_number": null, "bug_type": null}
{"code": "def product(a, b):\n \treturn a * b\n \nprint(product(5, 10))", "line_number": null, "bug_type": null}
{"code": "def print_divisible_by_three(n):\n  for num in range(n+1):\n    if num % 3 == 0:\n      print(num, end=\" \")\n\nprint_divisible_by_three(10)", "line_number": null, "bug_type": null}
{"code": "def concat_strings(first_str, second_str):\n return first_str + second_str\n\nprint(concat_strings(\"Hello \", \"World\")) # prints \"Hello World\"", "line_number": null, "bug_type": null}
{"code": "class GradeInfo:\n    def __init__(self, name, grade):\n        self.name = name\n        self.grade = grade\n    \n    def get_name(self):\n        return self.name\n    \n    def get_grade(self):\n        return self.grade", "line_number": null, "bug_type": null}
{"code": "x = [1, 2, 3]\ny = [4, 5, 6]\n\ncombinations = [[i, j] for i in x for j in y]\nprint(combinations)", "line_number": null, "bug_type": null}
{"code": "num = input(\"Enter a number: \")\n\nnum = int(num)\n\nprint(\"The square of the number is:\", num**2)", "line_number": null, "bug_type": null}
{"code": "import re\n\ntext = \"The websites I like to visit are https://www.google.com and https://www.facebook.com\"\n\nurl_list = re.findall(r'(https?://\\S+)', text)\n\nprint(url_list)", "line_number": null, "bug_type": null}
{"code": "def sort_by_order(l, order):\n\treturn sorted(l, key = lambda x : order.index(x))", "line_number": null, "bug_type": null}
{"code": "sq_list = []\nn = 1\nwhile len(sq_list) <= 19:\n    sq_list.append(n*n)\n    n += 1\nprint(sq_list)", "line_number": null, "bug_type": null}
{"code": "def add_numbers(num1, num2):\n '''\n Function to add two numbers \n '''\n return num1 + num2 \n\n# Driver code \nprint(add_numbers(15, 7))", "line_number": null, "bug_type": null}
{"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndata = pd.read_csv('house_price-data.csv')\n\nX = data[['size']]\ny = data['price']\n\nmodel = LinearRegression()\nmodel.fit(X, y)", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n if n == 0:\n  return 1\n return n * factorial(n-1)\n\nnum = 6\nprint(\"Factorial of\", num, \"is\", factorial(num))", "line_number": null, "bug_type": null}
{"code": "if (5 > 7):\n    greater = 5\nelse:\n    greater = 7\n\nprint(\"The greater number is: \", greater)", "line_number": null, "bug_type": null}
{"code": "arr = [4, 2, 3, 5, 1]\narr.sort()\nprint(arr)", "line_number": null, "bug_type": null}
{"code": "# Create a dictionary from a list\nmy_dict = {key: value for key, value in enumerate([\"Apple\", \"Banana\", \"Carrot\"])}\n\n# Print dictionary\nprint(my_dict)", "line_number": null, "bug_type": null}
{"code": "def get_sum(n):\n    return (n*(n+1)) // 2\n\nn = 20\nsum_of_num = get_sum(n)\n\nprint(\"Sum of first\", n, \"numbers is\", sum_of_num)", "line_number": null, "bug_type": null}
{"code": "def remove_duplicate_characters(string):\n    new_string = ''\n    new_string_set = set()\n    for character in string:\n        if character not in new_string_set:\n            new_string += character\n            new_string_set.add(character)\n    return new_string", "line_number": null, "bug_type": null}
{"code": "class Person:\n  def __init__(self, name):\n    self.name = name\n    self.age = None", "line_number": null, "bug_type": null}
{"code": "def print_list(list1):\n    for element in list1:\n        print(element)\n\nlist1 = [1,2,3,4,5]\n\nprint_list(list1)", "line_number": null, "bug_type": null}
{"code": "n = int(input(\"Enter a number: \"))\nif n%2 == 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")", "line_number": null, "bug_type": null}
{"code": "colors = [\"red\", \"green\", \"blue\"]\n\n#sorting in ascending order\ndesc_colors = sorted(colors)\n\nprint(\"Colors in alphabetical order:\", desc_colors)", "line_number": null, "bug_type": null}
{"code": "def create_dict(a, b):\n    dictionary = {}\n    for i in range(len(a)):\n        dictionary[a[i]] = b[i]\n    return dictionary", "line_number": null, "bug_type": null}
{"code": "import json\ndata = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\nmy_dict = json.loads(data)", "line_number": null, "bug_type": null}
{"code": "def clear_dictionary(d): \n    keys = list(d.keys()) \n    for key in keys: \n        del d[key]", "line_number": null, "bug_type": null}
{"code": "def reverse(string): \n\tif len(string) == 0: \n\t\treturn string \n\telse: \n\t\treturn reverse(string[1:]) + string[0] \n\n# Driver code \nstring = \"Python\"\n\nprint (reverse(string))", "line_number": null, "bug_type": null}
{"code": "list1 = [1, 2, 3, 4]\nlist2 = [5, 6, 7, 8]\n\nresult = [x * y for x, y in zip(list1, list2)]", "line_number": null, "bug_type": null}
{"code": "def add_two_lists(l1, l2):\n    return [x + y for x, y in zip(l1, l2)]", "line_number": null, "bug_type": null}
{"code": "import requests\nimport lxml.html as lh\n\nurl = 'https://www.example.com/'\npage = requests.get(url)\ndoc = lh.fromstring(page.content)\n\n# parse and extract data from webpage\ndata = doc.xpath('//p/text()')", "line_number": null, "bug_type": null}
{"code": "import hashlib\n\ndef encrypt_string(text):\n    result = hashlib.sha256(text.encode()).hexdigest()\n    return result\n\nencrypted_string = encrypt_string(\"Hello, World!\")\nprint(encrypted_string)", "line_number": null, "bug_type": null}
{"code": "import matplotlib.pyplot as plt\ndef visualize_data(x_data, y_data):\n plt.scatter(x_data, y_data)\n plt.xlabel('x data')\n plt.ylabel('y data')\n plt.title('2D Scatterplot')\n plt.show()", "line_number": null, "bug_type": null}
{"code": "def calculateSum(a, b):\n    return a + b\n\nsum = calculateSum(5, 6)\nprint(sum)", "line_number": null, "bug_type": null}
{"code": "def calculate_sum(n):\n sum_total = 0\n for i in range(n+1):\n  sum_total += i\n return sum_total\n\nprint(calculate_sum(10)) # Output: 55", "line_number": null, "bug_type": null}
{"code": "class MyClass:\n    def __init__(self, attr1, attr2):\n        self.attr1 = attr1\n        self.attr2 = attr2\n    \n    def my_method(self):\n        # Do something\n        pass", "line_number": null, "bug_type": null}
{"code": "dict = {\n 'chair': 4,\n 'table': 2,\n 'sofa': 5\n}", "line_number": null, "bug_type": null}
{"code": "def compare_string_length(str1, str2):\n    if len(str1) > len(str2):\n        return str1\n    else:\n        return str2", "line_number": null, "bug_type": null}
{"code": "def count_words(string):\n    words = {}\n    for word in string.split():\n        if word in words:\n            words[word] += 1\n        else:\n            words[word] = 1\n    return words", "line_number": null, "bug_type": null}
{"code": "def sum_nested_list(lst):\n    total = 0\n    for i in lst:\n        if isinstance(i,list):\n            total += sum_nested_list(i)\n        else:\n            total += i\n    return total", "line_number": null, "bug_type": null}
{"code": "import math\n\n# Calculate the square root of 68\nsqrt_num = math.sqrt(68)\n\n# Print the result\nprint(\"The square root of 68 is:\", sqrt_num)", "line_number": null, "bug_type": null}
{"code": "from bs4 import BeautifulSoup\nimport requests\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\n\nsoup = BeautifulSoup(response.text, 'lxml')\nfor link in soup.find_all('a'):\n    print(link.get('href'))", "line_number": null, "bug_type": null}
{"code": "def find_common(set_a, set_b):\n  return [item for item in set_a if item in set_b]", "line_number": null, "bug_type": null}
{"code": "import random\n\n# Function to generate random numbers \ndef random_number(start, end): \n\treturn random.randint(start, end) \n\n# Driver code\nstart = 1\nend = 10\nprint(random_number(start, end))", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ncharacters = string.ascii_lowercase + string.digits + string.ascii_uppercase\npassword =  \"\".join(random.choice(characters) for x in range(6))\nprint(password)", "line_number": null, "bug_type": null}
{"code": "import random\n\n# generate the sequence\nsequence_length = 10\nsequence = [] \nfor i in range(sequence_length):\n  sequence.append(random.randint(1, 10))\n\nprint(sequence)", "line_number": null, "bug_type": null}
{"code": "my_list = [10,2,5,1,20]\n\nfor x in my_list:\n    print(x)\n    \nfor x in sorted(my_list, reverse=True):\n    print(x)", "line_number": null, "bug_type": null}
{"code": "powers_list = [] \nfor i in range(0,6): \n    powers_list.append(3**i) \n  \nprint(powers_list)", "line_number": null, "bug_type": null}
{"code": "def sum_squares(s):\n    total = 0\n    for x in s:\n        total += x * x\n    return total", "line_number": null, "bug_type": null}
{"code": "class Person:\n  def __init__(self, name, job, age):\n    self.name = name\n    self.job = job\n    self.age = age", "line_number": null, "bug_type": null}
{"code": "def list_average(numbers):\n    total = sum(numbers)\n    length = len(numbers)\n    return total/length", "line_number": null, "bug_type": null}
{"code": "def find_largest_number(nums):\n    highest_num = nums[0]\n    for i in nums:\n        if i>highest_num:\n            highest_num = i\n    return highest_num", "line_number": null, "bug_type": null}
{"code": "import os\n\npath = \".\"\n\nfor dirName, subdirList, fileList in os.walk(path):\n print(os.path.abspath(dirName))", "line_number": null, "bug_type": null}
{"code": "for i in range(10): \n    print(\"Perfect square at position\", i+1, \"is\", (i+1)*(i+1))", "line_number": null, "bug_type": null}
{"code": "def sumN(num): \n  response = 0\n  for i in range(1, num + 1):\n    response += i\n  return response", "line_number": null, "bug_type": null}
{"code": "def remove_num(myList, num):\n    return [x for x in myList if x != num]\n  \nremoved_list = remove_num(list, 2)\nprint(removed_list)", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n return 1 if n in (0, 1) else n * factorial(n - 1)", "line_number": null, "bug_type": null}
{"code": "def is_prime(n):\n    if n <= 1: \n        return False\n    for i in range(2, n): \n        if n % i == 0: \n            return False\n    return True", "line_number": null, "bug_type": null}
{"code": "def search(target, array):\n  for item in array:\n    if target == item:\n      return True\n   \n  return False", "line_number": null, "bug_type": null}
{"code": "def celsius_to_fahrenheit(celsius):\n    return (celsius * 9 / 5 + 32)\n\ntemperature_in_fahrenheit = celsius_to_fahrenheit(24)\nprint(temperature_in_fahrenheit)", "line_number": null, "bug_type": null}
{"code": "class HashTable:\n    def __init__(self):\n        self.table = {}\n    \n    def put(self, key, value):\n        self.table[key] = value\n    \n    def get(self, key):\n        return self.table.get(key)", "line_number": null, "bug_type": null}
{"code": "list_values = [21, 15, 11, 17, 12, 29]\nmax_value = max(list_values)", "line_number": null, "bug_type": null}
{"code": "def generate_html(text): \n    \n    html_string = \"\"\n    for line in text.splitlines():\n        html_string += \"<p align=\\\"justify\\\">{}</p>\\n\".format(line)\n    \n    return html_string", "line_number": null, "bug_type": null}
{"code": "import random\nimport string\n\ndef generate_password():\n char_list = list(string.ascii_letters + string.digits + string.punctuation)\n random.shuffle(char_list)\n return ''.join(char_list[:20])\n\nprint(generate_password())", "line_number": null, "bug_type": null}
{"code": "def longer_string(string1, string2):\n    if len(string1) > len(string2):\n        return string1\n    else:\n        return string2", "line_number": null, "bug_type": null}
{"code": "import sys\n\ndef get_object_size(obj):\n    #Return the size of the object in bytes\n    return sys.getsizeof(obj)", "line_number": null, "bug_type": null}
{"code": "def sort_by_second_elem(tuple_list):\n    return sorted(tuple_list, key=lambda x: x[1])", "line_number": null, "bug_type": null}
{"code": "# Print numbers 1 to 10\nfor num in range(1, 11):\n    print(num)", "line_number": null, "bug_type": null}
{"code": "def calculate_future_value(principal, interest_rate, num_years):\n    return principal * (1 + interest_rate)**num_years", "line_number": null, "bug_type": null}
{"code": "import json\n\ndata = '{\"name\": \"John\", \"age\": 30, \"hobby\": \"running\"}'\ndict_data = json.loads(data)\n\nprint(dict_data)", "line_number": null, "bug_type": null}
{"code": "def sum(*args):\n   total = 0\n   for arg in args:\n       total += arg\n   return total", "line_number": null, "bug_type": null}
{"code": "def average(x, y):\n return (x + y) / 2\n\nresult = average(10, 15)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "dict = {}\n\ndict['Alice'] = {'Age': 30, 'Gender': 'Female'}\ndict['Bob'] = {'Age': 20, 'Gender': 'Male'}", "line_number": null, "bug_type": null}
{"code": "def power_of(x, n):\n    result = 1\n    for i in range(n):\n        result = result * x\n    return result\n\npower = power_of(2, 5)\nprint(power)", "line_number": null, "bug_type": null}
{"code": "class ReverseString:\n    def __init__(self, s):\n        self.s = s \n\n    def reverse(self):\n        return self.s[::-1]\n\nmy_string = ReverseString('Hello World!')\nprint(my_string.reverse())", "line_number": null, "bug_type": null}
{"code": "import matplotlib.pyplot as plt\n\ndef generate_bar_chart(df):\n x = df.columns[0]\n y = df.columns[1]\n df.plot.bar(x,y)\n plt.show()", "line_number": null, "bug_type": null}
{"code": "def create_acronym(sentence):\n    acronym = ''\n    words = sentence.split(' ')\n    for word in words:\n        acronym += word[0].upper()\n    return acronym", "line_number": null, "bug_type": null}
{"code": "sequence = [2, 8, 6, 4, 1, 9, 5]\n\ntop_5 = sorted(sequence)[-5:]\n\nprint(top_5)", "line_number": null, "bug_type": null}
{"code": "import statistics\n\ndata_set = [2,4,4,4,5,5,7,9]\nprint(round(statistics.stdev(data_set),2))", "line_number": null, "bug_type": null}
{"code": "def title_case(phrase):\n    words = phrase.split()\n    result = []\n    for word in words:\n        result.append(word[0].upper() + word[1:].lower())\n    \n    return ' '.join(result)", "line_number": null, "bug_type": null}
{"code": "from datetime import datetime\n\nnow = datetime.now()\n\nprint(\"Today's date is\", now.strftime(\"%A, %B %dth, %Y, at %I:%M%p\"))", "line_number": null, "bug_type": null}
{"code": "def check_if_all_in_list_2(list1, list2):\n    for item in list1: \n        if item not in list2: \n            return False\n    return True", "line_number": null, "bug_type": null}
{"code": "data = {\n 'Fruits':[\n  'Apple',\n  'Banana',\n  'Orange'\n ], \n 'Vegetables':[\n  'Carrot',\n  'Cucumber',\n  'Potato'\n ]\n}\n \nprint(data)", "line_number": null, "bug_type": null}
{"code": "import matplotlib.pyplot as plt\nimport numpy as np\n \narr = np.array([1,2,3,4,5,6])\n \nplt.hist(arr)\nplt.title(\"Distribution of values in the given array\")\nplt.show()", "line_number": null, "bug_type": null}
{"code": "def generate_matrix(N):\n    matrix = [] \n    for i in range(N): \n        row = [] \n        for j in range(N): \n            row.append(i * N + j) \n        matrix.append(row) \n    return matrix", "line_number": null, "bug_type": null}
{"code": "class Rectangle:\n   def __init__(self, length, width):\n      self.length = length\n      self.width  = width", "line_number": null, "bug_type": null}
{"code": "import pandas as pd\n\nairports = pd.read_csv('/path/to/airports/csv/file.csv')\ntop_airports = airports.sort_values('Total_Arrivals', ascending=False).head(2)\nprint(top_airports)", "line_number": null, "bug_type": null}
{"code": "def search_element(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i \n\n    return -1", "line_number": null, "bug_type": null}
{"code": "import re\n\ndef extract_numbers(string): \n    numbers = re.findall('\\d+', string)\n    return numbers\n\nstring = \"The 3 monkeys had 2 apples\"\nprint(extract_numbers(string))", "line_number": null, "bug_type": null}
{"code": "import random\n\nrand_nums = [random.randint(1,10) for x in range(5)]\nprint(rand_nums)", "line_number": null, "bug_type": null}
{"code": "nums = [11, 12, 15, 20, 56]\n\ntotal = 0\nfor num in nums:\n    total += num\n \nprint(total) # 110", "line_number": null, "bug_type": null}
{"code": "def find_sum(n): \n   return n * (n + 1) // 2\n  \nprint(find_sum(10))", "line_number": null, "bug_type": null}
{"code": "def func(string): \n    return [s.upper() for s in string]\n\nlist_out = func(\"hello\")", "line_number": null, "bug_type": null}
{"code": "def reverseString(str): \n  s = \"\" \n  for i in str: \n    s = i + s\n  return s \n\nprint(reverseString('Hello World!'))\t# Output: !dlroW olleH", "line_number": null, "bug_type": null}
{"code": "def sum_up_to_number(number):\n   sum_number = 0\n   for num in range(1,number+1):\n      sum_number += num\n   return sum_number", "line_number": null, "bug_type": null}
{"code": "def linearSearch(arr, x): \n  \n    for i in range(len(arr)): \n  \n        if arr[i] == x: \n            return i \n  \n    return -1", "line_number": null, "bug_type": null}
{"code": "import random\n\n# Simulate a dice roll by randomly selecting a number between 1 and 6\ndie_roll = random.randint(1, 6)\nprint(\"You rolled a\", die_roll)", "line_number": null, "bug_type": null}
{"code": "def average(a, b, c):\n    return (a + b + c) / 3.0\n\nprint(average(1,2,3)) # Output: 2.0", "line_number": null, "bug_type": null}
{"code": "i = 1\nwhile i <= 10:\n  print(i)\n  i += 1", "line_number": null, "bug_type": null}
{"code": "def is_sorted(array):\n    for i in range(len(array)-1):\n        if array[i] > array[i+1]:\n            return False\n    return True", "line_number": null, "bug_type": null}
{"code": "import datetime\n\ndate_str = \"21 October 2020\"\ndate = datetime.datetime.strptime(date_str, \"%d %B %Y\")\nprint(date.strftime(\"%A\"))", "line_number": null, "bug_type": null}
{"code": "def classify_string(string):\n    if len(string) < 3:\n        return \"Short\" \n    elif string.isalpha():\n        return \"Alphabet\" \n    elif string.isnumeric():\n        return \"Numeral\"", "line_number": null, "bug_type": null}
{"code": "class ClickCounter:\n    def __init__(self):\n        self.click_count = 0\n\n    def record_click(self):\n        self.click_count += 1\n\n    def get_click_count(self):\n        return self.click_count", "line_number": null, "bug_type": null}
{"code": "import flask\n\napp = flask.Flask(__name__)\n\n# Create routes and functions for the web application\n@app.route('/')\ndef index():\n    return 'This is the main page of the web application!'", "line_number": null, "bug_type": null}
{"code": "val = [1, 10, 125, 400]\nres = []\n\nfor v in reversed(val):\n    res.append(v)\n    \nprint(res) # Output: [400, 125, 10,1]", "line_number": null, "bug_type": null}
{"code": "def is_power_of_two(x):\n  while x % 2 == 0 and x > 1:\n    x = x / 2\n  return x == 1\n\nnum = 16\n\nprint(is_power_of_two(num))", "line_number": null, "bug_type": null}
{"code": "def normalize_string(text):\n\ttext = text.lower()\n\ttext = ''.join(ch for ch in text if ch.isalnum() or ch == ' ')\n\treturn text", "line_number": null, "bug_type": null}
{"code": "numbers = [1, 2, 3, 4, 5]\n\nnew_numbers = [n * 2 for n in numbers]", "line_number": null, "bug_type": null}
{"code": "def asterisk_triangle(n):\n    for i in range(n):\n        for j in range(i+1):\n            print('*', end=\" \")\n        print()\n\nn = 5\nasterisk_triangle(n)", "line_number": null, "bug_type": null}
{"code": "s = 'Google'\n# improved code\n# use of built-in functions to count the number of occurrences of 'o' in a string\ncount = s.count('o')\n\nprint('Number of occurrences of \"o\": {}'.format(count))", "line_number": null, "bug_type": null}
{"code": "def print_numbers():\n    for i in range(1, 11):\n        print(i)\n\nprint_numbers()", "line_number": null, "bug_type": null}
{"code": "def pad_string(string, character, length):\n    padded_string = string \n    while len(padded_string) < length:\n        padded_string = character + padded_string\n    return padded_string", "line_number": null, "bug_type": null}
{"code": "class Customer:\n    def __init__(self,name, email, phone_number, address):\n        self.name = name\n        self.email = email\n        self.phone_number = phone_number\n        self.address = address", "line_number": null, "bug_type": null}
{"code": "# Initialize the expression\nexpression = \"2 + 3 - 5 * 4 + 7 / 6\"\n\n# Evaluate the expression\nresult = eval(expression)\n\n# Print the result\nprint(\"Result of the expression:\", result)", "line_number": null, "bug_type": null}
{"code": "import requests\n\nurl = 'https://example.org/api?name=test'\nresponse = requests.get(url)\ndata = response.json()\nresult = data['result']", "line_number": null, "bug_type": null}
{"code": "values = [14, 16, 2]\n \nhighest = values[0]\n \nfor i in values:\n    if highest < i:\n        highest = i\n \nprint(\"The highest value is: \", highest)", "line_number": null, "bug_type": null}
{"code": "def search_dictionary(dictionary, keys):\n    output = []\n    for key in keys:\n        output.append(dictionary[key])\n    return output", "line_number": null, "bug_type": null}
{"code": "import math\n\ndef hypotenuse(a, b):\n    return math.sqrt(a**2 + b**2)\n\nprint(hypotenuse(3, 4))", "line_number": null, "bug_type": null}
{"code": "from datetime import datetime\n\ndate = datetime.today()\ndate_formatted = date.strftime('%m/%d/%Y')\nprint(date_formatted)", "line_number": null, "bug_type": null}
{"code": "def getMax(list):\n    max = 0\n    for num in list:\n        if num > max:\n            max = num\n    return max\n\nlist = [2, 5, 3, 7]\nprint(getMax(list))", "line_number": null, "bug_type": null}
{"code": "def is_divisible_by_three(num):\n  if num % 3 == 0:\n    return True\n  return False", "line_number": null, "bug_type": null}
{"code": "def flatten_list(nested_list):\n    flattened_list = []\n    for item in nested_list:\n        if type(item) == list:\n            flattened_list.extend(flatten_list (item))\n        else:\n            flattened_list.append(item)\n    return flattened_list", "line_number": null, "bug_type": null}
{"code": "import requests\nfrom bs4 import BeautifulSoup\n\ndef count_tags(url):\n    r = requests.get(url)\n    soup = BeautifulSoup(r.text, 'html.parser')\n    count = len(soup.find_all())\n    return count", "line_number": null, "bug_type": null}
{"code": "def fahrenheit_to_celsius(fahrenheit):\n return (fahrenheit - 32) * 5/9", "line_number": null, "bug_type": null}
{"code": "def week_days():\n  week_days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n  for day in week_days:\n    print(day)\n \nweek_days()", "line_number": null, "bug_type": null}
{"code": "import random\nimport string\n\ndef random_str():\n  return ''.join(random.choices(string.ascii_letters + string.digits, k=10))\n\nprint(random_str())", "line_number": null, "bug_type": null}
{"code": "value = input(\"Please enter a string:\")\nprint(\"The reversed value is:\", value[::-1])", "line_number": null, "bug_type": null}
{"code": "def fibonacci(num):\n a, b = 0, 1\n for _ in range(num):\n  a, b = b, a + b\n return a", "line_number": null, "bug_type": null}
{"code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n        return True", "line_number": null, "bug_type": null}
{"code": "import itertools\n\nlist_nums = [1, 2, 3]\n\nperms = itertools.permutations(list_nums)\nfor perm in perms:\n  print(perm)", "line_number": null, "bug_type": null}
{"code": "user_num = int(input(\"Enter an integer: \"))\nfor i in range(1, user_num+1):\n print(i)", "line_number": null, "bug_type": null}
{"code": "def div(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by 0\")\n    return x / y", "line_number": null, "bug_type": null}
{"code": "def vowel_count(string):\n  count = 0\n  vowels = 'aeiou'\n  for char in string.lower():\n    if char in vowels:\n      count += 1\n  \n  return count\n\nprint(vowel_count(\"Hello World\"))", "line_number": null, "bug_type": null}
{"code": "def odd_or_even(number):\n    # your code here\n    if number % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"", "line_number": null, "bug_type": null}
{"code": "def count_characters(string):\n    counts = {}\n    for s in string:\n        counts[s] = counts.get(s, 0) + 1\n    return counts\n\nresult = count_characters('python')\nprint(result)", "line_number": null, "bug_type": null}
{"code": "import threading\n \ndef print_message():\n    print(\"Hello World\")\n \n# create thread object\nthread_obj = threading.Thread(target=print_message)\n \n# start thread\nthread_obj.start()", "line_number": null, "bug_type": null}
{"code": "class Coach:\n    def __init__(self, name, team):\n        self.name = name\n        self.team = team\n\n    def __str__(self):\n        return f\"The coach of {self.team} is {self.name}.\"", "line_number": null, "bug_type": null}
{"code": "def word_count_average_len(sentence):\n    words = sentence.split()\n    sum_length = 0\n    for word in words:\n        sum_length += len(word)\n    return len(words), sum_length/len(words)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef createRandomList():\n    result = []\n    for i in range(5):\n        result.append(random.randint(-15, 15))\n\n    return result\n\nprint(createRandomList())", "line_number": null, "bug_type": null}
{"code": "def filter_words_with_a(words):\n return [word for word in words if \"a\" in word]", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_random_int_list(n):\n  return [random.randint(0,10) for i in range(n)]", "line_number": null, "bug_type": null}
{"code": "import random \n\nlength = 8\nstring = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\nrand_str = ''.join(random.sample(string,length))\n\nprint(rand_str)", "line_number": null, "bug_type": null}
{"code": "def print_uppercase(s):\n    for c in s:\n        if c.isupper():\n            print(c)\n\nprint_uppercase(\"Hello World\")\n# Output:\n# H\n# W", "line_number": null, "bug_type": null}
{"code": "def is_alpha(word): \n    if word.isalpha(): \n        return True \n    else: \n        return False", "line_number": null, "bug_type": null}
{"code": "import itertools\n\nwords = [\"cat\", \"dog\", \"pizza\", \"coffee\"]\ncombinations = list(itertools.combinations(words, 2))\n\nfor i in range(len(combinations)):\n    print(combinations[i])", "line_number": null, "bug_type": null}
{"code": "list_items = ['a', 'b', 'c', 'd', 'e']\ntarget_item = 'c'\n\nindex = list_items.index(target_item) if target_item in list_items else None", "line_number": null, "bug_type": null}
{"code": "CaseString = \"THIS IS A STRING.\"\n\ndef sentence_case(CaseString):\n    return CaseString.capitalize()\n\nprint(sentence_case(CaseString))", "line_number": null, "bug_type": null}
{"code": "def find_smallest_number(array):\n    smallest = array[0]\n    for element in array:\n        if element < smallest:\n            smallest = element\n    return smallest", "line_number": null, "bug_type": null}
{"code": "languages = [\"Python\", \"C++\", \"Java\", \"Javascript\", \"Ruby\"]\n\nfor language in languages:\n    print(language)", "line_number": null, "bug_type": null}
{"code": "def sort_list(list_of_tuples): \n    list_of_tuples.sort(key = lambda x: x[1]) \n    return list_of_tuples", "line_number": null, "bug_type": null}
{"code": "def create_squares_list():\n    squares_list = []\n    for i in range(1, 101):\n        squares_list.append(i**2)\n    return squares_list", "line_number": null, "bug_type": null}
{"code": "def number_of_common_letters(s1, s2):\n    common_letters = 0\n    for c in s1:\n        if c in s2:\n            common_letters += 1\n    return common_letters", "line_number": null, "bug_type": null}
{"code": "def binary_to_decimal(binary):\n  decimal = 0\n  binary = binary[::-1]\n  for i, num in enumerate(binary):\n    if num == '1':\n      decimal += pow(2, i)\n  return decimal", "line_number": null, "bug_type": null}
{"code": "from collections import Counter\n\ndef count_alphabets(str):\n    return Counter(str.lower())\n\nmy_str = \"The Quick Brown Fox Jumps Over the Lazy Dog\"\nalphabet_count = count_alphabets(my_str)\n\nprint(alphabet_count)", "line_number": null, "bug_type": null}
{"code": "import requests \n  \ndef check_url(url): \n    try:\n        response = requests.get(url)\n        if response.status_code == 200:\n            return True\n        else:\n            return False\n    except:\n        return False", "line_number": null, "bug_type": null}
{"code": "def classify_number_bigger_5(number):\n    return [1 if n > 5 else 0 for n in number]", "line_number": null, "bug_type": null}
{"code": "data = [20, 15, 8, 44, 67]\n\nfor i in data:\n    if i%2 == 0:\n        print (i)", "line_number": null, "bug_type": null}
{"code": "# Accepting user input\nname = input(\"Please enter your name: \")\n\n# Printing out the user input\nprint(\"Hello, \",  name, \"!\")", "line_number": null, "bug_type": null}
{"code": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.example.com\"\n\npage = requests.get(url)\n\nsoup = BeautifulSoup(page.text, 'html.parser')\n\ncontent = soup.find_all('p')\n\nprint(content)", "line_number": null, "bug_type": null}
{"code": "data = [1, 2, 3, 4] \n\n# insert element '5' at 5th position \ndata.insert(4, 5) \nprint(\"Modified list:\") \nprint(data)", "line_number": null, "bug_type": null}
{"code": "class Person:\n    def __init__(self, *args):\n        self.name = args[0]\n        self.age = args[1]\n        self.weight = args[2]", "line_number": null, "bug_type": null}
{"code": "# Create a list\nlist = ['apple', 'orange', 'banana']\n\n# Loop over the list\nfor item in list:\n    print(item)", "line_number": null, "bug_type": null}
{"code": "def sum_diff_pair(arr):\n    total = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            total += abs(arr[i]-arr[j])\n    return total", "line_number": null, "bug_type": null}
{"code": "def reverse_array(arr):\n    return arr[::-1]\n\narr = [1, 2, 3, 4, 5]\nprint(reverse_array(arr))", "line_number": null, "bug_type": null}
{"code": "def sortStrings(wordsList):\n    sorted_list = sorted(wordsList)\n    return sorted_list\n \nwordsList = [\"apple\", \"banana\", \"mango\", \"pear\"]\nsorted_words = sortStrings(wordsList)\nprint(sorted_words)", "line_number": null, "bug_type": null}
{"code": "class Person:\n    def __init__(self, data):\n        self.name = data['name']\n        self.age = data['age']\n        self.city = data['city']", "line_number": null, "bug_type": null}
{"code": "def concat_strings(a, b):\n    return a + b\n\nresult = concat_strings(\"Hello \", \"world!\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def nth_row_pascal(n):\n    row = [1]\n    for k in range(max(n,0)):\n        row.append(row[k] * (n-k) // (k+1))\n    return row", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    result = 1\n    for i in range(2, n+1):\n        result *= i\n    return result", "line_number": null, "bug_type": null}
{"code": "evens = (x for x in range(1, 11) if x % 2 == 0 and x != 7)\nfor x in evens:\n    print(x)", "line_number": null, "bug_type": null}
{"code": "# This function prints the values 1 to 10\ndef print_numbers(): \n    for i in range(1,11): \n        print(\"The number is \" + str(i)) \n          \nprint_numbers()", "line_number": null, "bug_type": null}
{"code": "def is_substring(s1, s2):\n    return s1 in s2\n\nsubstring = is_substring('foo', 'foobar')\n\nprint(substring) # Output: True", "line_number": null, "bug_type": null}
{"code": "def count_zeros(list):\n    count = 0\n    for num in list:\n        if num == 0:\n            count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "try:\n  user_input = int(input(\"Please enter an integer: \"))\nexcept ValueError:\n  print(\"That's not an integer!\")", "line_number": null, "bug_type": null}
{"code": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1 \n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "line_number": null, "bug_type": null}
{"code": "my_list = []\n\nwhile True:\n    user_input = input('Type something: ')\n    if user_input == 'stop':\n        break\n    my_list.append(user_input)\n\nprint(my_list)", "line_number": null, "bug_type": null}
{"code": "import numpy as np\na = np.arange(0, 101, 10)\nb = np.zeros(101)\nfor i in range(1, 101):\n    b[i] = 5 * i", "line_number": null, "bug_type": null}
{"code": "def to_upper(s):\n    return s.upper()\n\nresult = to_upper(\"This is a sample sentence.\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "primes = []\n\nfor num in range(2, 1001):  \n  \n for i in range(2, num):\n  if (num % i) == 0:\n   break\n else:\n  primes.append(num)\n\nprint(primes)", "line_number": null, "bug_type": null}
{"code": "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def get_point(self):\n        return (self.x, self.y)", "line_number": null, "bug_type": null}
{"code": "def find_highest_peak(arr):\n  highest_peak = arr[0]\n  for i in range(1, len(arr)): \n    highest_peak = max(highest_peak, arr[i]) \n  return highest_peak", "line_number": null, "bug_type": null}
{"code": "def combine_string_lengths(word1, word2): \n  return len(word1) + len(word2)", "line_number": null, "bug_type": null}
{"code": "import numpy as np\n\nrandom_vector = np.random.random(10)\nprint(\"Random Vector of size 10: \\n\", random_vector)", "line_number": null, "bug_type": null}
{"code": "months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\nfor month in months:\n    print(month)", "line_number": null, "bug_type": null}
{"code": "def nth_smallest(numbers, n): \n    numbers.sort() \n  \n    return numbers[n-1]", "line_number": null, "bug_type": null}
{"code": "def maxMinDifference(arr):\n    return max(arr)-min(arr)\n\nresult = maxMinDifference([3, 4, 7, 8, 12])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def power(base, exponent):\n    answer = 1\n    while exponent > 0:\n        if exponent & 1:\n            answer *= base\n        base *= base\n        exponent >>= 1\n    return answer", "line_number": null, "bug_type": null}
{"code": "def getStringLength(my_string): \n    # Initialize counter  \n    count = 0\n  \n    for s in my_string: \n        count+= 1\n  \n    return count", "line_number": null, "bug_type": null}
{"code": "result = [x * y for x in range(10) for y in range(10)]", "line_number": null, "bug_type": null}
{"code": "def sum_numbers(arr):\n    result = 0\n    for num in arr:\n        result += num\n    return result", "line_number": null, "bug_type": null}
{"code": "def is_odd_number(num):\n    if num % 2 != 0:\n        return True\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "def string_to_int(string):\n    result = 0\n    for char in string:\n        result = result*10 + (ord(char) - ord('0')) \n    return result", "line_number": null, "bug_type": null}
{"code": "arr = [34, 48, 19, 61, 3] \n  \n# Finds the minimum element \nprint (\"The minimum element is \" + str(min(arr)))", "line_number": null, "bug_type": null}
{"code": "import uuid\n\n# Generate a random ticket ID\nticket_id = uuid.uuid4()\n\n# Print the ticket ID\nprint(\"Your ticket ID is:\", ticket_id)", "line_number": null, "bug_type": null}
{"code": "import random\n\nrandom_numbers = [random.randint(1, 10) for i in range(20)]", "line_number": null, "bug_type": null}
{"code": "def get_negative_numbers(numbers):\n  return [num for num in numbers if num < 0]", "line_number": null, "bug_type": null}
{"code": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None", "line_number": null, "bug_type": null}
{"code": "def reverse_words(string):\n    words = string.split(\" \")\n    output_string = \"\"\n    for word in words:\n        output_string += word[::-1] + \" \"\n    return output_string.strip()", "line_number": null, "bug_type": null}
{"code": "import random\n\nrandom_numbers = []\n\nfor i in range(5):\n number = random.randint(0,100)\n random_numbers.append(number)\n print(random_numbers)", "line_number": null, "bug_type": null}
{"code": "def isPalindrome(text):\n text = text.lower()\n return text == text[::-1]\n\n# Testing\n\nprint(isPalindrome(\"Mom\")) # Should return True\nprint(isPalindrome(\"Apple\")) # Should return False", "line_number": null, "bug_type": null}
{"code": "def count_vowels(string):\n    count = 0\n    for character in string:\n        if character in 'aeiouAEIOU':\n            count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "x = 5\n\ndef evaluate_expression(x):\n    y = (1 / x) + (x ** 2)\n    return y", "line_number": null, "bug_type": null}
{"code": "def largest(array):\n largest = array[0]\n for i in range(1, len(array)):\n  if array[i] > largest:\n   largest = array[i]\n return largest", "line_number": null, "bug_type": null}
{"code": "def print_pattern(n):\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            print(j, end=\"\")\n        print(\"\")\n\nprint_pattern(5)", "line_number": null, "bug_type": null}
{"code": "primes_list = [num for num in range(2, 1000) if all(num % i != 0 for i in range(2, num))]", "line_number": null, "bug_type": null}
{"code": "def to_binary(num): \n    # convert to a binary number\n    if num > 1: \n        to_binary(num // 2)\n    print(num % 2,end = '')", "line_number": null, "bug_type": null}
{"code": "def add_odds(list):\n  odd_list = filter(lambda num: num%2==1, list)\n  return list(odd_list)", "line_number": null, "bug_type": null}
{"code": "words = ['apple', 'cat', 'elephant', 'banana', 'dog']\n\nfiltered_words = []\n\nfor word in words:\n    if len(word) >= 4:\n        filtered_words.append(word)\n\nprint(filtered_words)", "line_number": null, "bug_type": null}
{"code": "import datetime\n\ndef convert_to_unix_time_stamp(date):\n    date_object = datetime.datetime.strptime(date, \"%d/%m/%Y\")\n    \n    return date_object.timestamp()", "line_number": null, "bug_type": null}
{"code": "def str_to_int(lst):\n  int_lst = []\n  for i in lst:\n    int_lst.append(int(i))\n  return int_lst", "line_number": null, "bug_type": null}
{"code": "def countLetters(sentence): \n    counts = dict() \n    for c in sentence: \n        if c in counts: \n            counts[c] += 1\n        else: \n            counts[c] = 1\n  \n    return counts", "line_number": null, "bug_type": null}
{"code": "max_func = lambda a, b, c : max(a,b,c)\nprint(max_func(3, 12, 7))", "line_number": null, "bug_type": null}
{"code": "def get_intersection(list1, list2):\n    intersection = []\n    for element in list1:\n        if element in list2:\n            intersection.append(element)\n    return intersection", "line_number": null, "bug_type": null}
{"code": "my_list = [\"Paul\", \"John\", \"George\", \"Ringo\"]\nmy_list.sort() \nprint(my_list)", "line_number": null, "bug_type": null}
{"code": "# creating an empty array \narray = [] \n  \n# loop for iterating over \nfor i in range(11): \n    array.append(i) \n  \n# print the array \nprint(array)", "line_number": null, "bug_type": null}
{"code": "x = int(input(\"Enter the first number: \"))\ny = int(input(\"Enter the second number: \"))\n\nmaximum = x if x > y else y\n\nprint(\"The maximum of two numbers is\", maximum)", "line_number": null, "bug_type": null}
{"code": "string = \"Hello World\"\ncharacter = 'l'\n\nindex = string.index(character)\nprint(index)", "line_number": null, "bug_type": null}
{"code": "def search(name_list, name): \n    for i in range(len(name_list)): \n        if name_list[i] == name: \n            return i \n    return -1", "line_number": null, "bug_type": null}
{"code": "def squares(n):\n    return [x*x for x in range(1,n+1)]\n\nprint(squares(10))", "line_number": null, "bug_type": null}
{"code": "def find_duplicates(arr): \n    seen = set() \n    duplicates = []\n    for value in arr:\n        if value in seen:\n            duplicates.append(value)\n        else:\n            seen.add(value)\n    return duplicates", "line_number": null, "bug_type": null}
{"code": "import random\n\nfor i in range(5):\n    print(random.randint(0, 10))", "line_number": null, "bug_type": null}
{"code": "even_dict = {k: v for k, v in enumerate([1, 2, 3, 4, 5]) if v % 2 == 0}", "line_number": null, "bug_type": null}
{"code": "def mph_to_kph(speed):\n kph = speed * 1.609\n return kph", "line_number": null, "bug_type": null}
{"code": "from datetime import date\n\ndef format_date(date_str, start_format, end_format):\n    date_obj = date.strptime(date_str, start_format)\n    return date_obj.strftime(end_format)", "line_number": null, "bug_type": null}
{"code": "class Player:\n    def __init__(self, name, health, gold):\n        self.name = name\n        self.health = health\n        self.gold = gold", "line_number": null, "bug_type": null}
{"code": "def count_words(string):\n    words = string.split(\" \")\n    num_words = len(words)\n    return num_words\n\nresult = count_words(\"This is a test string\")\nprint(\"Number of words:\", result)", "line_number": null, "bug_type": null}
{"code": "def absolute_value(x):\n    if x < 0:\n        return -x\n    else:\n        return x", "line_number": null, "bug_type": null}
{"code": "def round_up(value):\n    \"\"\"Rounds up a number to the next decimal.\"\"\"\n    return int(value * 10) / 10", "line_number": null, "bug_type": null}
{"code": "def unique_elements(lst): \n    elements = []  \n    for num in lst: \n        if num not in elements: \n            elements.append(num) \n    return list(set(elements))", "line_number": null, "bug_type": null}
{"code": "base = float(input('Enter the base:'))\nheight = float(input('Enter the height:'))\n\ndef areaOfTriangle(base, height):\n return 0.5 * base * height\n\nprint(areaOfTriangle(base, height))", "line_number": null, "bug_type": null}
{"code": "def count_char(my_list, char):\n    count = 0\n    for i in my_list:\n        if i == char:\n            count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n\nfor day in days:\n    print(day)", "line_number": null, "bug_type": null}
{"code": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://example.com\"\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ntext = soup.get_text()\nprint(text)", "line_number": null, "bug_type": null}
{"code": "def sort_words(str):\n words = str.split(' ')\n words = set(words)\n words = list(words)\n words.sort()\n return words", "line_number": null, "bug_type": null}
{"code": "def index_min(arr):\n    min_index = 0\n    for i in range(1,len(arr)):\n        if arr[i] < arr[min_index]:\n            min_index = i\n    return min_index", "line_number": null, "bug_type": null}
{"code": "nums = [1, 4, 9, 16] \nfor num in nums:\n  print(num ** 0.5)", "line_number": null, "bug_type": null}
{"code": "# Define function\ndef replace_substring(string, substring, replacement):\n    return string.replace(substring, replacement)\n\t\n# Call function\nprint(replace_substring(\"hello world\", \"world\", \"Earth\")) \n# Output hello Earth", "line_number": null, "bug_type": null}
{"code": "def sort_dictionary_keys(d):\n  return {k: d[k] for k in sorted(d, reverse=True)}", "line_number": null, "bug_type": null}
{"code": "def multiplyListByNumber(list, number):\n  return [element*number for element in list]", "line_number": null, "bug_type": null}
{"code": "list = [1,2,3,4]\nsum = 0\n\nfor item in list:\n    sum += item\n\nprint(sum)", "line_number": null, "bug_type": null}
{"code": "new_str = \"Python\".ljust(6, \"...\")\n\nprint(new_str)  #Python...", "line_number": null, "bug_type": null}
{"code": "def to_titlecase(str):\n    new_str = \"\"\n    for word in str.split(): \n        new_str += word.capitalize() + \" \"\n    return new_str.strip()\n\nprint(to_titlecase(\"Hello World\"))", "line_number": null, "bug_type": null}
{"code": "import re\n\ndef is_valid_phone_number(phone_number):\n pattern = re.compile(\"^[0-9]{3}-[0-9]{3}-[0-9]{4}$\")\n match = pattern.match(phone_number)\n return bool(match)", "line_number": null, "bug_type": null}
{"code": "def factorial(num):\n  if num == 0 or num == 1:\n    return 1\n  else:\n    return num * factorial(num - 1)\n  \nprint(factorial(5))", "line_number": null, "bug_type": null}
{"code": "def find_max(l):\n    max_elmt = l[0]\n    for x in l:\n        if x > max_elmt:\n            max_elmt = x\n    return max_elmt", "line_number": null, "bug_type": null}
{"code": "def edit_string(text):\n    text = text.replace(\"Apple\", \"Orange\")\n    return text\n\ntext = \"Apple is a great fruit\"\nprint(edit_string(text))\n# Output: Orange is a great fruit", "line_number": null, "bug_type": null}
{"code": "while True:\n    user_input = input(\"Please enter your input, or 'q' to quit: \")\n    if user_input == 'q':\n        break\n    print(user_input)", "line_number": null, "bug_type": null}
{"code": "def sort_alphabetically(input_string):\n    chars = list(input_string)\n    chars.sort()\n    print(\"\".join(chars))\n\nsort_alphabetically(\"Hello, World!\")", "line_number": null, "bug_type": null}
{"code": "def add_key_value_pair(dict, key, value): \n    dict[key] = value\n    return dict\n\nmy_dict = {}\nmy_dict = add_key_value_pair(my_dict, 'age', 23)\nprint(my_dict)", "line_number": null, "bug_type": null}
{"code": "import http.server\n\nPORT = 8000\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nhttpd = http.server.HTTPServer((\"\", PORT), Handler)\n\nprint(\"serving at port\", PORT)\nhttpd.serve_forever()", "line_number": null, "bug_type": null}
{"code": "def split_string(string):\n  parts = string.split(' ')\n  return parts[0], parts[1]", "line_number": null, "bug_type": null}
{"code": "list = [\"dog\", \"cat\", \"bird\"]\ntarget = \"bird\"\n\nfor element in list:\n    if element == target:\n        print(\"Target string found: {}\".format(target))\n        break", "line_number": null, "bug_type": null}
{"code": "def select_data(my_list):\n    result = []\n    for item in my_list:\n        if item['selected']:\n            result.append(item)\n    return result", "line_number": null, "bug_type": null}
{"code": "def find_max(list_of_numbers):\n    max_val = max(list_of_numbers)\n    return max_val\n\nlist_nums = [23, 12, 48, 61]\nmax_val = find_max(list_nums)\nprint(max_val)", "line_number": null, "bug_type": null}
{"code": "def capitalize_string(string):\n    words = string.split(' ')\n    capitalized_words = []\n    for word in words:\n        capitalized_words.append(word.capitalize())\n    \n    return ' '.join(capitalized_words)", "line_number": null, "bug_type": null}
{"code": "def multiply_list(items):\n   result = 1\n   for i in items: \n      result *= i \n   return result", "line_number": null, "bug_type": null}
{"code": "import itertools\n\nvowels = ['a', 'e', 'i', 'o', 'u']\n\nfor s in itertools.combinations_with_replacement(vowels, 2):\n        print(''.join(s))", "line_number": null, "bug_type": null}
{"code": "import math\n\ndef is_perfect_square(num):\n    sqrt = int(math.sqrt(num))\n    return sqrt * sqrt == num\n\nresult = is_perfect_square(25)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def numbers_between(start, end):\n    return [x for x in range(start, end + 1)]", "line_number": null, "bug_type": null}
{"code": "# Read the integer\nnum = int(input())\n\n# Print whether the number is even or odd\nif num % 2 == 0:\n print(\"The number is even.\")\nelse:\n print(\"The number is odd.\")", "line_number": null, "bug_type": null}
{"code": "for i in range(0, 5):\n    for j in range(0, i+1):\n        print(\"* \",end=\"\")\n    print(\"\\r\")", "line_number": null, "bug_type": null}
{"code": "def removeElement(list, x):\n    new_list = []\n    for item in list:\n        if item != x:\n            new_list.append(item)\n    return new_list", "line_number": null, "bug_type": null}
{"code": "def remove_item(list, item):\n    while item in list:\n        list.remove(item)\n    return list\n\nresult = remove_item([1, 2, 1, 3, 4, 1], 1)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "n = 3\nmy_dict = {} \nfor i in range(1, n+1): \n    my_dict[i] = i * i\n\nprint(my_dict)", "line_number": null, "bug_type": null}
{"code": "list_of_strings = [\" HELLO  \", \" WorLD  \", \"HeLlo\", \"DELL\"]\nnormalized_strings = [s.strip().lower() for s in list_of_strings]", "line_number": null, "bug_type": null}
{"code": "def gcd(a, b): \n    if (b == 0): \n        return a \n    return gcd(b, a % b)", "line_number": null, "bug_type": null}
{"code": "def intersection(A,B):\n    result = [] \n    for element in A: \n        if element in B: \n            result.append(element)\n    return result", "line_number": null, "bug_type": null}
{"code": "def normalize(words):\n    \"\"\"Normalizes a list of strings by converting each to lowercase and stripping any leading or trailing whitespaces.\"\"\"\n    return [word.lower().strip() for word in words]", "line_number": null, "bug_type": null}
{"code": "def linear_search(lst, x):\n    for i in range(len(lst)):\n        if lst[i] == x:\n            return i\n \n    return -1", "line_number": null, "bug_type": null}
{"code": "class MyClass:\n    def __init__(self):\n        self.__private_attr = 0\n \n    def get_private_attr(self):\n        return self.__private_attr\n \n    def set_private_attr(self, value):\n        self.__private_attr = value", "line_number": null, "bug_type": null}
{"code": "def print_sequence():\n    for i in range(1, 7):\n        for j in range (1, i+1):\n            print(j, end=\"\")\n        print()\n\nprint_sequence()", "line_number": null, "bug_type": null}
{"code": "class Multiplier:\n def multiply(self, num1, num2):\n  return num1 * num2\n\nm = Multiplier()\nprint(m.multiply(2, 3))", "line_number": null, "bug_type": null}
{"code": "def multiplication_table():\n    for i in range(1, 13):\n        for j in range(1, 13):\n            print(\"{:>2}\".format(str(i*j)), end=' ')\n        print()\n\nmultiplication_table()", "line_number": null, "bug_type": null}
{"code": "def sum_naturals(n):\n    total = 0\n    for num in range(n + 1):\n        total += num\n    return total", "line_number": null, "bug_type": null}
{"code": "import random\n\nclass RandomNumberGenerator:\n    def generate(self):\n        return random.randint(1, 1000)", "line_number": null, "bug_type": null}
{"code": "word_list = ['hello', 'world', 'good', 'morning']\n\nword_list = [word.upper() for word in word_list]", "line_number": null, "bug_type": null}
{"code": "def classify(sentence):\n    if \"horrible\" in sentence:\n        return \"negative\"\n    else:\n        return \"positive\"\n\nsentiment = classify(\"This is an horrible movie\")\nprint(sentiment)", "line_number": null, "bug_type": null}
{"code": "def split_sentence(sentence):\n    return sentence.split(\" \")\n\nsentence = \"This is a sentence\"\n\nwords = split_sentence(sentence)\nprint(words)", "line_number": null, "bug_type": null}
{"code": "def all_substrings(string):\n  sub_strings = []\n  for i in range(len(string)):\n    for j in range(i+1, len(string)+1):\n      sub_strings.append(string[i:j])\n  return sub_strings", "line_number": null, "bug_type": null}
{"code": "def insert_element(list, index, element):\n    list.insert(index + 1, element)\n    return list", "line_number": null, "bug_type": null}
{"code": "def sum_of_digits(n):\n    r = 0\n    while (n > 0):\n        r += n % 10\n        n //= 10\n    return r\n\nprint(sum_of_digits(123)) # 6", "line_number": null, "bug_type": null}
{"code": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def get_area(self):\n        return self.length * self.width", "line_number": null, "bug_type": null}
{"code": "def celsius_to_fahrenheit(celsius):\n\tfahrenheit = celsius * 9/5 + 32\n\treturn fahrenheit", "line_number": null, "bug_type": null}
{"code": "def arithmetic_eval(expression):\n return eval(expression)\n \n# Example\narithmetic_eval('2 + 3 * 5')\n# Output: 17", "line_number": null, "bug_type": null}
{"code": "def find_max(a, b, c):\n    max_num = a\n    if b > max_num:\n        max_num = b\n    if c > max_num:\n        max_num = c\n    return max_num", "line_number": null, "bug_type": null}
{"code": "def print_even_numbers(N):\n    for x in range(0, N+1):\n        if x%2 == 0:\n            print(x)", "line_number": null, "bug_type": null}
{"code": "def divisible_by_three_and_five(number):\n return (number % 3 == 0 and number % 5 == 0)", "line_number": null, "bug_type": null}
{"code": "def linearSearch(arr, x): \n    for i in range(len(arr)): \n        if arr[i] == x: \n            return i \n    return -1", "line_number": null, "bug_type": null}
{"code": "def reverse_string(String):\n    rev_str = \"\" \n    for i in String: \n        rev_str = i + rev_str\n    return rev_str\n\nprint(reverse_string(\"Hello World\"))", "line_number": null, "bug_type": null}
{"code": "def replace_spaces(str):\n return str.replace(\" \", \"-\")\n \nprint(replace_spaces(\"The quick brown fox\"))  # Result: The-quick-brown-fox", "line_number": null, "bug_type": null}
{"code": "def split_into_words(sentence):\n    \"\"\"This function splits a sentence into words.\"\"\"\n    # Split the sentence into words\n    words = sentence.split(' ')\n    # Return the list of words\n    return words", "line_number": null, "bug_type": null}
{"code": "a = 90\nb = 28\n\nwhile(b > 0):\n  temp = b \n  b = a % b\n  a = temp \n\nprint (\"The GCD is\",a)", "line_number": null, "bug_type": null}
{"code": "def reverse_sentence(sentence):\n    words = sentence.split(\" \")\n    words = list(reversed(words))\n    return \" \".join(words)\n\nreverse_sentence(\"This is a sentence\")  # returns \"sentence a is This\"", "line_number": null, "bug_type": null}
{"code": "def remove_element(nums, x):\n   return [y for y in nums if y != x]", "line_number": null, "bug_type": null}
{"code": "def longest_word(sentence):\n    words = sentence.split()\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_sequence():\n    sequence = \"\"\n    for _ in range(20):\n        char = chr(random.randint(97, 122))\n        sequence += char\n    return sequence\n\noutput = generate_sequence()\nprint(output)", "line_number": null, "bug_type": null}
{"code": "for n in [1, 2, 3, 4, 5]:\n print(n**2)", "line_number": null, "bug_type": null}
{"code": "my_list = [1,2,3,4,5,6]\n\n# Use the sum() function to get the sum of a given list\ncount = sum(my_list)\n\nprint(count)", "line_number": null, "bug_type": null}
{"code": "def longestWord(sentence):\n    words = sentence.split(' ')\n    longest = ''\n    for word in words:\n        if len(word) > len(longest):\n            longest = word\n    return longest", "line_number": null, "bug_type": null}
{"code": "a = input(\"Enter the first input: \")\nb = input(\"Enter the second input: \")\nc = input(\"Enter the third input: \")", "line_number": null, "bug_type": null}
{"code": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http://www.example.com'\nres = requests.get(url)\nsoup = BeautifulSoup(res.text, 'lxml')\ntext = soup.get_text()\nprint(text)", "line_number": null, "bug_type": null}
{"code": "def reverse_words(string):\n    words = string.split(' ')\n    reversed_words = words[::-1]\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string", "line_number": null, "bug_type": null}
{"code": "def fibonacci(n): \n if n <= 1: \n  return n \n else: \n  return(fibonacci(n-1) + fibonacci(n-2))", "line_number": null, "bug_type": null}
{"code": "def intersection(set_1, set_2):\n  return set_1.intersection(set_2)", "line_number": null, "bug_type": null}
{"code": "from random import randint\n\nnum_1 = randint(1, 24)\nnum_2 = 25 - num_1\n\nprint(num_1)\nprint(num_2)", "line_number": null, "bug_type": null}
{"code": "# Convert list of strings into a single string\ndef list_to_string(lst):\n    return ' '.join(lst)", "line_number": null, "bug_type": null}
{"code": "mylist = [3, 5, 7, 9]\ntotal = 0\n\nfor item in mylist:\n   total = total + item\n\nprint(\"The sum of list items is:\", total)", "line_number": null, "bug_type": null}
{"code": "def linear_search(numbers, key):\n    for index, element in enumerate(numbers):\n        if element == key:\n            return index\n    return -1", "line_number": null, "bug_type": null}
{"code": "def filter_negative(data):\n    \"\"\"Filters out all negative numbers from a list\"\"\"\n    return [x for x in data if x >= 0]", "line_number": null, "bug_type": null}
{"code": "def word_lengths(words):\n    lengths = {}\n    for word in words:\n        lengths[word] = len(word)\n    return lengths\n\nresult = word_lengths(['cat', 'dog', 'kangaroo', 'tiger'])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)\n      \nresult = factorial(5)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "x = 0\nfor i in range(100):\n    x += i * 100\n    for j in range(100):\n        x += j", "line_number": null, "bug_type": null}
{"code": "def loop_through_list(items):\n    \"\"\"Iterates through a list of items and prints each one\"\"\"\n    for item in items:\n        print(item)", "line_number": null, "bug_type": null}
{"code": "def alphabetize_list(arr):\n  arr.sort()\n  return ' '.join(arr)\n\ndata = ['apple', 'banana', 'orange']\nresult = alphabetize_list(data)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def max_of_two(x, y): \n    if x > y: \n        return x \n    else: \n        return y \n  \nprint(max_of_two(3,6))", "line_number": null, "bug_type": null}
{"code": "def get_year(date):\n    return date.split('/')[2]\n\nyear = get_year('02/03/2019')\nprint(year)", "line_number": null, "bug_type": null}
{"code": "def sum_list(l):\n    '''This function returns the sum of all the values in a list'''\n    sum = 0\n    for val in l:\n        sum = sum + val\n    return sum", "line_number": null, "bug_type": null}
{"code": "import http.server\n\n# Create the server object and set the port\nserver = http.server.HTTPServer(('localhost', 8080), http.server.BaseHTTPRequestHandler)\n\n# Start listening for requests\nserver.serve_forever()", "line_number": null, "bug_type": null}
{"code": "for i in range(0,21):\n if i == 3 or i == 5 or i == 8:\n  print(i)", "line_number": null, "bug_type": null}
{"code": "def Fahrenheit_to_Celsius(F): \n    return (F - 32) * 5/9\n  \nprint(\"Temperature in Celsius = \", \n      Fahrenheit_to_Celsius(100))", "line_number": null, "bug_type": null}
{"code": "def sort_array(arr):\n    sorted_arr = sorted(arr) \n    # use the built-in sorted() method \n    return sorted_arr\n\nresult = sort_array([5, 8, 1, 4, 9])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def multiply(a, b):\n    result = 0\n    while a != 0:\n        if a & 1:\n            result += b\n        a >>= 1\n        b <<= 1\n    return result", "line_number": null, "bug_type": null}
{"code": "class Employee:\n   def __init__(self, name, age, salary):\n      self.name = name\n      self.age = age\n      self.salary = salary", "line_number": null, "bug_type": null}
{"code": "def array_sum(arr):\n    s = 0\n    for i in arr:\n        s += i\n    return s\n\nprint(array_sum([3,2,1,6,5,7,4]))", "line_number": null, "bug_type": null}
{"code": "def sort_words(words):\n    words.sort()\n    return words\n\nprint(sort_words([\"blue\", \"red\", \"green\", \"yellow\"]))", "line_number": null, "bug_type": null}
{"code": "class Polygon:\n    def __init__(self, sides):\n        self.sides = sides\n    \n    def perimeter(self):\n        perimeter = 0\n        for side in self.sides:\n            perimeter += side\n        return perimeter", "line_number": null, "bug_type": null}
{"code": "def celsius_to_fahrenheit(celsius): \n    fahrenheit = celsius * 9/5 + 32\n    return fahrenheit", "line_number": null, "bug_type": null}
{"code": "new_list = []\nfor i in range(0, len(list)):\n    new_list.append(str(list[i]))", "line_number": null, "bug_type": null}
{"code": "for i in range(3, 11):\n    if(i % 2 == 0):\n        print(i)", "line_number": null, "bug_type": null}
{"code": "def longestString(str1, str2):\n  if len(str1) > len(str2):\n    return str1\n  else:\n    return str2\n\nprint(longestString(\"Hello\", \"World\"))", "line_number": null, "bug_type": null}
{"code": "def is_prime(x):\n    if x < 2:\n        return False\n    \n    for i in range(2, x):\n        if x % i == 0:\n            return False\n    return True", "line_number": null, "bug_type": null}
{"code": "def get_slice(data, start, end):\n    return [row[start:end] for row in data]", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnum = 5\nprint(\"The factorial of\", num, \"is\", factorial(num))", "line_number": null, "bug_type": null}
{"code": "def clamp(number, lower, upper):\n    if number < lower:\n        return lower\n    elif number > upper:\n        return upper\n    else:\n        return number", "line_number": null, "bug_type": null}
{"code": "def concatenate_two_strings(str_1, str_2):\n    return str_1 + str_2\n\nconc_str = concatenate_two_strings(\"Hello\", \" World\")\nprint(conc_str)", "line_number": null, "bug_type": null}
{"code": "list1 = [1, 3, 7, 8]\nelement = 5\n\nlist1.insert(2, element)\nprint(\"New list:\", list1)", "line_number": null, "bug_type": null}
{"code": "def estimate_value_of_Pi_to_degree(n):\n    use_below_formula = (22/7)*(10**n)\n    return round(use_below_formula, n)\n\nprint (estimate_value_of_Pi_to_degree(7))", "line_number": null, "bug_type": null}
{"code": "def intersection(array_1, array_2): \n    result = [] \n    for num in array_1: \n        if num in array_2: \n            result.append(num) \n    return result", "line_number": null, "bug_type": null}
{"code": "def check_even(numbers):\n  for num in numbers:\n    if num % 2 == 0:\n      return True\n  return False", "line_number": null, "bug_type": null}
{"code": "import string \nimport random\n\ndef gen_random_string(length): \n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(length)) \n\nprint(gen_random_string(10))", "line_number": null, "bug_type": null}
{"code": "odd_nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]", "line_number": null, "bug_type": null}
{"code": "import re\npattern = re.compile(r'[6-9]|[2-4][0-9]')", "line_number": null, "bug_type": null}
{"code": "def isPalindrome(s): \n    rev = ''.join(reversed(s))\n    if s == rev:\n        return True\n    return False", "line_number": null, "bug_type": null}
{"code": "def sumSeries(arr):\n  total = 0\n  for num in arr:\n    total += num\n  return total\n\nresult = sumSeries([1, 2, 3, 4, 5])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def replace_char(string):\n    encoded = \"\"\n    for char in string:\n        if char == 'z':\n            encoded += 'a'\n        else:\n            encoded += chr(ord(char) + 1)\n    return encoded", "line_number": null, "bug_type": null}
{"code": "import math\n\ndef calculateArea(side): \n    area = (3 * math.sqrt(3) * (side * side)) / 2\n    return area", "line_number": null, "bug_type": null}
{"code": "def distinct_values(arr):\n    distinct_arr = []\n    for element in arr:\n        if element not in distinct_arr:\n            distinct_arr.append(element)\n    return distinct_arr", "line_number": null, "bug_type": null}
{"code": "import requests\n\nurl = 'http://example.com/api/userdata'\n\nuserdata = requests.get(url).json()\nname = userdata['name']\n\nprint(name)", "line_number": null, "bug_type": null}
{"code": "user_input = input(\"Enter a string: \")\n\nchar_list = []\n\nfor char in user_input:\n char_list.append(char)\n\nprint(char_list)", "line_number": null, "bug_type": null}
{"code": "input_string = 'Foobar'\n\nupper_case_characters = []\n\nfor char in input_string:\n    if char.isupper():\n        upper_case_characters.append(char)\n\nprint(upper_case_characters)", "line_number": null, "bug_type": null}
{"code": "def get_max(a, b):\n    if a > b:\n        return a\n    else:\n        return b", "line_number": null, "bug_type": null}
{"code": "def multiply_list(lst):\n    result = 1\n    for i in lst:\n        result *= i\n    return result", "line_number": null, "bug_type": null}
{"code": "def addStringNumbers(num1,num2): \n    return int(num1) + int(num2)", "line_number": null, "bug_type": null}
{"code": "def sort_strings_case_insensitive(input_list):\n  return sorted([string.strip().lower() for string in input_list])", "line_number": null, "bug_type": null}
{"code": "import functools\n\n@functools.lru_cache(maxsize=None)\ndef add_two_numbers(n1, n2):\n return n1 + n2", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef random_string(stringLength):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))\n\nprint(random_string(10))", "line_number": null, "bug_type": null}
{"code": "list_of_numbers = [7, 3, 4, 2]\n\n# sort the list\nlist_of_numbers.sort()\n\n# print the sorted list\nprint(list_of_numbers)", "line_number": null, "bug_type": null}
{"code": "def fibonacci(n):\n  a, b = 0, 1\n  while a < n:\n    print(a, end=' ')\n    a, b = b, a+b\n\nfibonacci(100)", "line_number": null, "bug_type": null}
{"code": "def add(x, y):\n    print(x + y)\n\na = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"))\nadd(a, b)", "line_number": null, "bug_type": null}
{"code": "product = 1\nfor value in [2, 3, 4]:\n product *= value\nprint(product)", "line_number": null, "bug_type": null}
{"code": "class MyClass:\n def __init__(self, x, y):\n  self.x = x\n  self.y = y", "line_number": null, "bug_type": null}
{"code": "def reverse_words(str):\n    words = str.split()\n    reversed_words = words[::-1]\n    reversed_str = ' '.join(reversed_words)\n    return reversed_str\n\nresult = reverse_words('hello world')\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def hasWhitespace(string):\n for c in string:\n  if c.isspace():\n   return True\n return False\n\nprint(hasWhitespace(\"Hello World\"))", "line_number": null, "bug_type": null}
{"code": "string = \"python is powerful\"\nlist_words = string.split()\noutput = [i.capitalize() for i in list_words]", "line_number": null, "bug_type": null}
{"code": "def format_money(amount, symbol):\n    return f\"{symbol}{amount:.2f}\"\n\nformat_money(95.50, '\u20ac') # returns \u20ac95.50", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(inputstring):\n    result = \"\"\n    for i in range(len(inputstring)):\n        if i == 0 or inputstring[i] != inputstring[i-1]:\n            result += inputstring[i]\n    return result", "line_number": null, "bug_type": null}
{"code": "def string_length(str):\n    return len(str)\n\nstring = \"Hello World\"\nlength = string_length(string)\nprint(\"Length of the string is: %d\" % length)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_random_str(): \n    char_set = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\n    random_str = ''.join(random.sample(char_set, 5))\n\n    return random_str", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(lst):\n    unique_lst = []\n    for i in lst:\n        if i not in unique_lst:\n            unique_lst.append(i)\n    return unique_lst", "line_number": null, "bug_type": null}
{"code": "lst = [10, 3, 5, 8, 7]\n\nlst.sort(reverse=True)\n\nfor n in lst:\n    print(n)", "line_number": null, "bug_type": null}
{"code": "def capitalize_first_letter(s): \n    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:]", "line_number": null, "bug_type": null}
{"code": "def swap(a, b):\n  temp = a\n  a = b\n  b = temp\n\nx = 10\ny = 20\n\nswap(x, y)\n\nprint(x, y)", "line_number": null, "bug_type": null}
{"code": "import secrets\n\n# Generate the random string\nrandom_string = secrets.token_hex(24)\n\nprint(random_string)", "line_number": null, "bug_type": null}
{"code": "import uuid\n\ndef generate_uuid():\n    return str(uuid.uuid4())\n\nif __name__ == '__main__':\n    print(generate_uuid())", "line_number": null, "bug_type": null}
{"code": "def max_three(a, b, c):\n    m = max(a, b)\n    m = max(m, c)\n    return m", "line_number": null, "bug_type": null}
{"code": "def is_divisible_by_7(num):\n    if num % 7 == 0:\n        return True\n    else:\n        return False\n\nresult = is_divisible_by_7(28)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def longest_word_length(string):\n    words = string.split(' ')\n    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length", "line_number": null, "bug_type": null}
{"code": "def avg(list):\n    if len(list) == 0:\n        return 0\n    else:\n        sum = 0\n        for num in list:\n            sum += num\n        return sum / len(list)", "line_number": null, "bug_type": null}
{"code": "def countdown(num):\n    if num == 0:\n        return\n    else:\n        print(num)\n        num -= 1\n        countdown(num)\n\ncountdown(5)", "line_number": null, "bug_type": null}
{"code": "class Square:\n    def __init__(self, length):\n        self.length = length\n\n    def find_area(self):\n        return self.length**2\n\nsqr = Square(4)\nprint(sqr.find_area())", "line_number": null, "bug_type": null}
{"code": "def multiply(a, b):\n    return a * b\n\nans = multiply(3, 5)\nprint(ans) # 15", "line_number": null, "bug_type": null}
{"code": "def sort_dict_by_values(d):\n    sorted_list = sorted(d.items(), key=lambda item: item[1])\n    return sorted_list", "line_number": null, "bug_type": null}
{"code": "arr = [[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]]", "line_number": null, "bug_type": null}
{"code": "even_numbers = [x for x in range(1, 11) if x % 2 == 0]", "line_number": null, "bug_type": null}
{"code": "for i in range(10):\n  print('The value of the variable i is: ', i)", "line_number": null, "bug_type": null}
{"code": "def sort_array(arr):\n    arr.sort(reverse = True)\n    return arr\n  \narr = [\"Hello\", \"World\", \"This\", \"is\", \"a\", \"Test\"]\nprint(sort_array(arr))", "line_number": null, "bug_type": null}
{"code": "def find_element(arr, target): \n    for i in range(len(arr)): \n        if arr[i] == target: \n            return i \n    return -1", "line_number": null, "bug_type": null}
{"code": "def remove_target(arr, target): \n    result = [] \n    for num in arr: \n        if num != target: \n            result.append(num) \n    return result", "line_number": null, "bug_type": null}
{"code": "import requests\n\ndef http_request(url):\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.text\n    else:\n        return None\n\nhttp_result = http_request('https://www.example.com/')", "line_number": null, "bug_type": null}
{"code": "def sort_strings(strings):\n    strings.sort()\n    return strings\n\nstrings = ['abc', 'bac', 'bca', 'axy', 'axz']\n\nprint(sort_strings(strings))", "line_number": null, "bug_type": null}
{"code": "num1 = 20\nnum2 = 50\nresult = num1 + num2\nprint(result)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generator(length):\n    alphabets = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    return ''.join(random.choice(alphabets) for i in range(length))\n\nprint(generator(10))", "line_number": null, "bug_type": null}
{"code": "def starts_with_a(string):\n    if string[0] == 'a':\n        return True\n    else:\n        return False\n\nresult = starts_with_a('awesome')\nprint(result)", "line_number": null, "bug_type": null}
{"code": "num = int(input(\"Enter a number: \"))\nstring = input(\"Enter a string: \")\n\nfor i in range(num):\n print(string)", "line_number": null, "bug_type": null}
{"code": "def vector_add(a, b):\n    c = []\n    for i in range(len(a)):\n        c.append(a[i] + b[i])\n\n    return c", "line_number": null, "bug_type": null}
{"code": "def rotateString(s, n):\n    output = \"\"\n    for char in s:\n        output += chr(ord(char) + n)\n    return output\n\nresult = rotateString(\"Hello\", 3)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def sum_even_numbers(sequence):\n    result = 0\n    for num in sequence:\n        if num % 2 == 0:\n            result += num\n    \n    return result", "line_number": null, "bug_type": null}
{"code": "def sort_dict(d): \n    sorted_dict = {key:value for key, value in sorted(d.items(), key=lambda x: x[1], reverse=True)} \n    return sorted_dict", "line_number": null, "bug_type": null}
{"code": "def classify(input):\n    if input == \"apple\":\n        label = \"fruit\"\n    else:\n        label = \"not fruit\"\n    return label", "line_number": null, "bug_type": null}
{"code": "def concat_strings(str1, str2):\n  return str1 + str2\n\nresult = concat_strings(\"Hello\", \"World\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def ascending_sort(list):\n    list.sort(key=len)\n    return list\n\nlist = [\"apple\", \"cat\", \"banana\", \"dog\"]\nresult = ascending_sort(list)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "sum = 0\n\nfor i in range(10):\n    num = int(input(\"Input number: \"))\n    sum += num\n\nprint(\"Sum:\", sum)", "line_number": null, "bug_type": null}
{"code": "def mergeStrings(str1, str2):\n   return str1 + str2\n\nprint(mergeStrings('Hello', 'World'))", "line_number": null, "bug_type": null}
{"code": "def longest_word_length(words):\n   length = 0\n   for word in words:\n       if len(word) > length:\n           length = len(word)\n           \n   return length", "line_number": null, "bug_type": null}
{"code": "def search_element(element, list_):\n    for i in range(len(list_)):\n        if element == list_[i]:\n            return i\n    return -1", "line_number": null, "bug_type": null}
{"code": "def reverse_print(n):\n    for i in range(n, 0, -1):\n        print(i)\n\nn = 5\nreverse_print(n)", "line_number": null, "bug_type": null}
{"code": "import random\n\nmin_num = int(input(\"Enter minimum number: \"))\nmax_num = int(input(\"Enter maximum number: \"))\n\nprint(random.randint(min_num, max_num)) # random number between 10 and 20", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_password(length, characters):\n    password = ''\n    for i in range(length):\n        password += random.choice(characters)\n    return password\n\nprint(generate_password(10, 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'))", "line_number": null, "bug_type": null}
{"code": "def repeat_string(string, n):\n    repeated_string = string * n\n    return repeated_string\n\nprint(repeat_string(\"Hello\", 4))", "line_number": null, "bug_type": null}
{"code": "def sort_list(lst):\n    lst.sort()\n    return lst\n\nresult = sort_list([2, 3, 4, 5, 1])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "import numpy as np\narr = np.zeros((3, 3, 3))\nprint(arr)", "line_number": null, "bug_type": null}
{"code": "import datetime\ndef get_week_number(date_string):\n    d = datetime.datetime.strptime(date_string, '%Y-%m-%d')\n    return d.isocalendar()[1]  # isocalendar() is used to get the ISO week number", "line_number": null, "bug_type": null}
{"code": "def linear_search(arr, key):\n    for i in range(len(arr)):\n        if arr[i] == key: \n            return i \n  \n    return -1", "line_number": null, "bug_type": null}
{"code": "try:\n a = 10\n b = 0\n c = a/b\nexcept ZeroDivisionError:\n print(\"Error: Cannot divide by zero\")", "line_number": null, "bug_type": null}
{"code": "import base64\n\ndef encode_string(string):\n    encoded_string = base64.b64encode(string.encode('utf-8'))\n    return encoded_string", "line_number": null, "bug_type": null}
{"code": "data = {\n    'name': 'John',\n    'age': 56,\n    'city': 'New York'\n    }", "line_number": null, "bug_type": null}
{"code": "import random\n\nrandom_number = random.randint(1,100)\nprint(\"Random number:\", random_number)", "line_number": null, "bug_type": null}
{"code": "def find_duplicates(lst):\n    seen = set()\n    duplicates = []\n    for elem in lst:\n        if elem in seen:\n            duplicates.append(elem)\n        else:\n            seen.add(elem)\n    return duplicates", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_random_matrix():\n    matrix = [[random.randint(1, 10) for col in range(4)] for row in range(3)]\n    return matrix", "line_number": null, "bug_type": null}
{"code": "def find_max(list):\n    max_value = list[0]\n    for num in list:\n        if num > max_value:\n            max_value = num\n    return max_value", "line_number": null, "bug_type": null}
{"code": "import random\nimport string\n\ndef random_string():\n    chars = string.ascii_lowercase\n    size = 16\n    return ''.join(random.choice(chars) for _ in range(size))\n\nprint(random_string())", "line_number": null, "bug_type": null}
{"code": "def sum_digits(num):\n    summation = 0\n    while num > 0:\n        summation += num % 10\n        num = num // 10\n    return summation", "line_number": null, "bug_type": null}
{"code": "def isAnagram(string):\n    for i in range(len(string)):\n        for j in range(i + 1, len(string)):\n            if sorted(string[i]) == sorted(string[j]):\n                return True\n    return False", "line_number": null, "bug_type": null}
{"code": "import datetime \nnow = datetime.datetime.now().strftime(\"%d/%m/%Y\") \nprint(now)", "line_number": null, "bug_type": null}
{"code": "def inOrderTraversal(root):\n    if root is not None:\n        inOrderTraversal(root.left)\n        print(root.val)\n        inOrderTraversal(root.right)", "line_number": null, "bug_type": null}
{"code": "def get_largest_number(numbers):\n    largest_number = numbers[0]\n    for number in numbers:\n        if number > largest_number:\n            largest_number = number\n    return largest_number", "line_number": null, "bug_type": null}
{"code": "userString = input(\"Enter a string: \")\nuppercasedString = userString.upper()\nprint(uppercasedString)", "line_number": null, "bug_type": null}
{"code": "def sum_list(nums_list):\n    total = 0\n    for num in nums_list:\n        total += num\n    return total", "line_number": null, "bug_type": null}
{"code": "def sort_list(my_list):\n    my_list.sort()\n    return my_list\n\nprint(sort_list([3,8,1,5,6]))", "line_number": null, "bug_type": null}
{"code": "import random\n\nmy_list = []\nfor i in range(5):\n my_list.append(random.randint(1,100))\n\nprint(my_list)", "line_number": null, "bug_type": null}
{"code": "def sum_list(list_of_nums):\n    total = 0\n    for number in list_of_nums:\n        total += number\n    return total\n\nresult = sum_list([4, 8, 15, 20])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "class TreeNode:\n    def __init__(self, name, value, left=None, right=None):\n        self.name = name\n        self.value = value\n        self.left = left\n        self.right = right", "line_number": null, "bug_type": null}
{"code": "def common_characters(str1, str2):\n    common_chars = set(str1).intersection(set(str2))\n    return list(common_chars)", "line_number": null, "bug_type": null}
{"code": "class MyClass:\n  def __init__(self, attr1, attr2):\n    self.attr1 = attr1\n    self.attr2 = attr2\n\n  def do_something(self):\n    print(\"Doing something!\")", "line_number": null, "bug_type": null}
{"code": "def parity (num):   \n    if num % 2 == 0: \n        return \"even\"\n    else: \n        return \"odd\"", "line_number": null, "bug_type": null}
{"code": "import re\n\nstring1 = \"Hello\"\nstring2 = \"heLLo\"\n\nif re.search(string1.lower(), string2.lower()):\n print(\"Strings are equal regardless of case.\")", "line_number": null, "bug_type": null}
{"code": "def word_filter(words, filter_list):\n    filtered_words = []\n    for word in words:\n        if word not in filter_list:\n            filtered_words.append(word)\n    return filtered_words", "line_number": null, "bug_type": null}
{"code": "# Get the character from user\nchar = input('Please enter a character: ')\n\n# Print the ASCII value\nprint(ord(char))", "line_number": null, "bug_type": null}
{"code": "def delete_from_list(my_list, element):\n    if element in my_list:\n        my_list.remove(element)\n    else:\n        return\n      \n    delete_from_list(my_list, element)", "line_number": null, "bug_type": null}
{"code": "def extract_odd_pos(string):\n    odd_position = \"\"\n    for i in range(len(string)):\n        if i%2 == 0:\n            odd_position += string[i]\n    return odd_position", "line_number": null, "bug_type": null}
{"code": "def check_input(data):\n    if type(data) in [int, str, list, dict, set]:\n        return 'Valid'\n    else:\n        return 'Invalid'", "line_number": null, "bug_type": null}
{"code": "def string_to_ascii_list(string):\n    ascii_list = []\n    for char in string:\n        ascii_list.append(ord(char))\n    return ascii_list\n\nprint(string_to_ascii_list(\"Hello World!\"))", "line_number": null, "bug_type": null}
{"code": "def factorial(number):\n  total = 1\n  while number > 0: \n    total *= number\n    number -= 1\n  return total\n\nprint(factorial(5))", "line_number": null, "bug_type": null}
{"code": "def encrypt_substitution(s):\n    result = ''\n    for c in s:\n        result += chr(ord(c) + 3)\n    return result", "line_number": null, "bug_type": null}
{"code": "def fast_function(x):\n    y = 0\n    for i in range(250):\n        y += x * x * x * x\n    return y", "line_number": null, "bug_type": null}
{"code": "length = int(input(\"Enter the edge length of the cube: \"))\n\nvolume = length * length * length\n\nprint(\"The volume of the cube is\", volume)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef get_random_name(first_names, last_names):\n    first_name = random.choice(first_names)\n    last_name = random.choice(last_names)\n    random_name = first_name + ' ' + last_name\n    return random_name", "line_number": null, "bug_type": null}
{"code": "input_list = [3, 7, 2, 8, 10]\ninput_list.sort(reverse=True)\nprint(input_list)", "line_number": null, "bug_type": null}
{"code": "def remove_unwanted_chars(text):\n    return ''.join(c for c in text if c.isalnum() or c in [' ', ','])\n\ntext = \"Hello, World!\"\nprint(\"Text after removing unwanted characters:\", remove_unwanted_chars(text))", "line_number": null, "bug_type": null}
{"code": "def unique(arr): \n  unique_arr = [] \n  for i in arr: \n    if i not in unique_arr: \n      unique_arr.append(i) \n  return unique_arr", "line_number": null, "bug_type": null}
{"code": "# Iterate over numbers\nfor num in [1,2,3,4,5]:\n  # Check for even\n  if(num % 2 == 0):\n    # Print the even numbers\n    print(num)", "line_number": null, "bug_type": null}
{"code": "sentence = \"This is a sentence\"\nsentence_list = sentence.split()\nfrequency_list = []\n\nfor word in sentence_list:\n    frequency_list.append(sentence_list.count(word))\n    \nfrequency_dict = dict(zip(sentence_list, frequency_list))\n\nprint(frequency_dict)", "line_number": null, "bug_type": null}
{"code": "def oldest_movie(movies):\n    oldest_year = movies[0][\"releaseYear\"]\n    for movie in movies: \n        if movie[\"releaseYear\"] < oldest_year:\n            oldest_year = movie[\"releaseYear\"]\n    return oldest_year", "line_number": null, "bug_type": null}
{"code": "def get_length(string):\n    length = 0\n    for char in string:\n        length += 1\n    return length", "line_number": null, "bug_type": null}
{"code": "list = [1, 5, 6, 8]\nfor i in list:\n    print(i)", "line_number": null, "bug_type": null}
{"code": "def add_arrays(arr1, arr2):\n  return [x + y for x, y in zip(arr1, arr2)]", "line_number": null, "bug_type": null}
{"code": "import random \n\nmy_array = [random.randint(1, 100) for _ in range(100)]", "line_number": null, "bug_type": null}
{"code": "def split_string(string, delimiter): \n    return string.split(delimiter) \n\nprint(split_string('This is a sample string', ' '))", "line_number": null, "bug_type": null}
{"code": "import math\n\ndef calculate_area_of_circle(radius):\n    area = math.pi * radius ** 2\n    return area\n\nresult = calculate_area_of_circle(5.5)\nprint('The area of the circle is: ', result)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_random_nums(n):\n  nums = []\n  for _ in range(n):\n    nums.append(random.randint(0,n))\n  return nums", "line_number": null, "bug_type": null}
{"code": "for i in range(1,51):\n  if (i % 2 == 0):\n    print(i)", "line_number": null, "bug_type": null}
{"code": "import requests\n\nurl = 'http://<web server address>'\nfile = {'webpage': open('index.html', 'rb')}\n\nresponse = requests.post(url, files=file)\n\nprint(response.status_code)", "line_number": null, "bug_type": null}
{"code": "def convert_days_wm(Days):\n    y = Days//365\n    m = (Days%365)//30\n    d = (Days%365)%30\n    return y, m, d", "line_number": null, "bug_type": null}
{"code": "def word_count(sentence):\n    count = 0\n    for word in sentence.split(' '):\n        count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "temp_in_fahrenheit = 98\ntemp_in_celsius = (temp_in_fahrenheit - 32) * 5/9\nprint(f'{temp_in_fahrenheit} Fahrenheit = {temp_in_celsius:.2f} Celsius')", "line_number": null, "bug_type": null}
{"code": "def is_prime(n):\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True", "line_number": null, "bug_type": null}
{"code": "def square_array(a):\n    res = [x ** 2 for x in a]\n    return res", "line_number": null, "bug_type": null}
{"code": "def sum_array(arr):\n    sum = 0\n    for elem in arr:\n         sum += elem\n    return sum", "line_number": null, "bug_type": null}
{"code": "def calArea(side):\n\treturn side * side\n\nif __name__ == '__main__':\n\tside = 5\n\tarea = calArea(side)\n\tprint('Area of Square = ', area)", "line_number": null, "bug_type": null}
{"code": "def clean_string(string):\n    excluded_characters = \"*&#$@!\"\n    cleaned_string = ''\n    for character in string:\n        if character not in excluded_characters:\n            cleaned_string += character\n    return cleaned_string", "line_number": null, "bug_type": null}
{"code": "def get_sum(nums):\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n\nresult = get_sum([1, 2, 3])\nprint(result)\n# Output: 6", "line_number": null, "bug_type": null}
{"code": "my_string = \"I like mangoes\"\n\nfor char in my_string:\n\tif char == char[::-1]:\n\t\tprint(char)", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0: \n        return 1 \n    return n * factorial(n-1) \n\nnum = 9\nfactorial_num = factorial(num)\nprint(factorial_num)", "line_number": null, "bug_type": null}
{"code": "def combine_strings(str1, str2, str3):\n    return str1 + str2 + str3\n\nresult = combine_strings(\"Hello,\", \" World!\", \" Goodbye\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_password():\n    return ''.join(random.choice(string.ascii_letters + string.digits) for i in range(8))", "line_number": null, "bug_type": null}
{"code": "# Read two numbers\nn1 = int(input()) \nn2 = int(input()) \n\n# Add the two numbers\nresult = n1 + n2\n\n# Output the result\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def divisible_five(nums):\n    result = []\n    for num in nums:\n        if num % 5 == 0:\n            result.append(num)\n    return result", "line_number": null, "bug_type": null}
{"code": "from yahoo_fin import stock_info as si\n\ndef get_stock_price(name):\n    data = si.get_live_price(name)\n    return data\n\nif __name__ == '__main__':\n    name = 'ABC'\n    print(get_stock_price(name))", "line_number": null, "bug_type": null}
{"code": "for key, value in dict.items():\n    if key < 'k':\n        print(key, value)", "line_number": null, "bug_type": null}
{"code": "def linear_search(lst, x):\n    for i in range(len(lst)):\n        if lst[i] == x:\n            return i\n    return -1\n\nprint(linear_search([5,3,7,2,1], 3))", "line_number": null, "bug_type": null}
{"code": "def get_user_input():\n    user_input = input(\"Please enter your input: \")\n    return user_input\n\n# Sample test\nuser_input = get_user_input()\nprint(\"Your input is: \" + user_input)", "line_number": null, "bug_type": null}
{"code": "input_list = [3, 5, 7]\n \nmax_value = max(input_list)\n \nprint(max_value) # prints 7", "line_number": null, "bug_type": null}
{"code": "def even_number_filter(number):\n  return number % 2 == 0\n\nnumbers = [25, 35, 8, 2, 10]\nfiltered_list = list(filter(even_number_filter, numbers))\nprint(filtered_list)", "line_number": null, "bug_type": null}
{"code": "def generate_dict(n):\n    d = {}\n    for i in range(1, n+1):\n       d[i] = i*i\n    return d", "line_number": null, "bug_type": null}
{"code": "import random\n\nfor x in range(1000000):\n  password = '' \n  for i in range(12):\n    password += random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#!')\n  print(password)", "line_number": null, "bug_type": null}
{"code": "def avg_rating(ratings):\n    total = 0\n    for rating in ratings:\n        total += rating[0] + rating[1]\n    return total / (len(ratings)*2)", "line_number": null, "bug_type": null}
{"code": "def foundDuplicates(string):\n    '''This function will detect if a string contains any duplicate characters.'''\n    seen = set()\n    for char in string:\n        if char in seen:\n            return True\n        seen.add(char)\n    return False", "line_number": null, "bug_type": null}
{"code": "import itertools \nwords = ['dog', 'cat', 'fish'] \nresult = list(itertools.permutations(words)) \n\nfor word in result: \n    print(word)", "line_number": null, "bug_type": null}
{"code": "def digitSum(n):\n    if n == 0: \n        return 0\n    else:\n        return (n % 10) + digitSum(int(n / 10))", "line_number": null, "bug_type": null}
{"code": "def merge_dicts(dict1, dict2):\n    merged_dict = {**dict1, **dict2}\n    return merged_dict", "line_number": null, "bug_type": null}
{"code": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/greeting', methods=['GET'])\ndef get_greeting(name):\n return 'Hello, ' + name + '!'\n\nif __name__ == '__main__':\n app.run()", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef random_string(): \n    string = ''.join(random.sample(\n        'abcdefghijklmnopqrstuvwxyz' \n        + '0123456789', 7)) \n    return string", "line_number": null, "bug_type": null}
{"code": "import requests\n\nurl = 'http://example.com'\n\nr = requests.get(url)\n\nif r.status_code == 200:\n  print('Website is up and running.')\nelse:\n  print('Website is not responding.')", "line_number": null, "bug_type": null}
{"code": "from collections import Counter\n\nsentence = \"This is a test sentence\"\n\n#split the sentence into words\nwords = sentence.split()\n\n#count the frequency of each word\nword_frequency = Counter(words)\n\n#print the results\nprint(word_frequency)", "line_number": null, "bug_type": null}
{"code": "def unique_chars(string):\n    unique_characters = set()\n    for char in string:\n        unique_characters.add(char)\n    return unique_characters\n\nprint(unique_chars(\"python\"))", "line_number": null, "bug_type": null}
{"code": "my_list = [10, 15, 20]\nfor i in my_list[::-1]:\n    print(i)", "line_number": null, "bug_type": null}
{"code": "import gzip\n\nstring = \"This is a sample string to compress.\"\ncompressed_string = gzip.compress(string.encode('utf-8'))\nprint(compressed_string)", "line_number": null, "bug_type": null}
{"code": "def largest_number(list):\n    largest = list[0]\n    for number in list:\n        if number > largest:\n            largest = number\n    return largest", "line_number": null, "bug_type": null}
{"code": "user_info = {\n    'name': 'John Smith',\n    'age': 32,\n    'location': 'USA'\n}", "line_number": null, "bug_type": null}
{"code": "def is_leap_year(year):\n    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n        return True\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "class StringClass:\n  \n  def __init__(self, string):\n    self.string = string\n    \n  def printString(self):\n    print(self.string)", "line_number": null, "bug_type": null}
{"code": "def sum_array(arr):\n    s = 0\n    for i in arr:\n        s += i\n    return s", "line_number": null, "bug_type": null}
{"code": "def sum_of_digits(n):\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\n\nprint(sum_of_digits(378))", "line_number": null, "bug_type": null}
{"code": "import requests\n\nurl = 'http://www.example.com'\nkeyword = 'success'\n\nr = requests.get(url)\nif keyword in r.text:\n print('Pass')\nelse:\n print('Fail')", "line_number": null, "bug_type": null}
{"code": "\"\"\"\nGenerate a random number between two given numbers, using Python\n\"\"\"\n\nimport random\n\ndef random_number(min_range, max_range):\n    return random.randrange(min_range, max_range)\n\nprint(random_number(30, 100))", "line_number": null, "bug_type": null}
{"code": "def reverse(input): \n  str = \"\" \n  for i in input: \n    str = i + str\n  return str", "line_number": null, "bug_type": null}
{"code": "numbers_array = [5, 9, 3, 2, 6, 10]\n\nfor current_number in numbers_array:\n print(current_number)", "line_number": null, "bug_type": null}
{"code": "def print_powers_of_2(n):\n    result = []\n    for i in range(n+1):\n        result.append(2**i)\n    return result", "line_number": null, "bug_type": null}
{"code": "def get_intersection(list_1, list_2):\n    return [elem for elem in list_1 if elem in list_2]", "line_number": null, "bug_type": null}
{"code": "def areaCircle(radius):\n    pi = 3.14\n    area = pi * (radius**2)\n    return area\n\nprint(areaCircle(5)) # 78.5", "line_number": null, "bug_type": null}
{"code": "def calculate_average(nums):\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n    return total / len(nums)", "line_number": null, "bug_type": null}
{"code": "from sklearn.neighbors import NearestNeighbors\n\ndef nearest_neighbors(point):\n    neighbors = NearestNeighbors(n_neighbors=1).fit(point) \n    return neighbors.kneighbors([point], return_distance=False)[0]", "line_number": null, "bug_type": null}
{"code": "def cube_volume(side):\n    # calculate the volume of a cube\n    return side**3\n\nvolume = cube_volume(5) # volume = 125\nprint(volume)", "line_number": null, "bug_type": null}
{"code": "from collections import Counter\n\ndef get_mode(numbers):\n    num_count = Counter(numbers)\n    max_count = max(num_count.values())\n    mode = [x for x in num_count.keys() if num_count[x] == max_count]\n    return mode", "line_number": null, "bug_type": null}
{"code": "number = int(input(\"Please enter a number:\"))\n\nfor i in range(1, 11):\n print(f'{number} * {i} = {number*i}')", "line_number": null, "bug_type": null}
{"code": "def is_number(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False", "line_number": null, "bug_type": null}
{"code": "def find_largest_number(numbers):\n    largest = numbers[0] \n    for n in numbers[1:]:\n        if n > largest:\n            largest = n\n    return largest", "line_number": null, "bug_type": null}
{"code": "class Student:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age =  age\n        self.gender = gender", "line_number": null, "bug_type": null}
{"code": "class Multiplier:\n    def __init__(self, factor):\n        self.factor = factor\n \n    def multiply(self, num):\n        return num * self.factor", "line_number": null, "bug_type": null}
{"code": "def word_total(text):\n    words = text.split(\" \")\n    word_count = len(words)\n    return word_count", "line_number": null, "bug_type": null}
{"code": "class Employee: \n    def __init__(self, name, salary): \n        self.name = name\n        self.salary = salary\n    \n    def get_name(self):\n        return self.name\n    \n    def get_salary(self):\n        return self.salary", "line_number": null, "bug_type": null}
{"code": "def sort_list(input_list):\n    sorted_list = sorted(input_list)\n    return sorted_list\n\ninput_list = [2,7,3,9,0,4]\n\noutput = sort_list(input_list)\nprint(output)", "line_number": null, "bug_type": null}
{"code": "def find_index(my_list, value):\n    for i in range(len(my_list)):\n        if my_list[i] == value:\n            return i", "line_number": null, "bug_type": null}
{"code": "def getLargestNum(nums):\n    largestNum = nums[0]\n    \n    for num in nums[1:]:\n        if num > largestNum:\n            largestNum = num\n\n    return largestNum", "line_number": null, "bug_type": null}
{"code": "def find_keywords(sentence):\n keywords = set()\n words = sentence.split(' ')\n for word in words:\n  if word.iskeyword():\n   keywords.add(word)\n return list(keywords)", "line_number": null, "bug_type": null}
{"code": "def filterEvenNo(arr): \n\n  # return a list containing only even numbers\n  return [num for num in arr if num % 2 == 0]", "line_number": null, "bug_type": null}
{"code": "def check_number(n):\n    if n%2==0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\ncheck_number(5) \n# Output: Odd", "line_number": null, "bug_type": null}
{"code": "list = [x+2 for x in [1, 2, 3, 4]]", "line_number": null, "bug_type": null}
{"code": "def compute(a,b):\n    return a + b\n\ndef func1():\n    result = compute(2,3)\n    print(result)", "line_number": null, "bug_type": null}
{"code": "import string, random\n\nlength = 8\nchars = string.ascii_letters + string.digits\nrandom_str = ''.join(random.choice(chars) for _ in range(length))\nprint(random_str)", "line_number": null, "bug_type": null}
{"code": "def intersection(list1, list2): \n    return list(set(list1) & set(list2)) \n\n# Output: [3, 6]", "line_number": null, "bug_type": null}
{"code": "import math\n\nx = 10\n\nresult = 2*math.sqrt(x+2)\n\nprint(result ) # 12.0", "line_number": null, "bug_type": null}
{"code": "def is_prime(num):\n    if num < 2:\n        return False\n\n    for i in range(2, num):\n      if num % i == 0:\n          return False\n\n    return True", "line_number": null, "bug_type": null}
{"code": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/'\nresp = requests.get(url)\nsoup = BeautifulSoup(resp.content, 'html.parser')\n\n# Scraping code goes here", "line_number": null, "bug_type": null}
{"code": "def generateNextLevel(level):\n  next_level = []\n  for node in level:\n    if node.left != None:\n      next_level.append(node.left)\n    if node.right != None:\n      next_level.append(node.right)\n  \n  return next_level", "line_number": null, "bug_type": null}
{"code": "def extract_words(word_list, given_letter):\n    extracted_words=[]\n    for word in word_list:\n        if word[0]==given_letter:\n            extracted_words.append(word)\n    return extracted_words", "line_number": null, "bug_type": null}
{"code": "# Initialize one variable to store result\nresult = 0\n\n# Use a loop to iterate through the given range\nfor num in range(10, 20):\n    result += num\n\n# Print the result\nprint(result)", "line_number": null, "bug_type": null}
{"code": "number = 92\n\nif (number % 7) == 0:\n    print(\"The number is divisible by 7\")\nelse:\n    print(\"The number is not divisible by 7\")", "line_number": null, "bug_type": null}
{"code": "def double_num(n):\n    return n*2\n\nprint(double_num(5))\n# Outputs: 10", "line_number": null, "bug_type": null}
{"code": "def calculate_sd(lst):\n    avg = sum(lst) / len(lst)\n    return (sum([(x - avg)**2 for x in lst]) / len(lst)) ** 0.5", "line_number": null, "bug_type": null}
{"code": "def split_string(string, length):\n    substrings = [string[i:i+length] for i in range(0, len(string), length)]\n    return ','.join(substrings)", "line_number": null, "bug_type": null}
{"code": "import urllib.request\n\nurl = 'https://www.example.com'\n\nhtml_content = urllib.request.urlopen(url).read()", "line_number": null, "bug_type": null}
{"code": "def check_input(arg1, arg2):\n   if type(arg1) is not int or type(arg2) is not int:\n      return \"The input must be a number!\"\n   else:\n      return \"The input is valid!\"", "line_number": null, "bug_type": null}
{"code": "def sort_by_length(strings): \n    return sorted(strings, key=len) \n  \n# Test \nstrings = ['dog', 'cat', 'mouse', 'elephant'] \n  \nprint(sort_by_length(strings))", "line_number": null, "bug_type": null}
{"code": "def print_string(text):\n    if len(text) > 0:\n        print(text)\n    else:\n        raise Exception('The input string is empty')", "line_number": null, "bug_type": null}
{"code": "for num in range(2,101):\n prime = True\n for i in range(2,num):\n  if (num%i==0):\n   prime = False\n if prime:\n  print(num)", "line_number": null, "bug_type": null}
{"code": "def get_highest_one_digit(list_nums):\n    highest_num = 0\n    for num in list_nums:\n        if num <= 9 and num > highest_num:\n            highest_num = num\n    return highest_num", "line_number": null, "bug_type": null}
{"code": "def multiply(a, b):\n    return a * b\n\nprint(multiply(2, 3))", "line_number": null, "bug_type": null}
{"code": "def reverse_string(string): \n  rev_str = ''\n  idx = len(string) \n  while idx > 0: \n    rev_str += string[idx-1] \n    idx -= 1\n  return rev_str", "line_number": null, "bug_type": null}
{"code": "def removeNegatives(nums):\n    return [n for n in nums if n >= 0]", "line_number": null, "bug_type": null}
{"code": "def insert_item(lst, item, pos):\n    lst.insert(pos, item)\n    return lst\n\nlst = [\"Red\", \"Orange\", \"Yellow\"]\nitem = \"Black\"\npos = 2\n\nprint(insert_item(lst, item, pos))", "line_number": null, "bug_type": null}
{"code": "def count_above_average(input_list): \n average = sum(input_list)/len(input_list)\n count = 0\n for value in input_list: \n  if value > average:  \n   count += 1\n return count", "line_number": null, "bug_type": null}
{"code": "def squareSum(numbers):\n    sum_of_squares = 0\n    for num in numbers:\n        sum_of_squares += num**2\n    return sum_of_squares", "line_number": null, "bug_type": null}
{"code": "def count_even_numbers(list):\n    count = 0\n    for num in list:\n        if num % 2 == 0:\n            count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(list):\n    new_list = []\n    for item in list:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list", "line_number": null, "bug_type": null}
{"code": "def count_vowels(text):\n    counter = 0\n    for char in text:\n        if char in \"aeiouAEIOU\":\n            counter += 1\n    return counter", "line_number": null, "bug_type": null}
{"code": "def print_distinct(lst):\n    seen = set()\n    distinct = []\n    for x in lst:\n        if x not in seen:\n            distinct.append(x)\n            seen.add(x)\n    print(distinct)", "line_number": null, "bug_type": null}
{"code": "data = {'a': [1, 4], 'b': [2], 'c': [3]}", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_password():\n  data = \"0123456789\"\n  length = 10\n  password = \"\".join(random.sample(data, length))\n  return password\n\nprint(generate_password())", "line_number": null, "bug_type": null}
{"code": "def area_rectangle(length, width):\n return length * width\n\nprint(area_rectangle(2, 3)) # Output: 6", "line_number": null, "bug_type": null}
{"code": "import pandas as pd\n\ndf = pd.read_csv(\"data.csv\")\nfor index, row in df.iterrows():\n    print(\"Name:\", row['Name'], \"Phone:\", row['Phone'])", "line_number": null, "bug_type": null}
{"code": "class Stack:\n def __init__(self):\n  self._items = []\n\n def push(self, item):\n  self._items.append(item)\n\n def pop(self):\n  return self._items.pop()", "line_number": null, "bug_type": null}
{"code": "x = 5\ndef add_two_numbers(x, y):\n    z = x + y\n    return z\n\nresult = add_two_numbers(x, 5)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "employee_data = {\n    \"Michael\": 45000,\n    \"Andrew\": 55000,\n    \"Mark\": 70000\n}", "line_number": null, "bug_type": null}
{"code": "list = [4, 9, 2, 6, 5]\n\n# sort list in descending order\nlist.sort(reverse=True)\n\nprint(list) # [9, 6, 5, 4, 2]", "line_number": null, "bug_type": null}
{"code": "listA = [1, 2, 3]\nlistB = [4, 5, 6]\n\ncombined_list = listA + listB\nprint(combined_list)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef shuffleArray(arr):\n    random.shuffle(arr)\n    return arr\n\narray = [1, 2, 3, 4, 5, 6]\nshuffledArray = shuffleArray(array)\nprint(shuffledArray)", "line_number": null, "bug_type": null}
{"code": "def checkIfStringContainsSubstring(myString, substring):\n  for i in range(len(myString) - len(substring) + 1):\n    if myString[i:i+len(substring)] == substring:\n      return True\n  return False", "line_number": null, "bug_type": null}
{"code": "list = ['abc', 'hello', 'world']\n\nfor word in list:\n    if (len(word) % 2 != 0):\n        print(word)", "line_number": null, "bug_type": null}
{"code": "def main():\n  val1 = 25\n  val2 = 6\n  sum = val1 + val2\n  print(sum)\n  return 0", "line_number": null, "bug_type": null}
{"code": "def particle_diameter(radius):\n    return 2 * radius\n\ndiameter = particle_diameter(0.75)\nprint(diameter) # Output: 1.5", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef random_num_generator():\n    return random.randint(0, 9)\n\n# Print a number\nprint(random_num_generator())", "line_number": null, "bug_type": null}
{"code": "def reverse_string_words(string): \n    words = string.split(\" \") \n    words.reverse()\n    return ' '.join(words)  \n  \nstring = \"Python programming is fun\"\nprint(reverse_string_words(string))", "line_number": null, "bug_type": null}
{"code": "import base64\n\nstring = \"Hello World!\"\n\ndata_bytes = string.encode('ascii')\nencoded_string = base64.b64encode(data_bytes)\n\nprint(encoded_string)", "line_number": null, "bug_type": null}
{"code": "x = 3\nresult = 2*(x**2) + 5*x + 3\n\nprint(result)\n\n# Outputs: 34", "line_number": null, "bug_type": null}
{"code": "def remove_vowel(string):\n    vowels = ('a', 'e', 'o', 'u')\n    for x in vowels: \n        string = string.replace(x, \"\")\n    return string", "line_number": null, "bug_type": null}
{"code": "def sum_list(input_list):\n    \"\"\"Calculate the sum of the numbers in a given list\"\"\"\n    total = 0\n    for num in input_list:\n        total += num\n    return total", "line_number": null, "bug_type": null}
{"code": "numbers_dictionary = {}\nfor i in range(1,6): \n numbers_dictionary[i] = i*i\n\nprint(numbers_dictionary)", "line_number": null, "bug_type": null}
{"code": "nums = []\nfor i in range(1, 11): \n    nums.append(i)\nprint(nums)", "line_number": null, "bug_type": null}
{"code": "def dot_product(v1, v2):\n    total  = 0\n    for (x1, x2) in zip(v1, v2):\n        total += x1*x2\n    return total", "line_number": null, "bug_type": null}
{"code": "# This function calculates the sum of the numbers 0 to n.\ndef my_sum(n):\n  if n <= 1:\n    return n\n  else: \n    return n + my_sum(n-1)", "line_number": null, "bug_type": null}
{"code": "def substring(string, start, end):\n    '''This function takes a string, start index and end index, and returns the substring between the two given indexes.'''\n    return string[start:end]", "line_number": null, "bug_type": null}
{"code": "for i in range(500, 1001):\n    if i%7 == 0:\n        print(i, end=' ')", "line_number": null, "bug_type": null}
{"code": "def first_non_repeated_char(string):\n    for ch in string:\n        if string.count(ch) == 1:\n            return ch", "line_number": null, "bug_type": null}
{"code": "import requests\nfrom bs4 import BeautifulSoup\n\n#make a GET request\nresponse = requests.get('https://www.example.com')\n\n#parse HTML\nsoup = BeautifulSoup(response.text, 'html.parser')", "line_number": null, "bug_type": null}
{"code": "def gcd(a,b): \n    if(b==0): \n        return a \n    else: \n        return gcd(b,a%b)", "line_number": null, "bug_type": null}
{"code": "def sum_n(n):\n    total = 0\n    for i in range(n+1):\n        total += i\n    return total", "line_number": null, "bug_type": null}
{"code": "import random\nimport string\n\ndef random_string(stringLength=8):\n    letters_and_numbers = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    return ''.join(random.choice(letters_and_numbers) for i in range(stringLength))", "line_number": null, "bug_type": null}
{"code": "def sort_list(numbers):\n    numbers.sort()\n    return numbers\n\nresult = sort_list([5, 7, 2, 3, 4, 1])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def calculateSimpleInterest(principal, rate, duration):\n    if rate != 0:\n        interest = (principal * rate * duration) / 100\n    else:\n        interest = 0\n    return interest", "line_number": null, "bug_type": null}
{"code": "def cel_to_fahr(cel):\n    return cel * (9 / 5) + 32\n  \ndef fahr_to_cel(fahr):\n    return (fahr - 32) * (5 / 9)", "line_number": null, "bug_type": null}
{"code": "class Student:\n    def __init__(self, name, age, subject):\n        self.name = name\n        self.age = age\n        self.subject = subject", "line_number": null, "bug_type": null}
{"code": "# Input number\nn = int(input(\"Enter a number: \"))\n\n# Using format() \nprint(\"The binary equivalent of {} is:\".format(n), format(n, 'b'))", "line_number": null, "bug_type": null}
{"code": "def add(num1, num2):\n    return num1 + num2\n\nresult = add(5, 7)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def count_capitals(s):\n    count = 0\n    arr = s.split(' ')\n    for word in arr:\n        if word[0].isupper():\n            count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "def get_times_table(x):\n  times_table = []\n  for i in range(10):\n      times_table.append(x * i)\n  return times_table", "line_number": null, "bug_type": null}
{"code": "def histogram_elements(example_list):\n    histogram = {}\n    for i in example_list:\n        histogram[i] = example_list.count(i)\n    return histogram", "line_number": null, "bug_type": null}
{"code": "class Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age", "line_number": null, "bug_type": null}
{"code": "for i in range(4):\n    for j in range(4):\n        print(\"*\", end=\" \")\n    print()", "line_number": null, "bug_type": null}
{"code": "def count_frequency(string):\n    counts = {}\n    for char in string:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    return counts", "line_number": null, "bug_type": null}
{"code": "import numpy as np\n\nx = np.array([3, 4, 5])\ny = np.array([2, 6, 4])\n\ndot_product = np.dot(x, y)\n\nprint(dot_product) # 46", "line_number": null, "bug_type": null}
{"code": "from collections import Counter\n\nstring = 'mississippi'\nc = Counter(string)\nfor char, count in c.most_common():\n    print(f\"{char}: {count}\")", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(s):\n    for i in range(len(s)):\n        for j in range(len(s)-i+1):\n            substring = s[i:j]\n            if substring == substring[::-1]:\n                return True\n    return False", "line_number": null, "bug_type": null}
{"code": "def searchSubstring(str, substr):\n  for i in range(len(str)):\n    if str[i:i+len(substr)] == substr:\n      return i\n\n    return -1", "line_number": null, "bug_type": null}
{"code": "# Program to round off a number \nnum = 89.15\n\nrounded_num = round(num)\nprint(\"The rounded number is: \", rounded_num)", "line_number": null, "bug_type": null}
{"code": "def sum_list(nums):\n    if not nums: \n        return 0\n    return nums[0] + sum_list(nums[1:])\n\nsum_list([1,2,3,4,5]) # 15", "line_number": null, "bug_type": null}
{"code": "num1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))\n\nsum = num1 + num2\n\nprint(\"The sum of the two numbers is:\", sum)", "line_number": null, "bug_type": null}
{"code": "def find_divisible_numbers(start, end):\n for i in range(start, end + 1):\n  if i % 5 == 0:\n   print(i)\n\nfind_divisible_numbers(0, 15)", "line_number": null, "bug_type": null}
{"code": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def get_area(self):\n        return 3.14 * (self.radius ** 2)", "line_number": null, "bug_type": null}
{"code": "array = [2, 7, 5, 4]\n\ntotal = 0\nfor num in array:\n total += num\naverage = total/len(array)\n\nprint(\"The average of the array is:\", average)", "line_number": null, "bug_type": null}
{"code": "def query_table(table):\n    query = \"\"\"SELECT * \n            FROM %s \n            ORDER BY col1, col2 DESC\"\"\" % table\n    return query", "line_number": null, "bug_type": null}
{"code": "def AI_sort(list):\n  sorted_list = sorted(list) \n  return sorted_list\n\nlist = [4,3,7,8,2,1,6]\nprint(\"Sorted list is :\", AI_sort(list))", "line_number": null, "bug_type": null}
{"code": "def is_unique_string(s):\n    d = {} \n    for i in s:\n        if i in d:\n            return False\n        d[i] =1\n    return True", "line_number": null, "bug_type": null}
{"code": "import numpy as np\n\ndef generate_random_matrix(rows, columns):\n    matrix = np.random.randint(low = 0, high = 100, size = (rows,columns))\n    return matrix", "line_number": null, "bug_type": null}
{"code": "def generate_double_array(size):\n\tarr = [1]\n\tfor i in range(1, size):\n\t\tarr.append(arr[i - 1] * 2)\n\treturn arr", "line_number": null, "bug_type": null}
{"code": "# Calculate BMI\nheight = 1.75 # meters\nweight = 80 # kilograms\nbmi = weight / (height * height)\nprint(\"BMI: \", bmi)", "line_number": null, "bug_type": null}
{"code": "import base64\n\ndef encodeInBase64(msg):\n    msg_bytes = msg.encode('ascii')\n    base64_bytes = base64.b64encode(msg_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message", "line_number": null, "bug_type": null}
{"code": "def count_words():\n    sentence = input(\"Please enter a sentence here: \")\n    num_words = len(sentence.split())\n    print(\"The sentence has\", num_words, \"words.\")\n\ncount_words()", "line_number": null, "bug_type": null}
{"code": "import random\n\nrandom_numbers = [random.randint(1, 10) for _ in range(20)]\nmax_number = max(random_numbers)\n\nprint(random_numbers)\nprint(f'The largest number is {max_number}')", "line_number": null, "bug_type": null}
{"code": "class Summator:\n    def __init__(self, num1, num2):\n        self.num1 = num1\n        self.num2 = num2\n\n    def get_sum(self):\n        return self.num1 + self.num2", "line_number": null, "bug_type": null}
{"code": "class Student:\n  def __init__(self, name, age, gender, college):\n    self.name = name\n    self.age = age\n    self.gender = gender\n    self.college = college", "line_number": null, "bug_type": null}
{"code": "def capitalize_first_letter(text):\n  return text[0].upper() + text[1:]\n\nprint(capitalize_first_letter(\"hello world\")) # Output: Hello world", "line_number": null, "bug_type": null}
{"code": "def sum_list(inputList): \n    sum_list = 0\n    for num in inputList: \n        sum_list += num \n    return sum_list", "line_number": null, "bug_type": null}
{"code": "sentence = \"The quick brown fox jumped over the lazy dog\"\n\nwords = sentence.split()\nlongest_word = ''\nfor word in words:\n    if len(word) > len(longest_word):\n        longest_word = word\nprint(longest_word)", "line_number": null, "bug_type": null}
{"code": "from datetime import date, timedelta\n \nd = date.today() \nprint(d + timedelta(days = 30))", "line_number": null, "bug_type": null}
{"code": "import py_compile\npy_compile.compile(\"<python_code_file>\", cfile=\"<executable_name>\", doraise=True)", "line_number": null, "bug_type": null}
{"code": "\"\"\"\nA function to return the squares of an array in Python \n\"\"\"\n\ndef square_array(input_array): \n  squared_array = []\n  for i in input_array: \n    squared_array.append(i*i)\n  return squared_array", "line_number": null, "bug_type": null}
{"code": "def total_cost(items):\n    total_cost = 0\n    for item in items:\n        quantity = item[1]\n        unit_price = item[2]\n        total_cost += quantity * unit_price\n    return total_cost", "line_number": null, "bug_type": null}
{"code": "def celsius_to_fahrenheit(celsius):\n fahrenheit = (celsius * 9/5) + 32\n return fahrenheit\n\ncelsius_to_fahrenheit(30) # returns 86.0", "line_number": null, "bug_type": null}
{"code": "class Person:\n def __init__(self, name, age, gender, blood_group):\n  self.name = name\n  self.age = age\n  self.gender = gender\n  self.blood_group = blood_group", "line_number": null, "bug_type": null}
{"code": "sum = 0\nfor i in range(2,21,2): #Range(start,stop-1,step size)\n sum += i\n\nprint(sum)", "line_number": null, "bug_type": null}
{"code": "def check_prime(num):\n    if num == 1:\n        return False\n    for i in range(2,num):\n        if not num % i:\n            return False\n    return True\n\nresult = check_prime(13)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def SumOfSquares(x, y):\n return x * (x + y) + y * y", "line_number": null, "bug_type": null}
{"code": "def search_word(sentence, word):\n    words = sentence.split(\" \")\n\n    if word in words:\n        return True\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "list = [1, 2, 3, 4, 5]\n \nresult = [value for value in list if value > 2]\n \nprint(result)", "line_number": null, "bug_type": null}
{"code": "def main():\n nums = range(0,10)\n for num in nums:\n  print(\"The square of\", num,\"is\", num * num)\n\nmain()", "line_number": null, "bug_type": null}
{"code": "def printEvenNumbers(start, end):\n    for i in range(start, end + 1):\n        if (i % 2 == 0):\n            print(i, end=\" \")", "line_number": null, "bug_type": null}
{"code": "def add_list(list_a, list_b):\n    return [a + b for a, b in zip(list_a, list_b)]", "line_number": null, "bug_type": null}
{"code": "import datetime\n\nprint(f'Current Date and Time: {datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}')", "line_number": null, "bug_type": null}
{"code": "def celsius_to_fahrenheit(temp):\n    return temp * (9/5) + 32", "line_number": null, "bug_type": null}
{"code": "for x in range(1, 11):\n    y = 10//x\n    if x*y == 10:\n        print(x, y)", "line_number": null, "bug_type": null}
{"code": "from datetime import date, timedelta\n\ndef next_day(old_date):\n d = date.fromisoformat(old_date)       \n new_date = d + timedelta(1) \n return new_date.isoformat() \n\nnext_day(\"2020-06-20\")", "line_number": null, "bug_type": null}
{"code": "def addTwoNum(a, b):\n return a + b\n\nc = addTwoNum(3, 4)", "line_number": null, "bug_type": null}
{"code": "def count_words(text):\n    ''' Counts the number of words in a text '''\n    # Optimization #1: Replacing the loop and using Python's count method\n    word_count = len(text.split(' ')) \n    return word_count", "line_number": null, "bug_type": null}
{"code": "def get_product_listing(product_category):\n    return [product.get_listing() for product in product_category]", "line_number": null, "bug_type": null}
{"code": "d = {'a':1, 'b':2, 'c':3}\n\n# Using the clear() method\nd.clear()\n\nprint(d) # Prints an empty dictionary", "line_number": null, "bug_type": null}
{"code": "matrix = [[1,2,3,4],\n          [1,2,3,4],\n          [1,2,3,4],\n          [1,2,3,4]]", "line_number": null, "bug_type": null}
{"code": "for x in range(5):\n    for y in range(3):\n        col = input(\"Enter Value: \")\n        print(col, end=\"\\t\\t\")\n    print()", "line_number": null, "bug_type": null}
{"code": "def display_dict(dictionary):\n    for key, value in dictionary.items():\n        print(f'{key}: {value}')", "line_number": null, "bug_type": null}
{"code": "\"\"\"This function takes two arguments and adds them\"\"\"\ndef add(x, y):\n    return x + y", "line_number": null, "bug_type": null}
{"code": "def login():\n    username = input(\"Username:\")\n    password = input(\"Password:\")\n    if username == \"admin\" and password == \"admin\":\n        return True\n    else: \n        return False", "line_number": null, "bug_type": null}
{"code": "def sum_string(s):\n    sum = 0\n    for ch in s:\n        if ch.isdigit():\n            sum += int(ch)\n    return sum", "line_number": null, "bug_type": null}
{"code": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "line_number": null, "bug_type": null}
{"code": "expression = 'x**3 + 2*x**2 + 3'\n\nprint(eval(expression))", "line_number": null, "bug_type": null}
{"code": "def combine_strings(string1, string2): \n    return string1 + ' ' + string2 \n\nstring1 = \"Hello\" \nstring2 = \"World\"\n\nresult = combine_strings(string1, string2) \nprint(result)", "line_number": null, "bug_type": null}
{"code": "import datetime\n \ndef get_next_day_date():\n  today_date = datetime.datetime.now().date()\n  next_day_date = today_date + datetime.timedelta(days=1)\n  return next_day_date", "line_number": null, "bug_type": null}
{"code": "for i in range(1, 101):\n  if (i % 4 == 0) and (i % 2 != 0):\n    print(i)", "line_number": null, "bug_type": null}
{"code": "def odd_numbers(numbers):\n    result = 0 \n    for num in numbers: \n        if num % 2 != 0:\n            result += num\n    return result", "line_number": null, "bug_type": null}
{"code": "def find(s, t):\n    if t in s:\n        return s.index(t)\n    else:\n        return -1", "line_number": null, "bug_type": null}
{"code": "def sum_of_squares(num1, num2):\n  return num1**2 + num2**2\n\nx = 5\ny = 9\n\nprint(sum_of_squares(x, y))\n# output: 106", "line_number": null, "bug_type": null}
{"code": "import requests\n\n# Make a get request to get the latest users\nresponse = requests.get('https://jsonplaceholder.typicode.com/users')\n\n# Get the response data as a JSON\ndata = response.json()\n\n# Print the data\nprint(data)", "line_number": null, "bug_type": null}
{"code": "def sortList(lst): \n    lst.sort() \n    return lst\n  \nar_list = [5, 4, 1, 8, 9, 2]\nresult = sortList(ar_list) \n  \nprint(result)", "line_number": null, "bug_type": null}
{"code": "def linear_search(arr, x): \n    \n    for i in range(len(arr)): \n  \n        if arr[i] == x: \n            return i \n  \n    return -1", "line_number": null, "bug_type": null}
{"code": "class Student():\n    def __init__(self, name, age, gender):\n        self.name=name\n        self.age=age\n        self.gender=gender\n    def generate(self, args):\n        return Student(*args)", "line_number": null, "bug_type": null}
{"code": "import string\n\ndef is_pangram(sentence):\n    sentence = sentence.lower()\n    alphabet = string.ascii_lowercase\n    for letter in alphabet:\n        if letter not in sentence:\n            return False\n    return True", "line_number": null, "bug_type": null}
{"code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nprint(is_prime(17))", "line_number": null, "bug_type": null}
{"code": "def to_lowercase(strings):\n    return [string.lower() for string in strings]\n    \nresult = to_lowercase(['CoDE', 'OF', 'LinK'])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def is_uppercase(text):\n    if text[0].isupper():\n        print(\"True\")\n    else:\n        print(\"False\")", "line_number": null, "bug_type": null}
{"code": "def create_pair(a,b):\n    c = a+1\n    d = b+1\n    return (c, d)", "line_number": null, "bug_type": null}
{"code": "sum = 0\nfor i in range (1,11):\n    if i % 2 == 0:\n        sum += i\nprint(sum)", "line_number": null, "bug_type": null}
{"code": "def format_string(s):\n    string_arr = s.split(\"--\")\n    return ' '.join(string_arr)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef get_n_random_numbers(max_num, num_of_nums):\n    random_numbers = []\n    for _ in range(num_of_nums):\n        random_numbers.append(random.randrange(max_num))\n    return random_numbers", "line_number": null, "bug_type": null}
{"code": "def get_min_max(numbers):\n max_num = max(numbers)\n min_num = min(numbers)\n new_list = []\n for i in numbers:\n  if i == max_num or i == min_num:\n   new_list.append(i)\n return new_list", "line_number": null, "bug_type": null}
{"code": "def contains_duplicates(lst):\n    seen = set()\n    for x in lst:\n        if x in seen:\n            return True\n        seen.add(x)\n    return False", "line_number": null, "bug_type": null}
{"code": "def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1", "line_number": null, "bug_type": null}
{"code": "list = [3, 6, 9, 1, 4, 8]\n\nlist.sort()\n\nprint(list)", "line_number": null, "bug_type": null}
{"code": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# scrape the website using soup", "line_number": null, "bug_type": null}
{"code": "import requests\nimport pandas as pd\n\n# Get website content\nurl = 'http://www.example.com'\ncontent = requests.get(url).content\n\n# Create pandas data frame\ndf = pd.read_html(content)[0]", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(word):\n    word_list = list(word)\n    if word_list == word_list[::-1]:\n        return True\n    else:\n        return False\n\nresult = is_palindrome('madam')\nprint(result)", "line_number": null, "bug_type": null}
{"code": "class Student:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender", "line_number": null, "bug_type": null}
{"code": "def celsius_to_fahrenheit(cel):\n  return cel * 1.8 + 32\n\ntemp_in_fahrenheit = celsius_to_fahrenheit(20)\nprint(\"Temperature in Fahrenheit:\", temp_in_fahrenheit)", "line_number": null, "bug_type": null}
{"code": "import sys\n  \ndef size_of_object(obj): \n    return (sys.getsizeof(obj)) \n  \nobject1 = 10\nprint(size_of_object(object1))", "line_number": null, "bug_type": null}
{"code": "def intersection(arr1,arr2): \n    result = 0\n    resultSet = set(arr1) & set(arr2)\n    result = len(resultSet)\n    return result", "line_number": null, "bug_type": null}
{"code": "def is_odd(n):\n  if(n % 2 == 0):\n    return \"Even\"\n  else:\n    return \"Odd\"\n \nprint(is_odd(21)) # Outputs: \"Odd\"", "line_number": null, "bug_type": null}
{"code": "def common_elements(list1, list2):\n    return list(set(list1) & set(list2))", "line_number": null, "bug_type": null}
{"code": "def merge_dicts(dicts):\n    results = {}\n    for d in dicts:\n        results.update(d)\n    return results", "line_number": null, "bug_type": null}
{"code": "user_list = [2, 7, 4, 5]\nsorted_list = sorted(user_list)\nprint(sorted_list)\n# Output: [2, 4, 5, 7]", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)", "line_number": null, "bug_type": null}
{"code": "print('  ( _ _ )')\nprint('  | o o |')\nprint('  |  ^  |')\nprint('  | \\_/ |')", "line_number": null, "bug_type": null}
{"code": "name = input(\"What is your name? \")\n\n# greeting the user\nprint(f\"Hello {name}, nice to meet you!\")", "line_number": null, "bug_type": null}
{"code": "def repeat_string(s, n):\n    return s*n\n\nprint(repeat_string('Hello', 3))\n# Output: 'HelloHelloHello'", "line_number": null, "bug_type": null}
{"code": "def capitalize_first_character(mystring):\n    return mystring[0].upper() + mystring[1:]", "line_number": null, "bug_type": null}
{"code": "n = int(input(\"Enter an integer: \"))\nfor i in range(n):\n    for j in range(i + 1):\n        print(\"*\", end=\"\")\n    print(\"\")", "line_number": null, "bug_type": null}
{"code": "def factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\n \nnum = int(input(\"Enter a number:\"))\nprint(factorial(num))", "line_number": null, "bug_type": null}
{"code": "sentence = \"The quick brown fox jumped over the lazy dog\" \nwords = sentence.split(' ') \n  \n# 2nd and 5th words \nprint(words[1] + \" \" + words[4])", "line_number": null, "bug_type": null}
{"code": "def generate_equation(coefficients, variables):\n equation = \"\"\n for i, coeff in enumerate(coefficients):\n  equation += str(coeff) + variables[i] + \" + \"\n equation = equation[:-3]\n return equation", "line_number": null, "bug_type": null}
{"code": "# List of non-empty strings\nitems = ['apple', 'banana', 'cat', 'dog', 'elephant']\nfor i, item in enumerate(items):\n    print('item ' + str(i) + ' is ' + item)", "line_number": null, "bug_type": null}
{"code": "def strJoin(str1, str2, str3):\n    return [str1 + str2, str2 + str3, str1 + str3]", "line_number": null, "bug_type": null}
{"code": "def capitalizeCharacter(s, pos): \n    # Grab single characters from the string  \n    # starting from the given index \n    result = s[:pos] + s[pos].upper() + s[pos + 1:] \n    return result", "line_number": null, "bug_type": null}
{"code": "words = [\"these\", \"are\", \"some\", \"words\"]\nfor word in words:\n  print(word)", "line_number": null, "bug_type": null}
{"code": "def linear_search(arr, key):\n  pos = 0 \n  while pos < len(arr):\n    if arr[pos] == key:\n      return pos \n    pos += 1\n  return -1", "line_number": null, "bug_type": null}
{"code": "def print_reverse(arr): \n    for i in range(len(arr)-1, -1, -1): \n        print(arr[i], end=\" \")", "line_number": null, "bug_type": null}
{"code": "def multiply(nums):\n    result = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            result.append(nums[i] * nums[j]) \n    return result", "line_number": null, "bug_type": null}
{"code": "def get_max_elem(nums):\n    max_elem = nums[0]\n    for num in nums:\n        if num > max_elem:\n            max_elem = num\n    return max_elem", "line_number": null, "bug_type": null}
{"code": "mydict = {\n    'a': 1,\n    'b': 2,\n    'c': 3 \n}", "line_number": null, "bug_type": null}
{"code": "#!/usr/bin/env python\n# skeleton.py\n\ndef functionA():\n    pass\n\ndef functionB():\n    pass\n\ndef main():\n    functionA()\n    functionB()\n\nif __name__ == \"__main__\":\n    main()", "line_number": null, "bug_type": null}
{"code": "class GroceryStore:\n  def __init__(self):\n    self.items = {}\n\n  def add_item(self, item, price):\n    self.items[item] = price\n\n  def get_price(self, item):\n    return self.items.get(item)", "line_number": null, "bug_type": null}
{"code": "def word_and_character_count(string):\n    num_words = len(string.split())\n    num_characters = len(string)\n    print(\"Number of words:\", num_words)\n    print(\"Number of characters:\", num_characters)", "line_number": null, "bug_type": null}
{"code": "class JobOffer:\n    def __init__(self, title, salary):\n        self.title = title\n        self.salary = salary\n    \n    def get_title(self):\n        return self.title\n    \n    def get_salary(self):\n        return self.salary", "line_number": null, "bug_type": null}
{"code": "def someFunction(someList):\n    seen = set()\n    outputList = []\n    for item in someList:\n        if item not in seen:\n            outputList.append(item)\n            seen.add(item)\n    return outputList", "line_number": null, "bug_type": null}
{"code": "def decimal_to_binary(num):\n    if num == 0:\n        return 0\n    binary = ''\n    while num > 0:\n        binary = str(num%2) + binary\n        num //= 2\n    return binary", "line_number": null, "bug_type": null}
{"code": "string = \"My name is John Doe\"\nstandard_string = string.title()\nprint(standard_string)\n#My Name Is John Doe", "line_number": null, "bug_type": null}
{"code": "d = {0:1, 1:2, 2:3, 3:4, 4:4}", "line_number": null, "bug_type": null}
{"code": "def combine_strings(string1, string2):\n    combined_string = string1 + string2\n    return combined_string", "line_number": null, "bug_type": null}
{"code": "a, b = 0, 1\n \n# print the first 100 Fibonacci numbers\nfor i in range(100):\n    print(a, end=' ')\n    a, b = b, a + b", "line_number": null, "bug_type": null}
{"code": "import json\n\ndata = {\n \"name\": \"John\",\n \"age\": 32,\n \"address\": \"123 Main Street\"\n}\n\npy_dict = json.loads(data)", "line_number": null, "bug_type": null}
{"code": "person_data = {\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"age\": 28\n}", "line_number": null, "bug_type": null}
{"code": "def largestNumber(x, y, z):\n    if x > y and x > z:\n        return x\n    elif y > x and y > z:\n        return y\n    else:\n        return z", "line_number": null, "bug_type": null}
{"code": "def sort_dict_keys(d):\n  sorted_keys = sorted(d.keys())\n  sorted_dict = {key: d[key] for key in sorted_keys}\n  return sorted_dict", "line_number": null, "bug_type": null}
{"code": "def filter_strings(strings, n):\n    return [s for s in strings if len(s) > n]", "line_number": null, "bug_type": null}
{"code": "def max_val(num_list):\n\tif len(num_list) == 0:\n\t\treturn None\n\t\n\tmax_num = num_list[0]\n\t\n\tfor num in num_list:\n\t\tif num > max_num:\n\t\t\tmax_num = num\n\t\n\treturn max_num", "line_number": null, "bug_type": null}
{"code": "list_a = [1,2,3,4,5]\nlist_b = [6,7,8,9,10]", "line_number": null, "bug_type": null}
{"code": "def remove_odd_index_characters(string):\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result\n\nprint(remove_odd_index_characters(\"Hello World\"))", "line_number": null, "bug_type": null}
{"code": "ID = input('User ID: ')\n\nuser_name = ID.split('che')[0]\nprint('User Name: ' + user_name)", "line_number": null, "bug_type": null}
{"code": "def get_vowels(string):\n vowels = 'aeiou'\n return [char for char in string if char in vowels]", "line_number": null, "bug_type": null}
{"code": "import itertools \n\nletters = ('a', 'c', 'd', 'e', 'm') \n\nfor words in itertools.permutations(letters): \n    print(''.join(words))", "line_number": null, "bug_type": null}
{"code": "def getGreatestNumber(a, b):\n    if a > b:\n        return a\n    return b\n\ngreatest_num = getGreatestNumber(5, 8)\nprint(\"Greatest number is\", greatest_num)", "line_number": null, "bug_type": null}
{"code": "def is_anagram(string1, string2):\n    return (sorted(string1) == sorted(string2))\n\nprint(is_anagram(\"listen\", \"silent\")) # prints True", "line_number": null, "bug_type": null}
{"code": "def fibonacci(n):\n    if n < 2:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)", "line_number": null, "bug_type": null}
{"code": "def sortList(list):\n list.sort()\n return list\n\nprint(sortList([3, 5, 1, 2, 9])) # Output: [1, 2, 3, 5, 9]", "line_number": null, "bug_type": null}
{"code": "def sumNaturalNumbers(n): \n  sum = 0\n  for i in range(1, n+1): \n    sum+=i \n  return sum\n    \nprint(sumNaturalNumbers(100))", "line_number": null, "bug_type": null}
{"code": "class Multiplication:\n    def __init__(self, num1, num2):\n        self.num1 = num1\n        self.num2 = num2\n      \n    def multiply(self):\n        return self.num1 * self.num2", "line_number": null, "bug_type": null}
{"code": "print(\"Happy birthday to you\")\nprint(\"Happy birthday to you\")\nprint(\"Happy birthday dear ____\")\nprint(\"Happy birthday to you\")", "line_number": null, "bug_type": null}
{"code": "square = lambda nums: [x*x for x in nums]\n\nsquares = square([1,2,3])\nprint(squares)", "line_number": null, "bug_type": null}
{"code": "def remove_the(string):\n  edited_string = string.replace(\"the\", \"\")\n  return edited_string\n\nresult = remove_the(\"the quick brown fox jumped over the lazy dog\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def is_rotation(str1, str2):\n    return len(str1) == len(str2) and str2 in str1 + str1\n\n# testing\nprint(is_rotation('hello', 'lohel'))  # prints True", "line_number": null, "bug_type": null}
{"code": "matrix = [[i+(3*j) for i in range(1,4)] for j in range(3)]", "line_number": null, "bug_type": null}
{"code": "def list_to_dict(input_list):\n  output_dict = {}\n  for key, value in input_list:\n    output_dict[key] = value \n  return output_dict", "line_number": null, "bug_type": null}
{"code": "def check_type(num):\n    if num % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'", "line_number": null, "bug_type": null}
{"code": "total = 0\nfor i in range(1000):\n    if i % 3 == 0 or i % 5 == 0:\n        total += i\nprint(total)", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(string_to_test):\n    reverse = reversed(string_to_test)\n    if list(string_to_test) == list(reverse):\n        return True\n    return False", "line_number": null, "bug_type": null}
{"code": "import numpy as np\n\ndef inverse_matrix(matrix):\n    det = np.linalg.det(matrix)\n    if det == 0:\n        return None \n    return np.dot(np.linalg.inv(matrix), 1/det)", "line_number": null, "bug_type": null}
{"code": "# Converting from Java to Python\n\nnumber = 10\nsquare = number * number\nprint(\"Square of given number is: \"+str(square))", "line_number": null, "bug_type": null}
{"code": "import math\n\ndef sphere_surface_area(radius):\n surface_area = 4 * math.pi * radius * radius\n return surface_area \n\n# Test\nradius = 6\nprint(sphere_surface_area(radius)) # 452.38934211", "line_number": null, "bug_type": null}
{"code": "def linear_search(arr, target):\n    for i in range(len(arr)):\n        if (arr[i] == target):\n            return i\n    return -1", "line_number": null, "bug_type": null}
{"code": "def find_common_elements(lst1, lst2):\n    result = []\n    set_2 = set(lst2)\n    for elem1 in lst1:\n        if elem1 in set_2:\n            result.append(elem1)\n    return result", "line_number": null, "bug_type": null}
{"code": "def maximum_of_two(a,b):\n    if a > b:\n        return a\n    else:\n        return b", "line_number": null, "bug_type": null}
{"code": "def compute_sum(x, y):\n    return x + y # Added a missing indentation to the return statement.", "line_number": null, "bug_type": null}
{"code": "import random\n\nlist_elements = [1,2,3,4,5,6,7]\nrandom.shuffle(list_elements)\nprint (list_elements)", "line_number": null, "bug_type": null}
{"code": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def get_area(self):\n        return 3.14 * self.radius ** 2", "line_number": null, "bug_type": null}
{"code": "import random\n\nrandoms = random.sample(range(0,1000), 100) \nprint(randoms)", "line_number": null, "bug_type": null}
{"code": "class Person:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender", "line_number": null, "bug_type": null}
{"code": "import random \n\n# Generate a random list of 5 numbers between 1 and 99\nrandom_list = random.sample(range(1,100), 5) \n\n# Print the list \nprint(random_list)", "line_number": null, "bug_type": null}
{"code": "numbers = []\n\nfor i in range(10):\n    n = int(input(\"Enter a number: \"))\n    numbers.append(n)\n\nprint(\"The largest number entered is:\", max(numbers))", "line_number": null, "bug_type": null}
{"code": "def count_dict_elements(dic):\n    count = 0\n    for k,v in dic.items():\n        count +=1\n    return count", "line_number": null, "bug_type": null}
{"code": "def is_in_range(n, start, end):\n  if n >= start and n <= end:\n    return True\n  else:\n    return False", "line_number": null, "bug_type": null}
{"code": "def reverse_string(input_string):\n  reversed_string = \"\"\n  for char in input_string:\n    reversed_string = char + reversed_string\n  return reversed_string", "line_number": null, "bug_type": null}
{"code": "def is_unique(string):\n  characters = set()\n  for char in string:\n    if char in characters:\n      return False\n    characters.add(char)\n  return True", "line_number": null, "bug_type": null}
{"code": "user_string = input('Enter a string: ')\nchar_dict = {i:char for i, char in enumerate(user_string)}\nprint(char_dict)", "line_number": null, "bug_type": null}
{"code": "def search(list, query): \n    found_indices = [] \n    for i in range(len(list)): \n        if list[i] == query: \n            found_indices.append(i) \n    return found_indices", "line_number": null, "bug_type": null}
{"code": "import random\n\nfor i in range(10):\n num = random.randint(1,10)\n print(num)", "line_number": null, "bug_type": null}
{"code": "def probability_of_heads(n):\n    total_outcomes = 2**n\n    heads_outcomes = total_outcomes/2\n    \n    probability_of_heads = heads_outcomes / total_outcomes\n    \n    return probability_of_heads", "line_number": null, "bug_type": null}
{"code": "def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1", "line_number": null, "bug_type": null}
{"code": "words = ['apple', 'banana', 'cat', 'zebra']\nwords.sort()\n\nfor word in words:\n print(word)", "line_number": null, "bug_type": null}
{"code": "def array_sum(arr):\n  sum_arr = 0\n  for _ in range(len(arr)):\n    sum_arr += arr[_]\n  return sum_arr\n\nprint(array_sum([-3,9,2,1]))", "line_number": null, "bug_type": null}
{"code": "sum = 0\nfor num in [1, 3, 5, 7, 9]:\n    sum += num\n\nprint(sum) # 25", "line_number": null, "bug_type": null}
{"code": "class TimeSeries:\n    def __init__(self, values):\n        self.values = values\n    \n    def get_values(self):\n        return self.values", "line_number": null, "bug_type": null}
{"code": "def sum_natural_numbers(n):\n    if n < 1:\n        return 0\n    else:\n        return n + sum_natural_numbers(n - 1)", "line_number": null, "bug_type": null}
{"code": "class SampleClass:\n    def __init__(self):\n        self.public_variable = None\n\n    def get_public_variable(self):\n        return self.public_variable\n\n    def set_public_variable(self, value):\n        self.public_variable = value", "line_number": null, "bug_type": null}
{"code": "def uppercase_letter_count(string):\n    count = 0\n    for c in string: # Added missing colon\n        if c.isupper():\n            count += 1\n    return count # Removed an unnecessary '-'", "line_number": null, "bug_type": null}
{"code": "import random\nimport string\n\ndef random_string(length):\n    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))\n\nprint(random_string(10))", "line_number": null, "bug_type": null}
{"code": "def countVowels(string):\n    \n    vowels = 'aeiouAEIOU'\n    count = 0\n\n    for char in string:\n        if char in vowels:\n            count += 1\n    \n    return count", "line_number": null, "bug_type": null}
{"code": "def max(a, b): \n    if a > b: \n        return a \n    else:  \n        return b \n  \n#Driver Code \na = 3\nb = 4\nprint(max(a, b))", "line_number": null, "bug_type": null}
{"code": "def joinStrings(s1, s2):\n    return s1 + s2\n\nprint(joinStrings('Hello', 'World'))", "line_number": null, "bug_type": null}
{"code": "def to_lower(arr): \n    return [item.lower() for item in arr] \n\nresult = to_lower(list) \nprint(result) \n\n# output \n['hello', 'friends', 'world']", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(lst): \n    return list(dict.fromkeys(lst)) \n  \nlst = [1, 20, 4, 6, 20, 4, 1, 6] \nprint(remove_duplicates(lst))", "line_number": null, "bug_type": null}
{"code": "import json\n\ndata = [{'name':'John', 'age':30},\n{'name':'Paul', 'age':22}]\n\nserialized_data = json.dumps(data)\nprint(serialized_data)", "line_number": null, "bug_type": null}
{"code": "def power(num, exponent):\n    result = 1\n    for _ in range(exponent):\n        result *= num\n    return result\n\nprint(power(5, 2)) # Output: 25", "line_number": null, "bug_type": null}
{"code": "def find_two_add_up_to_target(nums, target): \n    for num1 in nums:\n        for num2 in nums:\n            if num1 + num2 == target:\n                return True\n    return False", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_password(): \n    s = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@#$0123456789\"\n    p =  \"\".join(random.sample(s,8))\n    return p\n\nprint(generate_password())", "line_number": null, "bug_type": null}
{"code": "def count_words(string):\n    counts = { }\n    for w in string.split():\n        counts[w] = counts.get(w, 0) + 1\n    return counts", "line_number": null, "bug_type": null}
{"code": "import random\nimport string\n\ndef generate_password(length):\n chars = string.ascii_letters + string.digits\n return ''.join(random.choice(chars) for _ in range(length))\n\nrandom_password = generate_password(8)\nprint(random_password)", "line_number": null, "bug_type": null}
{"code": "def linear_search(mylist, x):\n    for i in range(len(mylist)):\n        if mylist[i] == x:\n            return i\n\n    return -1", "line_number": null, "bug_type": null}
{"code": "def capitalize(words):\n  return [word.capitalize() for word in words]\n\ninput_words = [\"apple\", \"banana\", \"strawberry\"]\ncapitalized_words = capitalize(input_words)\nprint(capitalized_words)", "line_number": null, "bug_type": null}
{"code": "for i in range(1, 11):\n    print(\"4 x\", i, \"=\", 4*i)", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_password():\n    letters = string.ascii_letters + string.digits\n    return ''.join(random.choice(letters) for i in range(8))", "line_number": null, "bug_type": null}
{"code": "def calculate_probability(num_cards, num_red, num_black):\n    return (num_red/num_cards)*(num_black/(num_cards-1))", "line_number": null, "bug_type": null}
{"code": "def average(nums):\n    sum = 0\n    for n in nums:\n        sum += n\n    return sum / len(nums)\n\nnums = [1, 4, 5, 6, 7]\nprint(average(nums))", "line_number": null, "bug_type": null}
{"code": "num = 8.374\nrounded_num = round(num, 2)\nprint(rounded_num)", "line_number": null, "bug_type": null}
{"code": "import random\n\n# Create a list of 10 random numbers between 0 and 100\nrandom_list = []\nfor i in range(10):\n    random_list.append(random.randint(0,100))\n\n# Print the list\nprint(random_list)", "line_number": null, "bug_type": null}
{"code": "def split_str(str, n):\n    return [str[i:i+n] for i in range(0, len(str), n)]", "line_number": null, "bug_type": null}
{"code": "def split_on_punctuation(s):\n    #Using re module\n    import re\n    out = re.split('[,]',s)\n    return out\n\nprint(split_on_punctuation('Hello,World!'))", "line_number": null, "bug_type": null}
{"code": "x = 2\ny = 4\n\nsum = x + y\nprint(sum) # 6", "line_number": null, "bug_type": null}
{"code": "def sort_words(words):\n    '''\n    Function to sort a list of words alphabetically\n    \n    Parameters\n    words: list of strings\n    \n    Returns\n    sorted list of strings\n    '''\n    sorted_list = sorted(words)\n    return sorted_list", "line_number": null, "bug_type": null}
{"code": "def make_acronym(name):\n    acronym = \"\".join([word[0] for word in name.split()]).upper()\n    return acronym\n\nresult = make_acronym(\"Oscar Thomas\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def calculateSum(n):\n    if n <= 0:\n        return 0\n    else:\n        return n + calculateSum(n-1)\n\nresult = calculateSum(5)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(word):\n    reversed_word = word[::-1]\n    if word == reversed_word:\n        return True\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "def replace_last_element(list1, list2): \n    list1[-1:] = list2 \n    return list1", "line_number": null, "bug_type": null}
{"code": "class Movie:\n    def __init__(self, title, actor, release_date):\n        self.title = title\n        self.actor = actor\n        self.release_date = release_date", "line_number": null, "bug_type": null}
{"code": "list = [1, 3, 7, 4, 5]\nsmall1 = min(list)\nlist.remove(small1)\nsmall2 = min(list)\n\nprint(small1, small2) # 1, 3", "line_number": null, "bug_type": null}
{"code": "def average(a, b): \n    return (a + b)/2 \n  \na = 8\nb = 10\nprint(\"Average of\", a, \"and\", b, \"is\", average(a, b))", "line_number": null, "bug_type": null}
{"code": "X = [[0, 0, 0], \n     [0, 0, 0], \n     [0, 0, 0]]", "line_number": null, "bug_type": null}
{"code": "def is_lowercase(string):\n    for character in string:\n        if character != character.lower():\n            return False\n    return True", "line_number": null, "bug_type": null}
{"code": "def get_nth_element(list_of_lists, n):\n    return [item[n] for item in list_of_lists]", "line_number": null, "bug_type": null}
{"code": "def calculate_bmi(height, weight): \n    bmi = weight / ((height/100) ** 2)\n    return bmi", "line_number": null, "bug_type": null}
{"code": "if 4 < 8: \n  print('Hello World')\nelse:\n  print('Goodbye World')", "line_number": null, "bug_type": null}
{"code": "import pandas as pd\n\ntable = pd.DataFrame(columns=[str(i) for i in range(10)], index=range(20))\nprint(table)", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(word):\n  rev_word = word[::-1]\n  if word == rev_word:\n    return True\n  return False", "line_number": null, "bug_type": null}
{"code": "class Country:\n    def __init__(self, name, population, area):\n        self.name = name\n        self.population = population\n        self. area = area", "line_number": null, "bug_type": null}
{"code": "def search_element(l, x):\n    for i in range(len(l)):\n        if l[i] == x:\n            return i\n    return -1", "line_number": null, "bug_type": null}
{"code": "def count_x(list, x):\n    count = 0\n    for i in list:\n        if i == x:\n            count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "def shortest_string(strings):\n    shortest_string = strings[0]\n   \n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    \n    return shortest_string", "line_number": null, "bug_type": null}
{"code": "def find_words(words, char):\n    count_dict = dict()\n    for word in words:\n        if word.startswith(char):\n            count_dict[word] = count_dict.get(word, 0) + 1\n    return count_dict", "line_number": null, "bug_type": null}
{"code": "for i in range(15, 41):\n    if i % 7 == 0:\n        print(i)", "line_number": null, "bug_type": null}
{"code": "i = 1\nwhile i <= 10:\n    print(\"Hello World\")\n    i += 1", "line_number": null, "bug_type": null}
{"code": "def find_min(list):\n    min_value = list[0]\n\n    for value in list:\n        if value < min_value:\n            min_value = value\n\n    return min_value", "line_number": null, "bug_type": null}
{"code": "class Student: \n    def __init__(self, name, age, grade): \n        self.name = name \n        self.age = age\n        self.grade = grade", "line_number": null, "bug_type": null}
{"code": "def classify_data(feature, value, outcome):\n    if feature == \"Income\" and float(value) <= 50:\n        return outcome\n    else:\n        return \"No Classification\"", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(lst):\n    new_list = []\n    for i in lst:\n        if i not in new_list:\n            new_list.append(i)\n    \n    return new_list", "line_number": null, "bug_type": null}
{"code": "my_string = \"This is a string of text\"\n\nmy_object = {\n    \"string\": my_string\n}", "line_number": null, "bug_type": null}
{"code": "# Create a queue\nqueue = []\n\n# Push number one to ten\nfor number in range(1, 11):\n    # Pushing each number into the queue\n    queue.append(number)\n\nprint(queue)", "line_number": null, "bug_type": null}
{"code": "import json\n\ninputList = ['Apple', 'Banana', 'Coconut']\njsonObj = json.dumps(inputList)\nprint(jsonObj)", "line_number": null, "bug_type": null}
{"code": "def remove_char(given_string, character):\n    new_string =  given_string.replace(character, \"\")\n    return new_string", "line_number": null, "bug_type": null}
{"code": "def reverseString(string):\n    revString = ''\n    for i in range(len(string)-1, -1, -1):\n        revString += string[i]\n    return revString", "line_number": null, "bug_type": null}
{"code": "def count_char(s, c):\n    count = 0\n    for ch in s:\n        if ch == c:\n            count += 1\n    return count\n\nprint(count_char('hello world', 'l'))", "line_number": null, "bug_type": null}
{"code": "import pandas as pd\nimport sqlite3\n\nconn = sqlite3.connect('example.db')\n\ndf = pd.read_sql_query(\"SELECT name, age, gender, location FROM table_name\", conn)\n\nconn.close()", "line_number": null, "bug_type": null}
{"code": "def appendElementToList(list, element):\n     list.append(element)\n     return list\n\nlist = [1, 2, 3]\nelement = 4\nprint(appendElementToList(list, element))", "line_number": null, "bug_type": null}
{"code": "def filter_even(arr):\n    result = []\n    for i in arr:\n        if i % 2 != 0:\n            result.append(i)\n    return result", "line_number": null, "bug_type": null}
{"code": "def my_function(n):\n    while n > 1000 :\n        n = n//10\n    return n\n\nn = 2000\nprint(my_function(n))", "line_number": null, "bug_type": null}
{"code": "def find_pattern(arr):\n    div_by_3 = []\n\n    for num in arr:\n        if num % 3 == 0:\n            div_by_3.append(num)\n    \n    return div_by_3", "line_number": null, "bug_type": null}
{"code": "def list_to_dict(list):\n    dictionary = {}\n    for item in list:\n        dictionary[item] = 0\n\n    return dictionary", "line_number": null, "bug_type": null}
{"code": "def divide(nums):\n    return [num for num in nums if num % 2 == 0]", "line_number": null, "bug_type": null}
{"code": "def sum_lists(list1, list2):\n  return [a + b for a, b in zip(list1, list2)]", "line_number": null, "bug_type": null}
{"code": "import random\nimport string\n\ndef generate_password():\n    lettersAndDigits = string.ascii_letters + string.digits\n    password = ''.join(random.choice(lettersAndDigits) for i in range(12))\n    return password", "line_number": null, "bug_type": null}
{"code": "def detect_vowels(inp_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    return [char for char in inp_str if char.lower() in vowels]", "line_number": null, "bug_type": null}
{"code": "def find_max_value(array, start, end):\n    max_value = -float('inf')\n    for i in range(start, end):\n        max_value = max(max_value, max(array[i][start:end]))\n    return max_value", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(my_list):\n    result = []\n    seen = set()\n    for item in my_list:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result", "line_number": null, "bug_type": null}
{"code": "import copy \n\ndef deep_copy_dictionary(dictionary): \n deep_copy = copy.deepcopy(dictionary) \n return deep_copy\n\ndata = {\"name\": \"John\", \"age\": 28}\n\nresult = deep_copy_dictionary(data)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def compute_bmi(height, weight):\n    bmi = weight / (height * height)\n    return bmi\n\nbmi = compute_bmi(172, 85)\nprint(\"Your BMI is {:.2f}\".format(bmi))", "line_number": null, "bug_type": null}
{"code": "# Function to find the first word alphabetically larger than the target\ndef find_next_word(words, target):\n    for word in words:\n        if word > target:\n            return word\n    return None", "line_number": null, "bug_type": null}
{"code": "class LowercaseFilter:\n    def __init__(self, my_string):\n        self.my_string = my_string\n\n    def filter_string(self):\n        return ''.join([c for c in self.my_string if c.islower()])", "line_number": null, "bug_type": null}
{"code": "string = \"This is a sentence.\"\nwords = string.split(\" \")\nprint(words)\n# Output: ['This', 'is', 'a', 'sentence.']", "line_number": null, "bug_type": null}
{"code": "def find_smallest_element_2D(arr):\n    smallest = float('inf')\n    for row in arr:\n        smallest = min(smallest, min(row))\n    return smallest", "line_number": null, "bug_type": null}
{"code": "def round_up(f):\n    if f - int(f) >= 0.5:\n        return int(f) + 1\n    return int(f)\n\nround_val = round_up(3.14)\nprint(round_val)", "line_number": null, "bug_type": null}
{"code": "def is_multiple(number, div):\n    '''This function takes two numbers, ``number`` and ``div``, and returns ``True`` if number is a multiple of div, and ``False`` otherwise.'''\n    return number % div == 0", "line_number": null, "bug_type": null}
{"code": "list = [x**2 for x in [1, 2, 3, 4, 5, 6]]", "line_number": null, "bug_type": null}
{"code": "def repl():\n    while True:\n        # read user input\n        user_input = input(\"> \")\n        # evaluate user input\n        result = eval(user_input)\n        # print the result\n        print(result)\n\nrepl()", "line_number": null, "bug_type": null}
{"code": "def reverse_string(s):\n  return s[::-1]\n  \nprint(reverse_string('Python'))  # nohtyP", "line_number": null, "bug_type": null}
{"code": "def longer_string(string1, string2):\n    if len(string1) > len(string2):\n        return True\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "def sort_strings(strings):\n    strings.sort()\n    for string in strings:\n        print(string)\n\nsort_strings(['apple', 'mango', 'banana'])", "line_number": null, "bug_type": null}
{"code": "import json\n\n# example data\ndata = '{\"id\":1,\"name\":\"Testing\",\"description\":\"This is a test\"}'\n\n# parse data into a Python object\nobj = json.loads(data)\n\nprint(obj)", "line_number": null, "bug_type": null}
{"code": "import requests\nfrom bs4 import BeautifulSoup\n\nr = requests.get('https://example.com')\nhtml = r.text\nsoup = BeautifulSoup(html)\n\ntext = soup.find('div', {'class': 'text'}).text\nprint(text)", "line_number": null, "bug_type": null}
{"code": "import requests\nfrom bs4 import BeautifulSoup\n\npage = requests.get('https://website.com/')\nsoup = BeautifulSoup(page.content, 'html.parser')\n\nfor link in soup.find_all('a', href=True):\n    print(link['href'])", "line_number": null, "bug_type": null}
{"code": "def count_occurrences(lst, num):\n    count = 0\n    for item in lst:\n        if item == num:\n            count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "for i in range(1,11):\n for j in range(1,11):\n  print(str(i*j)+'\\t', end = '')\n print()", "line_number": null, "bug_type": null}
{"code": "def factorial(number):\n    factorial = 1\n    for i in range(1, number + 1):\n        factorial = factorial * i\n    return factorial\n\nn = 5\nresult = factorial(n)\nprint(result) # 120", "line_number": null, "bug_type": null}
{"code": "import time\n \ndef measure_time(func):\n    t_start = time.time()\n    func()\n    t_end = time.time()\n    t_delta = t_end - t_start\n    print(f\"Function execution time is {t_delta} seconds\")", "line_number": null, "bug_type": null}
{"code": "even_nums = [x for x in range(10, 30) if x%2 == 0]", "line_number": null, "bug_type": null}
{"code": "def replace_with_first_letter(sentence):\n    words = sentence.split()\n    result = [word[0] for word in words]\n    return ''.join(result)\n\nprint(replace_with_first_letter(\"Hello World\")) # Output: HW", "line_number": null, "bug_type": null}
{"code": "x = 0\nfor i in range(0,10000,2):\n    x += i\nx *= 2\nx += (10000 - 1)", "line_number": null, "bug_type": null}
{"code": "def func(n, nums):\n  res = 0\n  for i in range(n):\n    res += nums[i]\n  return res", "line_number": null, "bug_type": null}
{"code": "def mean(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total / len(nums)\n\nmean([1, 3, 5, 8, 10])  # 6.0", "line_number": null, "bug_type": null}
{"code": "def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1)", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_password(length):\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(chars) for _ in range(length))\n    return password", "line_number": null, "bug_type": null}
{"code": "def grade_test(questions):\n    score = 0\n    for question in questions:\n        if question['answer'] == question['correct_answer']:\n            score += 3\n    return score", "line_number": null, "bug_type": null}
{"code": "import re\n\ntext = \"The quick brown fox jumps over the lazy dog\"\n\n# Extract words using a regular expression\nwords_list = re.findall(r\"[\\w']+\", text)\n\n# Print the first ten words\nprint(words_list[:10])", "line_number": null, "bug_type": null}
{"code": "import re\n\ntext = \"This is an example string\"\nwords = re.findall(r'\\w+', text)\nprint(\"Total words: \" + str(len(words)))", "line_number": null, "bug_type": null}
{"code": "fruits = ['apple', 'banana', 'grape', 'pineapple', 'strawberry', 'orange', 'mango', 'pear', 'peach', 'kiwi']", "line_number": null, "bug_type": null}
{"code": "def add_one(arr): \n    for i in range(len(arr)): \n        arr[i] += 1 \n    return arr", "line_number": null, "bug_type": null}
{"code": "import secrets\n\ndef get_otp(length=6):\n    digits = \"0123456789\"\n    otp = \"\"\n    for i in range(length):\n        otp += secrets.choice(digits)  \n    return otp\n\nprint(get_otp())", "line_number": null, "bug_type": null}
{"code": "import re\n\ntext = 'This is a sentence with words'\nfind = 'words'\nreplace = 'letters'\n\nnew_text = re.sub(find, replace, text)\nprint(new_text)\n# Output: This is a sentence with letters", "line_number": null, "bug_type": null}
{"code": "def filter_by_length(words, length):\n    return [word for word in words if len(word) == length]", "line_number": null, "bug_type": null}
{"code": "for n in range(25, 46):\n    if n ** 0.5 == int(n ** 0.5):\n        print(n)", "line_number": null, "bug_type": null}
{"code": "def powerset(arr):\n    result = [[]]\n    for ele in arr:\n        result.extend([subset + [ele] for subset in result])\n    return result\n\nprint(powerset([1, 2, 3]))", "line_number": null, "bug_type": null}
{"code": "num = int(input(\"Enter a number: \"))\nif num > 10:\n    print(\"OK\")\nelse:\n    print(\"Not OK\")", "line_number": null, "bug_type": null}
{"code": "string1 = \"Welcome\"\nstring2 = \"to the world\"\n \ndef concat(string1 , string2): \n\treturn string1 + string2\n  \nprint(concat(string1, string2))", "line_number": null, "bug_type": null}
{"code": "# Python program to count the number of characters in a string\n\nstring = input('Enter a string: ')\n\ncount = 0\nfor char in string:\n    count += 1\n\nprint(f'The string contains {count} characters.')", "line_number": null, "bug_type": null}
{"code": "def index_first_occurrence(item, list):\n    for i in range(len(list)):\n        if list[i] == item:\n            return i\n    return -1", "line_number": null, "bug_type": null}
{"code": "class StudentList:\n    def __init__(self):\n        self.students = []\n\n    def add_student(self, student):\n        self.students.append(student)", "line_number": null, "bug_type": null}
{"code": "def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5.0/9.0\n    return celsius", "line_number": null, "bug_type": null}
{"code": "import base64 \ndef base64_encode(string):\n    encodedBytes = base64.b64encode(string.encode(\"utf-8\"))\n    return str(encodedBytes, \"utf-8\")", "line_number": null, "bug_type": null}
{"code": "def get_string_length(str):\n    return len(str)\n\nget_string_length(\"How are you?\")", "line_number": null, "bug_type": null}
{"code": "def triangle_area(base, height):\n return (base * height) / 2\n\ntriangle_area(10, 5)  # 25.0", "line_number": null, "bug_type": null}
{"code": "class User:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __str__(self):\n        return f\"Name is {self.name} and age is {self.age}\"", "line_number": null, "bug_type": null}
{"code": "def long_words(sentence):\n words = sentence.split(' ')\n long_words = []\n \n for word in words:\n   if len(word) > 5:\n     long_words.append(word)\n \n return long_words", "line_number": null, "bug_type": null}
{"code": "def sum_product_array(arr1, arr2):\n    total = 0\n    for i in range(len(arr1)):\n        total += arr1[i] * arr2[i]\n    return total", "line_number": null, "bug_type": null}
{"code": "def common_elements(arr1, arr2):\n  result = []\n  for ele in arr1:\n    if ele in arr2:\n      result.append(ele)\n  return result", "line_number": null, "bug_type": null}
{"code": "words = ['Hello', 'World', 'Hello', 'World', 'Foo', 'Bar']\n\nfrom collections import Counter\nword_count = Counter(words)\n\nfor word, count in word_count.items():\n print(f'{word} : {count}')", "line_number": null, "bug_type": null}
{"code": "n = 0\nfor i in range(1,11):\n n = n + i\nprint(\"The sum of all the numbers between 1 and 10 is:\", n)", "line_number": null, "bug_type": null}
{"code": "def calculate_average(numbers):\n    total = 0\n    for n in numbers:\n        total += n\n    return float(total) / len(numbers) if len(numbers) > 0 else 0", "line_number": null, "bug_type": null}
{"code": "my_dict = {\"A\":1, \"B\":2, \"C\":3, \"D\":4}\nprint(my_dict[\"C\"])", "line_number": null, "bug_type": null}
{"code": "def calculateArea(width, height):\n return width * height\n\nlength = 8\nbreadth = 10\narea = calculateArea(length, breadth)\nprint(\"Area of the rectangle:\", area)", "line_number": null, "bug_type": null}
{"code": "import random\nimport string\n\ndef generateRandomString(length):\n characters = string.ascii_lowercase + string.ascii_uppercase + string.digits\n\n return ''.join(random.choice(characters) for _ in range(length))\n\nprint(generateRandomString(10))", "line_number": null, "bug_type": null}
{"code": "def check_anagram(str1, str2):\n \n    if sorted(str1) == sorted(str2):\n        return True\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_password():\n    letters = string.ascii_letters + string.digits\n    password = ''.join(random.choice(letters) for i in range(10))\n    return password\n\nprint(generate_password())", "line_number": null, "bug_type": null}
{"code": "def averageList(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total / len(numbers)\n\nprint(averageList([10, 15, 20, 25]))", "line_number": null, "bug_type": null}
{"code": "def enumerate_list(lst):\n    output = []\n    for i in range(len(lst)):\n        output.append((i, lst[i]))\n    return output", "line_number": null, "bug_type": null}
{"code": "def print_squares():\n    for i in range(1, 11):\n        print(f'{i} : {i*i}')\n\nprint_squares()", "line_number": null, "bug_type": null}
{"code": "def remove_negatives(list):\n    filtered_list = list(filter(lambda x: x>=0,list))\n    return filtered_list", "line_number": null, "bug_type": null}
{"code": "arr = [24, 6, 15, 72, 5]\nsum = 0\n\nfor num in arr:\n    if num % 2 == 0:\n        sum += num", "line_number": null, "bug_type": null}
{"code": "import time\n\ndef printHelloWorld():\n  while True:\n    print(\"Hello World!\")\n    time.sleep(1) \n\nprintHelloWorld()", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(input_string):\n reversed_string = input_string[::-1]\n if input_string == reversed_string:\n  return True\n else:\n  return False", "line_number": null, "bug_type": null}
{"code": "def exchange_first_last(str1):\n  str2 = \"\" \n  str2 = str1[-1] + str1[1:-1] + str1[0]\n  return str2\n\nprint(exchange_first_last('Hello'))", "line_number": null, "bug_type": null}
{"code": "def hours_worked_week(hours_per_day):\n    hours_worked_week = hours_per_day * 7\n    return hours_worked_week", "line_number": null, "bug_type": null}
{"code": "# prompt the user for input\ndata = input('Enter a value: ')\n\n# print the user's input\nprint('You entered:', data)", "line_number": null, "bug_type": null}
{"code": "import numpy as np \nnp.random.seed(0)\n\ndata = np.random.randint(1,101,10)\nprint(data)", "line_number": null, "bug_type": null}
{"code": "def intersection(set1, set2): \n    return [i for i in set1 if i in set2]", "line_number": null, "bug_type": null}
{"code": "num = int(input())\nif num % 2 == 0:\n    print(\"true\")\nelse:\n    print(\"false\")", "line_number": null, "bug_type": null}
{"code": "def product(nums):\n    product = 1\n    for i in range(3):\n        product *= nums[i]\n    return product\n\nnums = [int(x) for x in input().split(\",\")]\nprint(product(nums))", "line_number": null, "bug_type": null}
{"code": "def maximum_unique_elements(arr):\n    curr_max = 0\n    seen = set()\n    for num in arr:\n        if num not in seen:\n            curr_max += 1\n            seen.add(num)\n\n    return curr_max", "line_number": null, "bug_type": null}
{"code": "# Read number from user\nnum = float(input(\"Enter a number: \"))\n\n# Divide the number by 5\nresult = num / 5\n\n# Print the result\nprint(\"Result = %.2f\" % result)", "line_number": null, "bug_type": null}
{"code": "def getAverageOfFirstThree(data):\n    sum = 0\n    for i in range(3):\n        sum += data[i]\n    \n    return sum / 3", "line_number": null, "bug_type": null}
{"code": "from flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route(\"/list\", methods=[\"GET\"])\ndef get_list():\n numbers = list(range(1, 11))\n return jsonify(numbers)\n\napp.run()", "line_number": null, "bug_type": null}
{"code": "class MyClass:\n def __init__(self, data1, data2, data3):\n  self.data1 = data1\n  self.data2 = data2\n  self.data3 = data3", "line_number": null, "bug_type": null}
{"code": "result = [] \nfor x in list: \n    if x not in result: \n        result.append(x) \nprint(result)", "line_number": null, "bug_type": null}
{"code": "def count_7(nums):\n  count = 0\n  for num in nums:\n    if num == 7:\n      count += 1\n  return count", "line_number": null, "bug_type": null}
{"code": "def sort_dicts_by_key(data, key):\n    return sorted(data, key=lambda k: k[key])", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef print_random_element(list):\n    index = random.randint(0, len(list)-1)\n    print(list[index])", "line_number": null, "bug_type": null}
{"code": "import json\ndata = {\n    'name': 'John',\n    'age': 25\n}\n\njson_data = json.dumps(data)\n# json_data = '{\"name\":\"John\",\"age\":25}'", "line_number": null, "bug_type": null}
{"code": "def calculate_mean(nums):\n    return sum(nums) / len(nums)\n\nnums = [5,2,10,3,7]\nmean = calculate_mean(nums)\nprint(mean)  # Output: 5.6", "line_number": null, "bug_type": null}
{"code": "def multiply_list(nums):\n    product = 1\n    for num in nums:\n        product *= num\n    return product\n\nprint(multiply_list([3, 6, 5, 4]))", "line_number": null, "bug_type": null}
{"code": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "line_number": null, "bug_type": null}
{"code": "import spellchecker\n\nword = \"Hello\"\n\ncorrect_word = spellchecker.correction(word)\nif word != correct_word:\n print(\"Did you mean\", correct_word, \"?\")", "line_number": null, "bug_type": null}
{"code": "def get_word_count(text):\n    words = text.split()\n    return len(words)\n\nword_count = get_word_count(\"Hello world, this is a test.\")\nprint(word_count)", "line_number": null, "bug_type": null}
{"code": "class Person:\n    def __init__(self, name, age, city):\n        self.name = name\n        self.age = age\n        self.city = city", "line_number": null, "bug_type": null}
{"code": "def gcd(a, b):\n if b == 0:\n  return a\n return gcd(b, a % b)\n\nresult = gcd(100, 12)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def reverse_word(word):\n    return word[::-1]\n\nword = \"hello\"\nresult = reverse_word(word)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def fibonacci(num): \n  x, y = 0, 1\n  while x < num:\n    print(x)\n    x, y = y, x + y\n\nfibonacci(20)", "line_number": null, "bug_type": null}
{"code": "user_input = input(\"Do you want to print 'Hello World'? (y/n): \")\n\nif user_input == 'y':\n    print(\"Hello World\")", "line_number": null, "bug_type": null}
{"code": "def wordCount(text):\n    words = text.split(' ')\n\n    return len(words)\n\nprint(wordCount(\"I love programming\"))  # 3", "line_number": null, "bug_type": null}
{"code": "import calendar\n\nc = calendar.TextCalendar(calendar.SUNDAY)\nstr = c.formatyear(2019, 2, 1, 1, 3)\nprint (str)", "line_number": null, "bug_type": null}
{"code": "def all_subsets(lst):\n    \n    res = [[]]\n    \n    for elem in lst:\n        res += [subset + [elem] for subset in res]\n        \n    return res\nall_subsets([1,2,3])", "line_number": null, "bug_type": null}
{"code": "list_items = ['apple', 'banana', 'pear', 'strawberry']\n\nindex = 0\nwhile index < len(list_items):\n   item = list_items[index]\n   print(item)\n   index += 1", "line_number": null, "bug_type": null}
{"code": "emp_dict = {\n    'name':[], \n    'salary':[], \n    'designation':[]\n};", "line_number": null, "bug_type": null}
{"code": "def style_paragraph(text):\n  return \"<p style='text-align: justify; font-weight: bold; font-family: sans-serif;'>{}</p>\".format(text)", "line_number": null, "bug_type": null}
{"code": "def uniqueList(myList):\n    uniqueList = []\n    for el in myList:\n        if el not in uniqueList:\n            uniqueList.append(el)\n    return uniqueList", "line_number": null, "bug_type": null}
{"code": "def find_common_elements(list1, list2):\n    common_elements = []\n    for elem1 in list1:\n        for elem2 in list2:\n            if elem1 == elem2:\n                common_elements.append(elem1)\n    return common_elements", "line_number": null, "bug_type": null}
{"code": "csv_data = [\n {'name': 'Albert', 'age': 22},\n {'name': 'Bob', 'age': 24},\n {'name': 'Charles', 'age': 20}\n]", "line_number": null, "bug_type": null}
{"code": "string = \"Hello World\"\n\n# convert to upper case\nstring = string.upper()\n\n# print result\nprint(string) # prints \"HELLO WORLD\"", "line_number": null, "bug_type": null}
{"code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nprint(is_prime(7))", "line_number": null, "bug_type": null}
{"code": "def is_divisible_by_five(number):\n    # check if the number is divisible by 5\n    if number % 5 == 0:\n        return 'Divisible'\n    else:\n        return 'Not divisible'", "line_number": null, "bug_type": null}
{"code": "def extract_last_digits(n):\n  return int(str(n)[-2:])\n\nresult = extract_last_digits(12345)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def factors(n):\n    factors =[]\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors", "line_number": null, "bug_type": null}
{"code": "def optimize_rules(rules):\n    optimized_rules = []\n\n    # Add your code here\n\n    return optimized_rules", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n\n    return n * factorial(n-1)\n\nresult = factorial(5)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "user_str = input(\"Please enter a string: \")\nprint(\"The length of the string is\", len(user_str))", "line_number": null, "bug_type": null}
{"code": "def flattenList(inputList): \n    outputList = [] \n    for subList in inputList: \n        for item in subList: \n            outputList.append(item) \n    return outputList", "line_number": null, "bug_type": null}
{"code": "list_of_tuples = [(1, \"a\"), (2, \"b\"), (3, \"c\")]\n\nlist_1, list_2 = zip(*list_of_tuples)\n\nprint(list_1)\nprint(list_2)", "line_number": null, "bug_type": null}
{"code": "def create_word_dict(words):\n word_dict = {}\n for word in words:\n  if word in word_dict:\n   word_dict[word] += 1\n  else:\n   word_dict[word] = 1\n return word_dict", "line_number": null, "bug_type": null}
{"code": "def calculate(a, b):\n    if b == 0:\n        raise ZeroDivisionError\n    elif b > 0:\n        c = a / b\n        return c\n    else:\n        raise ValueError", "line_number": null, "bug_type": null}
{"code": "def string_matches(string1, string2): \n    matches = 0\n    for i in range(len(string1)): \n        if string1[i] == string2[i]: \n            matches += 1\n    return matches", "line_number": null, "bug_type": null}
{"code": "def pow(num, pow):\n    result = 1\n    for i in range(pow):\n        result *= num\n    return result", "line_number": null, "bug_type": null}
{"code": "def printReverseString(in_str): \n  \n    reversed_str = in_str[::-1] \n    print(reversed_str) \n\nprintReverseString(\"Hello World!\")", "line_number": null, "bug_type": null}
{"code": "def switch_position(list, pos1, pos2):\n    list[pos1], list[pos2] = list[pos2], list[pos1]\n    return list", "line_number": null, "bug_type": null}
{"code": "def to_binary(n):\n    binary_rep = \"\"\n    while n > 0:\n        binary_rep = str(n%2) + binary_rep\n        n = int(n/2)\n    return binary_rep", "line_number": null, "bug_type": null}
{"code": "def main():\n i = 0\n while i < 10:\n  print(i)\n  i += 1\n \nmain()", "line_number": null, "bug_type": null}
{"code": "import random\n\nfor i in range(10):\n    num = random.random()\n    print(num)", "line_number": null, "bug_type": null}
{"code": "res = [x for x in [3,4,6,8,9,12] if x % 3 != 0] \nprint(res)", "line_number": null, "bug_type": null}
{"code": "def removeFourthElement(lst):\n  lst.pop(3)\n  return lst\n\nprint(removeFourthElement([1,2,3,4,5]))", "line_number": null, "bug_type": null}
{"code": "def avg_list(numbers): \n    total = 0\n    for x in numbers: \n        total += x \n    return total / len(numbers)", "line_number": null, "bug_type": null}
{"code": "def is_sum_possible(nums, target_sum):\n    num_set = set(nums)\n\n    for num in num_set:\n        if (target_sum - num) in num_set:\n            return True\n    return False", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef create_random_list():\n result = []\n for i in range(10):\n  result.append(random.randint(0, 100))\n return result", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_random_number(x, y):\n    start = min(x, y)\n    end = max(x, y)\n    return random.randint(start, end)\n\nresult = generate_random_number(4, 8)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def to_int(string):\n    '''This function takes a string and converts it to an integer.'''\n    return int(string)", "line_number": null, "bug_type": null}
{"code": "def sort_ascending(arr):\n    arr.sort()\n    return arr\n\nresult = sort_ascending([5, 8, 2, 6])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "my_list = [1, 5, 10, 20, 8]\n\nlargest = max(my_list)\nprint(\"The largest number from the given list is: \" + str(largest))", "line_number": null, "bug_type": null}
{"code": "def calculate_trade():\n coal = 50\n barley = 50\n while coal > 0 and barley > 0:\n  coal -= 1\n  barley -= 2\n return coal + barley", "line_number": null, "bug_type": null}
{"code": "def fibonacci(n):\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "line_number": null, "bug_type": null}
{"code": "def str_find(str1, str2):\n    return str1.find(str2) != -1\n\nstr_find(\"This is a test.\", \"test\")", "line_number": null, "bug_type": null}
{"code": "import random\n\n# Generate a list of numbers ranging from 1 to 10 without duplicates\nnumbers = list(range(1,11))\nrandom.shuffle(numbers)\n\n# Print shuffled numbers\nprint(numbers)", "line_number": null, "bug_type": null}
{"code": "def swap_array(arr, pos_1, pos_2):\n    arr[pos_1], arr[pos_2] = arr[pos_2], arr[pos_1]\n    return arr", "line_number": null, "bug_type": null}
{"code": "def remove_odd_numbers(arr):\n    result = [i for i in arr if i % 2 == 0]\n    return result", "line_number": null, "bug_type": null}
{"code": "def is_prime(num): \n    if num <= 1: \n           return False\n    for i in range(2, num): \n           if num % i == 0: \n               return False\n    return True", "line_number": null, "bug_type": null}
{"code": "def create_array(start, end):\n    array = []\n\n    for i in range(start, end+1):\n        array.append(i)\n\n    return array", "line_number": null, "bug_type": null}
{"code": "def sum_of_squares(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i ** 2\n    return total\n \nprint(sum_of_squares(100))", "line_number": null, "bug_type": null}
{"code": "def sort_list(arr):\n    return sorted(arr)\n\nmy_list = [3, 4, 6, 1, 9, 5, 2]\nsorted_list = sort_list(my_list)\nprint(sorted_list)", "line_number": null, "bug_type": null}
{"code": "def optimize_array(A):\n    A.sort()\n    return A\n\nprint(optimize_array([5, 4, 8, 9, 6, 1, -4, 7]))", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef random_number(n):\n  return random.randint(0, n)\n\nrandom_num = random_number(6)\nprint(random_num)", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(sentence): \n    rev=(sentence.lower()).replace(\" \",\"\")\n    return rev == rev[::-1]", "line_number": null, "bug_type": null}
{"code": "import json\n\ndata = {\n 'name': 'Alice',\n 'age': 22,\n 'hobbies': ['coding', 'guitar']\n}\n\njson_data = json.dumps(data)\n\nprint(json_data)", "line_number": null, "bug_type": null}
{"code": "def max_of_three(x, y, z):\n    max_num = x\n    if y > max_num:\n        max_num = y\n    if z > max_num:\n        max_num = z\n    return max_num", "line_number": null, "bug_type": null}
{"code": "sorted_list = []\ninput_strings = input(\"Enter a list of strings, separated by spaces: \")\n\ninput_strings = input_strings.split()\nfor string in input_strings:\n    sorted_list.append(string)\n\nsorted_list.sort()\n\nprint(sorted_list)", "line_number": null, "bug_type": null}
{"code": "def pair(num_1, num_2):\n return [num_1, num_2]\n\nprint(pair(10, 20))", "line_number": null, "bug_type": null}
{"code": "def celsius_to_fahrenheit(celsius):\n    return celsius * (9/5) + 32\n\ntemperature = celsius_to_fahrenheit(32)\n \nprint(\"32\u00b0C is equal to %.2f\u00b0F\" % temperature)", "line_number": null, "bug_type": null}
{"code": "def reverse_words(sentence):\n    words = sentence.split()\n    words.reverse()\n    return \" \".join(words)\n\nprint(reverse_words(\"I love programming.\"))", "line_number": null, "bug_type": null}
{"code": "def calculate_bill(rate, consumption):\n    bill = rate * consumption\n    print(\"Your total electricity bill is Rs. {}\".format(bill))\n\ncalculate_bill(40, 300)", "line_number": null, "bug_type": null}
{"code": "from selenium import webdriver\n\nurl = 'https://en.wikipedia.org/wiki/Python'\n\ndriver = webdriver.Chrome()\ndriver.get(url)\n\npage_content = driver.page_source\n \ndriver.close()\n\n# Process page_content", "line_number": null, "bug_type": null}
{"code": "def dfs(root): \n    if root is not None: \n        print(root.data) \n        dfs(root.left) \n        dfs(root.right)", "line_number": null, "bug_type": null}
{"code": "def max_of_two(x, y):\n    if x > y:\n        return x\n    return y\n\n# This code is correct and will output the maximum value of the two numbers.", "line_number": null, "bug_type": null}
{"code": "def count_matches(list_a, list_b):\n    count = 0\n    for item_a in list_a:\n        for item_b in list_b:\n            if item_b == item_a:\n                count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "def find_length(string):\n     length = 0\n     for i in string:\n         length = length+1 \n     return length", "line_number": null, "bug_type": null}
{"code": "import lint\n\ndef check_code(source_code):\n    lint.py_run(source_code, \"--report=yes\")", "line_number": null, "bug_type": null}
{"code": "import re\n\nwords_regex = re.compile(r\"apple|banana|strawberry|orange\")", "line_number": null, "bug_type": null}
{"code": "{\n 'a': ['A', 'into'],\n 'c': ['cat'],\n 'j': ['jumped'],\n 'k': ['kitchen'],\n 'w': ['wild']\n}", "line_number": null, "bug_type": null}
{"code": "def max_of_two(a,b):\n    if a> b:\n        return a\n    else:\n        return b\n\nmax_of_two(10,11)", "line_number": null, "bug_type": null}
{"code": "my_list = [1, 2, 3, 4, 5, 6]\n\n# sum comprehension \ntotal = sum(num for num in my_list if num % 2 == 0)\nprint(total)", "line_number": null, "bug_type": null}
{"code": "def average_even(list):\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return sum(even_list)/len(even_list)", "line_number": null, "bug_type": null}
{"code": "input_list = [\"a\", \"b\", \"c\", \"d\", \"a\", \"e\"]\nunique_list = set(input_list)\n\nprint(unique_list)\n# Output: {'a', 'c', 'b', 'e', 'd'}", "line_number": null, "bug_type": null}
{"code": "def print_fibonacci_series(n):\n    a, b = 0, 1\n    for i in range(n):\n        print(a)\n        a, b = b, a + b\n\nprint_fibonacci_series(7)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef get_random_uppercase_letter():\n    return chr(random.randint(65,90))\n\nif __name__ == '__main__':\n    print(get_random_uppercase_letter())", "line_number": null, "bug_type": null}
{"code": "def area_of_circle(radius):\n    return round(3.14 * radius * radius, 2)", "line_number": null, "bug_type": null}
{"code": "def factorial(n): \n    if (n == 0): \n        return 1\n    return n * factorial(n - 1)", "line_number": null, "bug_type": null}
{"code": "def multiplication_table(num): \n    for i in range(1, 11): \n        print(num, 'x', i, '=', num*i) \n        \nnum = int(input(\"Enter a number: \"))\n\nmultiplication_table(num)", "line_number": null, "bug_type": null}
{"code": "\"\"\"\nimport asyncio\nimport re\n\nasync def find_files(files, pattern):\n    result = []\n    for f in files:\n        if re.search(pattern,f):\n            result.append(f)\n    return result\n\"\"\"", "line_number": null, "bug_type": null}
{"code": "city_population = {\n    'New York': 8450000, \n    'Los Angeles': 4000000, \n    'Chicago': 2700000, \n    'Houston': 2300000\n    }", "line_number": null, "bug_type": null}
{"code": "import numpy as np\n\n# initialize 3D array\narr = np.zeros((4,3,2))", "line_number": null, "bug_type": null}
{"code": "from bs4 import BeautifulSoup\ndef get_description(html_str):\n  soup = BeautifulSoup(html_str, \"lxml\")\n  description = soup.find(\"description\")\n  return description.get_text()", "line_number": null, "bug_type": null}
{"code": "A = ['apple', 'banana', 'orange', 'grape']\nA[0] = 'pear'\nprint(A) # Output:  ['pear', 'banana', 'orange', 'grape']", "line_number": null, "bug_type": null}
{"code": "def get_unique_elements(list1, list2):\n return list(set(list1) - set(list2))", "line_number": null, "bug_type": null}
{"code": "def max_depth(root):\n    if root is None:\n        return 0\n\n    left_depth = max_depth(root.left)\n    right_depth = max_depth(root.right)\n\n    return max(left_depth, right_depth) + 1", "line_number": null, "bug_type": null}
{"code": "def clean_string(string):\n    cleanedString = \"\"\n    for c in string:\n        if c.isalnum():   \n            cleanedString += c \n  \n    return cleanedString", "line_number": null, "bug_type": null}
{"code": "def run_script(script):\n    '''This function will run a Python script from the command line.'''\n    import subprocess\n    subprocess.call(['python', script])\n\nif __name__ == '__main__':\n    run_script('script.py')", "line_number": null, "bug_type": null}
{"code": "for num in list: \n    if (num % 2 == 0):\n        print(num, end = ' ')", "line_number": null, "bug_type": null}
{"code": "def getProduct(n):\n  result = 1\n  for i in range(n):\n    result *= i+1\n    \n  return result", "line_number": null, "bug_type": null}
{"code": "def unique(arr): \n    uniq_arr = []\n    for x in arr:\n        if x not in uniq_arr: \n            uniq_arr.append(x) \n    return uniq_arr", "line_number": null, "bug_type": null}
{"code": "def find_list_difference(list1, list2):\n    diff = []\n    list2_set = set(list2)\n    for item in list1:\n        if item not in list2_set:\n            diff.append(item)\n    return diff", "line_number": null, "bug_type": null}
{"code": "def reverse_string(string):\n rev_string = ''\n for char in string:\n  rev_string = char + rev_string\n\n return rev_string\n\n # Time Complexity: O(N)\n # Space Complexity: O(N)", "line_number": null, "bug_type": null}
{"code": "def find_element(inputlist, element):\n    for i, num in enumerate(inputlist):\n        if element == num:\n            return i", "line_number": null, "bug_type": null}
{"code": "def pig_latin(sentence):\n    words = sentence.split(\" \")\n    result = \"\"\n    for word in words:\n        result += word[1:] + word[0] + \"ay \"\n    return result[:-1]", "line_number": null, "bug_type": null}
{"code": "def is_anagram(s1, s2):\n    s1 = s1.replace(\" \",\"\").lower()\n    s2 = s2.replace(\" \",\"\").lower()\n    return sorted(s1) == sorted(s2)", "line_number": null, "bug_type": null}
{"code": "import random \n  \nrandom_number = random.randint(10, 50) \n  \nprint(\"Random number between 10 and 50 is\", random_number)", "line_number": null, "bug_type": null}
{"code": "def find_duplicates(numbers):\n    seen = set()\n    duplicates = set()\n\n    for number in numbers:\n        if number in seen:\n            duplicates.add(number)\n        else:\n            seen.add(number)\n    \n    return duplicates", "line_number": null, "bug_type": null}
{"code": "def classifyValue(value):\n    if isinstance(value, bool):\n        return \"Boolean\"\n    elif isinstance(value, int):\n        return \"Integer\"\n    else:\n        return \"Other\"", "line_number": null, "bug_type": null}
{"code": "def concatStringsWithSpace(str1, str2):\n  return str1 + \" \" + str2\n\nresult = concatStringsWithSpace(\"Programming\", \"is Fun\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "import re\n\ndef is_palindrome(s):\n    pattern = r'^[a-zA-Z0-9]*$'\n    if re.match(pattern, s):\n        return s == s[::-1]\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "# Import datetime module\nimport datetime\n\n# Get the current time\nnow = datetime.datetime.now()\n\n# Print the current time in the format hh:mm:ss\nprint(now.strftime(\"%H:%M:%S\"))", "line_number": null, "bug_type": null}
{"code": "def concatenate(str1, str2):\n    return str1 + str2\n\n# example \nstr1 = \"Hello\"\nstr2 = \" World\"\nresult = concatenate(str1, str2)\nprint(result) # Hello World", "line_number": null, "bug_type": null}
{"code": "class Person:\n  def __init__(self, name, year):\n    self.name = name\n    self.year = year\n\nperson = Person(\"Jane\", 1998)", "line_number": null, "bug_type": null}
{"code": "import datetime\n\ndateTimeObj = datetime.datetime.now()\n\nprint('Current Date and Time:', dateTimeObj)", "line_number": null, "bug_type": null}
{"code": "def get_sum(list):\n    total = 0\n    for num in list:\n        total += num\n    return total", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "line_number": null, "bug_type": null}
{"code": "class Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model", "line_number": null, "bug_type": null}
{"code": "def gcd(a, b):\n    while b != 0:\n        temp = a\n        a = b\n        b = temp % b\n    return a\n\nprint(gcd(20,45))", "line_number": null, "bug_type": null}
{"code": "import random\n\n# Create an array of 100 random integers between 1 to 1000\narray = [random.randint(1, 1000) for i in range(100)]\nprint(array)", "line_number": null, "bug_type": null}
{"code": "def fibonacci(n):\n    a = 0\n    b = 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\nprint(fibonacci(10))", "line_number": null, "bug_type": null}
{"code": "def is_divisible(number1, number2):\n   return number1 % number2 == 0", "line_number": null, "bug_type": null}
{"code": "def dot_product(list1, list2):\n  product = 0\n  for x, y in zip(list1, list2):\n    product += x*y\n  return product", "line_number": null, "bug_type": null}
{"code": "# Define the two numbers\nnum1 = 37\nnum2 = 22\n\n# Print the larger number\nif num1 > num2:\n    print(num1)\nelse:\n    print(num2)", "line_number": null, "bug_type": null}
{"code": "def list_to_int(list_of_ints):\n number = 0\n for int in list_of_ints:\n  number = number*10 + int\n return number", "line_number": null, "bug_type": null}
{"code": "def word_lengths(string):\n    words = string.split(' ')\n    lengths = []\n    for word in words:\n        lengths.append(len(word))\n    return lengths \n\nword_lengths('Hello World') // [5, 5]", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n \ndef generate_password(length):\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(password_chars) for i in range(length))\n \nprint(generate_password(20))", "line_number": null, "bug_type": null}
{"code": "def wordCount(str): \n    count = len(str.split()) \n    return count \n\nprint(wordCount(\"Example string\")) \n\n# Output: 2", "line_number": null, "bug_type": null}
{"code": "def clean_data(data):\n    cleaned_data = []\n    for row in data:\n        if row[1] != '' and row[2] != '':\n            cleaned_data.append(row)\n    \n    return cleaned_data", "line_number": null, "bug_type": null}
{"code": "class MyClass:\n    def __init__(self):\n        self.list = []\n        self.dictionary = {}", "line_number": null, "bug_type": null}
{"code": "def swap(list_of_numbers):\n    list_of_numbers[0], list_of_numbers[-1] = list_of_numbers[-1], list_of_numbers[0]\n    return list_of_numbers", "line_number": null, "bug_type": null}
{"code": "# function to search an element  \n# in a list \ndef linear_search(list, x): \n    for index, element in enumerate(list): \n        if element == x: \n            return index \n    return -1", "line_number": null, "bug_type": null}
{"code": "def calculate_sum(numbers):\n    return sum(numbers)\n\nnumbers = [1, 2, 3, 4, 5]\ncalculate_sum(numbers)", "line_number": null, "bug_type": null}
{"code": "import datetime\n\n# Get current datetime \nnow = datetime.datetime.now()\n\n# Print the current datetime in ISO 8601 format\nprint(now.isoformat())", "line_number": null, "bug_type": null}
{"code": "def sum_array(array):\n  total = 0\n  for element in array:\n    total = total + element\n  return total", "line_number": null, "bug_type": null}
{"code": "text = \"The cat was running in the park\"\n\nwords = text.split(' ')\nunique_words = []\n\nfor word in words:\n if word not in unique_words: \n  unique_words.append(word)\n\nprint(' '.join(unique_words))", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef random_int_between_1_and_100():\n  return random.randint(1, 100)", "line_number": null, "bug_type": null}
{"code": "def invite_guests(guests):\n    for guest in guests:\n        print(\"Dear \"+ guest + \", You are invited to my birthday party!\")", "line_number": null, "bug_type": null}
{"code": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "line_number": null, "bug_type": null}
{"code": "def insertBeginningAndEnd(arr, str):\n    result = []\n    for element in arr:\n        result.append(str + element + str)\n\n    return result\n\nresult = insertBeginningAndEnd([\"hello\", \"world\"], \"***\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def Fibonacci(x): \n    if x <= 0: \n        return 0\n    elif x == 1: \n        return 1\n    else: \n        return Fibonacci(x-1) + Fibonacci(x-2)", "line_number": null, "bug_type": null}
{"code": "class ValuePair():\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n    \n    def get_key(self):\n        return self.key\n    \n    def get_value(self):\n        return self.value", "line_number": null, "bug_type": null}
{"code": "def alphabet_sort(string):\n    # Split the string into a list of chars\n    chars = list(string)\n    \n    # Sort the list alphabetically\n    chars.sort()\n    \n    # Join the list of chars\n    return \"\".join(chars)", "line_number": null, "bug_type": null}
{"code": "#Getting the value of the 'name' key from the dictionary \ndict = {'name':'John', 'age': 30, 'city':'New York'}\nvalue = dict['name'] \n\n#Printing the value \nprint(value)", "line_number": null, "bug_type": null}
{"code": "def convert_to_uppercase(data):\n    if type(data)==str:\n        return data.upper()\n    else:\n        print(\"Input must be a string\")", "line_number": null, "bug_type": null}
{"code": "d = {'Shiva': 23, 'Rohan': 12, 'Amit': 79} \n\nsorted_dict = dict(sorted(d.items(), key = lambda x : x[0])) \n\nprint(\"Sorted Dictionary :\", sorted_dict)", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "line_number": null, "bug_type": null}
{"code": "def nth_fibonacci(n):\n if n == 0:\n  return 0\n elif n == 1:\n  return 1\n else:\n  return nth_fibonacci(n-1) + nth_fibonacci(n-2)", "line_number": null, "bug_type": null}
{"code": "d = {}\n\nfor i in range(1000):\n    if i % 7 == 0:\n        d[i] = i\n\nprint(d)", "line_number": null, "bug_type": null}
{"code": "def reverseString(string):\n    reversedString = \"\"\n    for i in range(len(string) - 1, -1, -1):\n        reversedString += string[i]\n    return reversedString", "line_number": null, "bug_type": null}
{"code": "def capitalize_words(string):\n    words = string.split(' ')\n    capitalized_words = [word.capitalize() for word in words]\n    return ' '.join(capitalized_words)\n\nprint(capitalize_words('enter the dragon'))", "line_number": null, "bug_type": null}
{"code": "def add(num1, num2): \n    while num2 != 0: \n        carry = num1 & num2 \n        num1 = num1 ^ num2 \n        num2 = carry << 1\n    return num1", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_password(length):\n    chars = string.ascii_lowercase + string.ascii_uppercase + string.digits\n    return ''.join(random.choice(chars) for _ in range(length))\n\ngenerate_password(10)", "line_number": null, "bug_type": null}
{"code": "def count_ones(binary_string):\n    count = 0\n    for bit in binary_string:\n        if bit == '1':\n            count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "even_numbers = [num for num in range(0, 31) if num % 2 == 0]", "line_number": null, "bug_type": null}
{"code": "def factor_of(n):\n    result = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            result.append(i)\n    return result", "line_number": null, "bug_type": null}
{"code": "prime_nos = {11, 13, 17, 19, 23, 29}\n\noutput_dict = {prime_no: prime_no**2 for prime_no in prime_nos}\nprint(output_dict)", "line_number": null, "bug_type": null}
{"code": "\"\"\"\nConvert the following pseudocode into a Python program\n\"\"\"\n\ni = 0\nj = 0\nwhile i < 10:\n    j += i\n    i += 1\n    \nprint(j)", "line_number": null, "bug_type": null}
{"code": "def print_conditions():\n    print(\"Hello World\")\n    print(\"Goodbye World\")\n\nprint_conditions()", "line_number": null, "bug_type": null}
{"code": "def reverse(sentence): \n    words = sentence.split(\" \")   \n    rev_words = words[::-1] \n    rev_sentence =' '.join(rev_words)  \n    return rev_sentence", "line_number": null, "bug_type": null}
{"code": "import re\n\nhtml = '<p>This is a <a href=\"https://example.com\">link</a>.'\ntext = re.sub(r'<[^>]+>', '', html)\nprint(text)\n\n# Output: This is a link.", "line_number": null, "bug_type": null}
{"code": "import os\n\ndirs_list = [\"dir1\", \"dir2\", \"dir3\"]\n\nfor d in dirs_list:\n    os.makedirs(d)", "line_number": null, "bug_type": null}
{"code": "def fibonacci(n):\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib", "line_number": null, "bug_type": null}
{"code": "import sqlite3\n\nconn = sqlite3.connect('example.db')\n\ncursor = conn.cursor()\n\ncursor.execute('SELECT * FROM users')\nrows = cursor.fetchall()\n\nfor row in rows:\n print(row)\n\nconn.close()", "line_number": null, "bug_type": null}
{"code": "def delete_last_item(lst):\n  lst.pop()\n  return lst\n\nprint(delete_last_item([1,2,3,4,5]))", "line_number": null, "bug_type": null}
{"code": "def celsius_to_fahrenheit(celsius): \n  return (celsius * 9/5) + 32", "line_number": null, "bug_type": null}
{"code": "def sum_of_squares(arr):\n    total = 0\n    for num in arr:\n        total += num * num\n    return total", "line_number": null, "bug_type": null}
{"code": "word_count = {\n  'cat': 1, \n  'apple': 1,\n  'dog': 1,  \n  'banana': 1\n}", "line_number": null, "bug_type": null}
{"code": "from flask import Flask\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n\treturn \"Hello, World!\"\n\nif __name__ == \"__main__\":\n\tapp.run()", "line_number": null, "bug_type": null}
{"code": "for number in range(0,11):\n  if (number % 2 == 0):\n    print(number)", "line_number": null, "bug_type": null}
{"code": "list = [4, 2, 3, 5, 1]\nlist.sort()\nprint(list)", "line_number": null, "bug_type": null}
{"code": "states = {'NY': 'New York', 'PA': 'Pennsylvania', 'FL': 'Florida'}\n\ninverse_states = {value:key for key,value in states.items()}", "line_number": null, "bug_type": null}
{"code": "def maximum(list):\n    return max(list)\n\nlist = [8, 5, 2, 4, 9]\nresult = maximum(list)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def reverseStringOfList(list):\n    revList = []\n    for string in list:\n        revList.append(string[::-1])\n    return revList\n\nresult = reverseStringOfList([\"Python\", \"Java\", \"C++\"])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_random_string(size):\n chars = string.ascii_letters + string.digits\n return ''.join(random.choice(chars) for _ in range(size))", "line_number": null, "bug_type": null}
{"code": "list = [x + 10 for x in [1, 2, 3, 4]]", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_password(length):\n    chars = string.ascii_lowercase + string.ascii_uppercase + string.digits\n    generated_password = ''.join(random.choice(chars) for i in range(length))\n\n    return generated_password", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_random_string(length):\n    random_str = ''.join(random.choices(string.ascii_uppercase + string.digits, k=length)) \n    return random_str", "line_number": null, "bug_type": null}
{"code": "def swap_values(x, y):\n    temp = x\n    x = y\n    y = temp\n    return x, y\n\nx, y = swap_values(3,5)\nprint(x, y)", "line_number": null, "bug_type": null}
{"code": "def count_digits(number):\n    count = 0\n    while (number != 0): \n        count=count+1\n        number = number//10\n    return count", "line_number": null, "bug_type": null}
{"code": "class SomeClass:\n    def __init__(self):\n        pass\n    \n    def method1(self):\n        pass\n\n    def method2(self):\n        pass", "line_number": null, "bug_type": null}
{"code": "def sort_dict_by_values(dict):\n  return sorted(dict.items(), key=lambda kv: kv[1])", "line_number": null, "bug_type": null}
{"code": "x = 7\nif x == 7:\n    print(\"The number is 7\")", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(s):\n\trev_s = s[::-1]\n\t\n\tif s == rev_s:\n\t\treturn True\n\telse:\n\t\treturn False", "line_number": null, "bug_type": null}
{"code": "class Friend:\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address\n\nfriends_list = []", "line_number": null, "bug_type": null}
{"code": "class Employee: \n    def __init__(self, name, salary, job_assignment): \n        self.name = name \n        self.salary = salary\n        self.job_assignment = job_assignment\n  \n    # other methods here", "line_number": null, "bug_type": null}
{"code": "def printDescending(): \n  for i in range(10,-1,-1): \n    print (i) \n\nprintDescending()", "line_number": null, "bug_type": null}
{"code": "def count_vowels(string):\n vowels = ['a', 'e', 'i', 'o', 'u']\n return sum(string.count(x) for x in vowels)", "line_number": null, "bug_type": null}
{"code": "def insert_at_end(list, item):\n    \"\"\"Inserts an item at the end of a list\"\"\"\n    list.append(item)", "line_number": null, "bug_type": null}
{"code": "import math\n \n# Faster loop implementation\ndef fast_loop(num):\n    result = 1\n    for i in range(int(num)):\n        result += math.sqrt(i*i + 1)\n    return result", "line_number": null, "bug_type": null}
{"code": "def linearSearch(arr, target):\n  for i in range(len(arr)):\n    if arr[i] == target:\n      return i\n  return -1 # target not found", "line_number": null, "bug_type": null}
{"code": "def common_elements(x, y):\n    common = []\n    for i in x:\n        if i in y:\n            common.append(i)\n    return common", "line_number": null, "bug_type": null}
{"code": "def compare_strings(first, second):\n    return first == second\n\nresult = compare_strings('Apple', 'Orange')\nprint (result)", "line_number": null, "bug_type": null}
{"code": "def fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\nfor x in fibonacci(20):\n    print(x)", "line_number": null, "bug_type": null}
{"code": "for i in range(0,6):\n    for j in range(0,6):\n        if i != j:\n            print(i,j)", "line_number": null, "bug_type": null}
{"code": "class Point:\n def __init__(self, x, y):\n     self.x = x\n     self.y = y\n\n# create a Point object\np = Point(2, 4)\n\nprint(p.x)\nprint(p.y)", "line_number": null, "bug_type": null}
{"code": "class Animal:\n def __init__(self, name, age):\n  self.name = name\n  self.age = age\n \n def speak(self):\n  print(\"My name is\", self.name)", "line_number": null, "bug_type": null}
{"code": "def evaluate_expression(expression):\n    try:\n        result = eval(expression)\n        print(result)\n    except:\n        print(\"Error: invalid expression\")\n\nevaluate_expression(\"1+1\")", "line_number": null, "bug_type": null}
{"code": "def list_sum(list):\n   sum = 0\n   for el in list:\n       sum += el\n   return sum", "line_number": null, "bug_type": null}
{"code": "def print_table():\n    print(\" x | x^2\")\n    print(\"-----------\")\n\n    for i in range(11):\n        answer = i * i\n        print(f\" {i} | {answer}\")\n\nprint_table()", "line_number": null, "bug_type": null}
{"code": "for i in range(7):\n    print(\"*\" * i)\nfor i in reversed(range(7)):\n    print(\"*\" * i)", "line_number": null, "bug_type": null}
{"code": "def remove_words(word, words):\n    return [w for w in words if w == word]", "line_number": null, "bug_type": null}
{"code": "def string_truncate(string, length):\n    if length > len(string):\n        return string\n    else:\n        return string[:length] + '...'", "line_number": null, "bug_type": null}
{"code": "odd_numbers = [num for num in [1, 2, 3, 4, 5, 6, 7, 8, 9] if num % 2 != 0]", "line_number": null, "bug_type": null}
{"code": "a = 1 \nb = 2\nsum = a + b \nprint(sum) # 3", "line_number": null, "bug_type": null}
{"code": "def print_first_word(sentence):\n    words = sentence.split(' ')\n    print(words[0])\n\nsentence = \"Hello, World!\"\nprint_first_word(sentence)", "line_number": null, "bug_type": null}
{"code": "def linear_search(arr, x): \n  \n    for i in range(len(arr)): \n  \n        if arr[i] == x: \n            return i \n  \n    return -1", "line_number": null, "bug_type": null}
{"code": "def reverse_string(string):\n    output = \"\"\n    for i in range(len(string)):\n        output += string[len(string)-1-i]\n    return output", "line_number": null, "bug_type": null}
{"code": "words = [\"Apple\", \"Banana\", \"Orange\"]\ntotal_chars = 0\n\nfor word in words:\n    total_chars += len(word)\n\nprint(total_chars) # Output: 15", "line_number": null, "bug_type": null}
{"code": "class Song:\n    def __init__(self, title):\n        self.title = title\n\n    def play(self):\n        print(self.title)", "line_number": null, "bug_type": null}
{"code": "my_list = [1,2,3,4,5,6,7,8,9]\n\nfiltered_list = list(filter(lambda x: x % 3 == 0, my_list))\nprint(filtered_list)", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_password():\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation\n    return ''.join(random.choice(chars) for _ in range(8))\n\nprint(generate_password())", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\nlength = 20\n\npassword = ''\nfor c in range(length):\n password += random.choice(string.ascii_letters + string.digits + string.punctuation)\n\nprint(password)", "line_number": null, "bug_type": null}
{"code": "a1 = 6\na2 = 3\nb1 = a1 // a2\nb2 = a1 % a2", "line_number": null, "bug_type": null}
{"code": "class Car:\n    def __init__(self, color, year, make, model):\n        self.color = color\n        self.year = year\n        self.make = make\n        self.model = model", "line_number": null, "bug_type": null}
{"code": "def multiply_list(lst, num):\n    res = []\n    for item in lst:\n        res.append(item*num)\n    return res", "line_number": null, "bug_type": null}
{"code": "import os\n\ndef get_filename_from_path(path):\n    return os.path.basename(path)\n\nfilename = get_filename_from_path('/Users/john/Documents/Github/myproject/myfile.py')\nprint(filename)", "line_number": null, "bug_type": null}
{"code": "str1, str2 = 'Hello', 'World'\nstr1, str2 = str2, str1\n\nprint(\"After swapping: str1 =\", str1, \"and str2 =\", str2)", "line_number": null, "bug_type": null}
{"code": "import requests\n \nurl = \"http://example.com/data\"\ndata = {\"name\":\"John Doe\",\"age\":30}\n \nresponse = requests.post(url, data = data)", "line_number": null, "bug_type": null}
{"code": "x = 3\ny = 4\n\ntemp = x \nx = y \ny = temp \n\nprint(\"x =\", x) \nprint(\"y =\", y)", "line_number": null, "bug_type": null}
{"code": "def sum_even_nums(n):\n    sum = 0\n    for i in range(0, n+1):\n        if i%2 == 0:\n            sum += i\n    return sum", "line_number": null, "bug_type": null}
{"code": "wordFrequencies = {\n 'cat': 2,\n 'dog': 5,\n 'bird': 3\n}", "line_number": null, "bug_type": null}
{"code": "d = {\"name\": \"John\", \"age\": 35, \"city\": \"New York\"}\nvalue = d.get(\"age\")\nprint(value)", "line_number": null, "bug_type": null}
{"code": "import tkinter\nwindow = tkinter.Tk()\nwindow.title('My Application')\nwindow.geometry('200x200')\nlbl = tkinter.Label(window,text=\"Welcome to our application!\")\nlbl.pack()\nwindow.mainloop()", "line_number": null, "bug_type": null}
{"code": "def celsiusToFahrenheit(celsius): \n    return (celsius * 1.8) + 32", "line_number": null, "bug_type": null}
{"code": "try:\n    a = 1\n    b = 0\n    c = a / b\n    print(c)\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero\")", "line_number": null, "bug_type": null}
{"code": "def string_generator(strings):\n  for string in strings:\n    yield string\n\nfor string in string_generator(['cat', 'dog', 'bird']):\n  print(string)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef random_binary_array(n):\n    \"\"\"Return a random array of length n with binary values.\"\"\"\n    array = []\n    for i in range(n):\n        array.append(random.choice([0, 1]))\n    return array", "line_number": null, "bug_type": null}
{"code": "source = [0, 1, 2]\n \ndest = []\n \nfor item in source:\n    dest.append(item)\n    \nprint(dest)", "line_number": null, "bug_type": null}
{"code": "def sort_strings_by_length(strings):\n    # Sort strings by length in ascending order\n    strings.sort(key=len)\n    return strings", "line_number": null, "bug_type": null}
{"code": "[number for number in range(10) if number % 3 == 0 and number % 5 == 0]", "line_number": null, "bug_type": null}
{"code": "def desc_sort_dict(my_dict):\n  return {k: v for k, v in sorted(my_dict.items(), key=lambda item: item[1], reverse=True)}", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(input_string):\n  characters = set()\n  output_string = \"\"\n  for character in input_string:\n    if character not in characters:\n      output_string += character\n      characters.add(character)\n\n  return output_string", "line_number": null, "bug_type": null}
{"code": "import datetime\n \ndatetime_object = datetime.datetime.now()\nprint(datetime_object.strftime(\"%A, %B %d, %Y\"))", "line_number": null, "bug_type": null}
{"code": "def sort_words(words): \n    words.sort() \n    return words \n\nwords = [\"software\", \"engineering\", \"programming\"]\nprint(sort_words(words))", "line_number": null, "bug_type": null}
{"code": "# Evaluate the expression (5 - 22 ) +18  \nresult = (5 - 22) + 18  \n \nprint(\"The result is:\", result)", "line_number": null, "bug_type": null}
{"code": "def number_to_digits(number):\n  digits = []\n  while (number>0):\n    digits.append(number % 10)\n    number = number // 10\n  \n  digits.reverse()\n  return digits", "line_number": null, "bug_type": null}
{"code": "import json\n\ndef parse_json(input_string):\n    data = json.loads(input_string)\n    return data", "line_number": null, "bug_type": null}
{"code": "inp = \"name1=123&name2=456&name3=789\"\nkv = inp.split(\"&\")\nd = {}\nfor i in kv:\n    k,v = i.split(\"=\")\n    d[k] = v\n\nprint(d)", "line_number": null, "bug_type": null}
{"code": "def reverse_words(string):\n    words = string.split(\" \")\n    words.reverse()\n    output_string = \" \".join(words)\n    return output_string\n\nprint(reverse_words(\"Hello, World!\")) # Output: \"World! Hello,\"", "line_number": null, "bug_type": null}
{"code": "def f_to_c(F):\n    C = (F - 32) * 5/9\n    return C", "line_number": null, "bug_type": null}
{"code": "# Import the built-in \"requests\" package\nimport requests\n\n# Set the URL\nurl = \"https://example.com/index.html\"\n\n# Retrieve the data\ndata = requests.get(url)\n\n# Output the retrieved data\nprint(data.text)", "line_number": null, "bug_type": null}
{"code": "import json\n\ndata = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\n\ndata_dict = json.loads(data)\n\nfor key, value in data_dict.items():\n    print(f'{key}: {value}')", "line_number": null, "bug_type": null}
{"code": "fruits = {\n 'apple': 1,\n 'banana': 2,\n 'grape': 3,\n 'orange': 4,\n 'strawberry': 5\n }", "line_number": null, "bug_type": null}
{"code": "def sum_squares(nums):\n    result = 0\n    for num in nums:\n        result += num*num\n    \n    return result\n\nnums = [3, 4, 5]\n\nresult = sum_squares(nums)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def gcd(a, b): \n    while(b): \n        a, b = b, a % b \n  \n    return a \n\nresult = gcd(25, 15) \nprint(result)", "line_number": null, "bug_type": null}
{"code": "def product_of_sequence(sequence):\n    product = 1\n    for num in sequence:\n        product *= num\n    return product\n\nseq = [2,4,6]\nprint(product_of_sequence(seq))", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1)", "line_number": null, "bug_type": null}
{"code": "def count_positive_numbers(numbers):\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "def n_grams(string, n):\n  tokens = string.split()\n  n_grams = []\n  for i in range(len(tokens)-n+1):\n    n_grams.append(tokens[i:i+n])\n  return n_grams", "line_number": null, "bug_type": null}
{"code": "def sum_two_numbers(a, b):\n    result = 0\n\n    for i in range(b):\n        result += a\n\n    return result\n\na = 3\nb = 5\n\nprint(sum_two_numbers(a, b))", "line_number": null, "bug_type": null}
{"code": "import random\n\narray = [1,2,3,4,5]\n\nrandom.shuffle(array)", "line_number": null, "bug_type": null}
{"code": "def remove_item(lst, item):\n    try:\n        lst.remove(item)\n        return lst\n\n    except ValueError:\n        return lst", "line_number": null, "bug_type": null}
{"code": "def find_index(arr, item):\n    for i, value in enumerate(arr):\n        if item == value:\n            return i\n    return -1", "line_number": null, "bug_type": null}
{"code": "array = [1, 2, 3, 4, 5]\nprint(array)", "line_number": null, "bug_type": null}
{"code": "def store_elements(elements):\n    store = []\n    for i in elements:\n        store.append(i)\n    return store\n\nobjects = [1, 2, 3, 4, 5]\nstorage = store_elements(objects)\nprint(storage)", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(n):\n    n_str = str(n)\n    rev_str = n_str[::-1]\n    if n_str == rev_str:\n        return True\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "lst = [\"apple\", \"banana\", \"orange\", \"apricot\"]\n  \nfiltered_list = [ele for ele in lst if ele[0] == 'a'] \n  \n# printing filtered elements \nprint(\"filtered list: \", filtered_list)", "line_number": null, "bug_type": null}
{"code": "list = [2, 5, 6, 7]\n\nsum = 0\n\nfor num in list:\n sum += num\n \naverage = sum / len(list)\nprint(\"Average:\", average)", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_random_string(string_length):\n    random_string = ''.join(random.choices(string.digits, k=string_length))\n    return random_string\n\nprint(generate_random_string(20))", "line_number": null, "bug_type": null}
{"code": "def add_list(numbers):\n  total = 0\n  for number in numbers:\n      total += number\n  return total", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_random_numbers():\n    numbers = []\n    for _ in range(10):\n      numbers.append(random.randint(1,10)) \n    return numbers\n\nrandom_numbers = generate_random_numbers()\nprint(random_numbers)", "line_number": null, "bug_type": null}
{"code": "def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * (5 / 9)\n    return celsius", "line_number": null, "bug_type": null}
{"code": "def add_five(nums):\n    return [num + 5 for num in nums]\n\nresult = add_five([1, 2, 3, 4, 5])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def fun(N):\n result = (N*(N+1))/2\n result *= (2 * N + 1)\n result /= 3\n return int(result)", "line_number": null, "bug_type": null}
{"code": "import random\n\nmylist = [1, 2, 3, 4, 5]\nrandom.shuffle(mylist)\n\nprint(mylist)", "line_number": null, "bug_type": null}
{"code": "def merge_lists(list1, list2):\n    result = []\n    for item in list1:\n        result.append(item)\n    for item in list2:\n        result.append(item)\n    return result", "line_number": null, "bug_type": null}
{"code": "def find_sum(x):\n    sum = 0\n    for i in x:\n        sum += i\n    return sum", "line_number": null, "bug_type": null}
{"code": "def remove_element(list, element):\n    for i in range(len(list)):\n        if list[i] == element:\n            del list[i]\n            break\n    return list\n\nlist = remove_element(list,40)", "line_number": null, "bug_type": null}
{"code": "def flatten_list(lst):\n flattened = []\n for i in lst:\n  if type(i) == list:\n   flattened += flatten_list(i)\n  else:\n   flattened.append(i)\n return flattened", "line_number": null, "bug_type": null}
{"code": "value = 25.22\npercent = 5\n\nnew_value = value + (value * (percent/100))\n\nprint(\"The new value is: \", new_value) \n# Output: The new value is: 26.496", "line_number": null, "bug_type": null}
{"code": "name = \"John\"\n\nprint(\"Hello \" + name + \"!\")  # Outputs: \"Hello John!\"", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(word):\n    reversed_word = word[::-1]\n\n    if word == reversed_word:\n        return True\n    else:\n        return False\n        \nresult = is_palindrome('civic')\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def foo(x):\n    if x > 0:\n        return x\n    else:\n        return 0", "line_number": null, "bug_type": null}
{"code": "def word_count(s):\n\twords = s.split()\n\treturn len(words)\n\ns = \"Hello world\"\n\nprint(word_count(s)) # 2", "line_number": null, "bug_type": null}
{"code": "\"\"\"\nMake the given string lowercase using Python\n\"\"\"\n\ntest_string = \"This is a TEST string!\"\n\nlowercase_string = test_string.lower()\n\nprint(lowercase_string) # prints \"this is a test string!\"", "line_number": null, "bug_type": null}
{"code": "def distinct_items_in_list(input_list):\n    distinct_items = set(input_list)\n    return len(distinct_items)", "line_number": null, "bug_type": null}
{"code": "def findMax(arr):\n    max = arr[0] \n    for i in range(1,len(arr)): \n        if arr[i] > max: \n            max = arr[i] \n  \n    return max", "line_number": null, "bug_type": null}
{"code": "def list_sum(inpList):\n    sum = 0\n    for num in inpList:\n        sum += num\n    return sum\n\nprint(list_sum([1, 2, 3, 4, 5]))", "line_number": null, "bug_type": null}
{"code": "import random \n\n# Create 8 random numbers \nrand_nums = [random.randint(1, 100) for _ in range(8)]\nprint(rand_nums)", "line_number": null, "bug_type": null}
{"code": "def count_word(sentence, word):\n    words = sentence.split(' ')\n    return words.count(word)", "line_number": null, "bug_type": null}
{"code": "def dfs(graph, node, visited):\n    if node not in visited:\n        visited.append(node)\n        for n in graph[node]:\n            dfs(graph, n, visited)\n    return visited", "line_number": null, "bug_type": null}
{"code": "def sort_by_third_element(input_list):\n    sorted_list = sorted(input_list, key = lambda x: x[2])\n    return sorted_list", "line_number": null, "bug_type": null}
{"code": "[(i,j)  for i in range(2,5) for j in range(3)]", "line_number": null, "bug_type": null}
{"code": "arr = [2, 3, 4] \narr.append(6)\nprint(arr)", "line_number": null, "bug_type": null}
{"code": "def remove_last_two_digits(num):\n    num = str(num)\n    return [int(x) for x in num[:-2]]", "line_number": null, "bug_type": null}
{"code": "student_dict = {\n    'John': 18,\n    'Maria': 20,\n    'Alex': 24\n}", "line_number": null, "bug_type": null}
{"code": "def check_alphabet(string):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\" \n    if set(string.lower()) >= set(alphabet): \n        return True \n    else: \n        return False", "line_number": null, "bug_type": null}
{"code": "def dec_to_bin(num):\n    binary = \"\"\n    while num > 0:\n        remainder = num % 2\n        binary = str(remainder) + binary\n        num = num // 2\n    return binary", "line_number": null, "bug_type": null}
{"code": "def count_characters(string, char):\n    count = 0\n    for c in string:\n        if c == char:\n            count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "def foo():\n   i = 0\n   for x in range(10):\n      i = i + x\n   return i\n\nprint(foo())", "line_number": null, "bug_type": null}
{"code": "list_1 = []\nfor x in range(1, 10):\n    if x % 2 == 0:\n        list_1.append(x)", "line_number": null, "bug_type": null}
{"code": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "line_number": null, "bug_type": null}
{"code": "import re\ndef hasSpecialChar(str):\n    return bool(re.search(r'[^A-Za-z0-9]', str))", "line_number": null, "bug_type": null}
{"code": "def celsius_to_fahrenheit(celsius):\n    fahrenheit = celsius * 9/5 + 32\n    return fahrenheit\n\ncelsius = 100\nresult = celsius_to_fahrenheit(celsius)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "price = 45\n\nif price > 50:\n print(\"Expensive\")\nelse:\n print(\"Cheap\")", "line_number": null, "bug_type": null}
{"code": "def fibonacci(n):\n  if n <= 1:\n    return n\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)", "line_number": null, "bug_type": null}
{"code": "import string\n\nalphabet = string.ascii_uppercase\n\nfor letter in alphabet[::-1]:\n    print(letter)", "line_number": null, "bug_type": null}
{"code": "array = [2, 10, 5, 8, 1]  \narray.sort()\n\nprint(\"The largest two integers are:\")\nprint(array[-1], array[-2])", "line_number": null, "bug_type": null}
{"code": "def fahrenheit_to_celsius(temperature):\n    celsius = (temperature - 32) * 5/9\n    return celsius", "line_number": null, "bug_type": null}
{"code": "import random\n\n# Generate a random sequence of 0s and 1s\nn = 10\nrandom_sequence = \"\".join([str(random.randint(0, 1)) for x in range(n)])\nprint (random_sequence)", "line_number": null, "bug_type": null}
{"code": "def my_function(N):\n    list1 = [[i+j for j in range(N)] for i in range(N)]\n    return list1", "line_number": null, "bug_type": null}
{"code": "def find_index(item, array):\n    for i in range(len(array)):\n        if array[i] == item:\n            return i", "line_number": null, "bug_type": null}
{"code": "def count_words(string):\n    words = string.split(' ')\n    return len(words)\n\nsentence = \"Do not stand at my grave and weep\"\ncount = count_words(sentence)\nprint(\"The given string has {} words.\".format(count))", "line_number": null, "bug_type": null}
{"code": "def is_substring(A, B): \n    if B in A: \n        return True \n    else: \n        return False", "line_number": null, "bug_type": null}
{"code": "import sys \n\ntotal = 0\nfor num in sys.argv[1:]:\n total += int(num)\n\nprint('The sum of all numbers entered is:', total)", "line_number": null, "bug_type": null}
{"code": "def solve_problem(input):\n    solution = 0\n    for i in range(input):\n        if input < 0:\n            break\n        solution += input\n        input -= 1\n    return solution", "line_number": null, "bug_type": null}
{"code": "def find_common_elements(list1, list2):\n return list(set(list1).intersection(set(list2)))\n\nresult = find_common_elements([1, 2, 3], [3, 4, 5])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "# Python program to get ASCII value of a character\n\nc = input('Enter a character: ')\n\n# ord() function to get the ASCII value \nprint('The ASCII value of ' + c + ' is', ord(c))", "line_number": null, "bug_type": null}
{"code": "A = {1, 2, 3, 4, 5}\nB = {2, 4}\n\nA -= B", "line_number": null, "bug_type": null}
{"code": "def find_max_value(num1, num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2", "line_number": null, "bug_type": null}
{"code": "def sum_of_squares(n):\n    # Use summation formula to optimize the code\n    return (n * (n + 1) * (2 * n + 1)) // 6", "line_number": null, "bug_type": null}
{"code": "def sort_list(list_of_emails):\n    list_of_emails.sort()\n    return list_of_emails\n\nprint(sort_list(['bob@example.com', 'alice@example.com', 'jane@google.com', 'mary@example.com']))", "line_number": null, "bug_type": null}
{"code": "from bs4 import BeautifulSoup\n\nhtml = '<h2>Hello World!</h2>'\nsoup = BeautifulSoup(html, 'html.parser')\ntext = soup.find('h2').text\n\nprint(text) # Hello World!", "line_number": null, "bug_type": null}
{"code": "class MyClass:\n    \n    def __init__(self, *args):\n        self.args = args\n        \n    def __str__(self):\n        return 'MyClass({})'.format(', '.join(str(arg) for arg in self.args))", "line_number": null, "bug_type": null}
{"code": "string = \"Python is a great language\"\narr = string.split(' ', 3) \nprint(arr)", "line_number": null, "bug_type": null}
{"code": "my_list = [\"banana\", \"apple\", \"watermelon\"]\nmy_list.sort(key=len)\n\n# my_list is now [\"apple\", \"banana\", \"watermelon\"]", "line_number": null, "bug_type": null}
{"code": "def union_sets(set_one, set_two):\n    union_set = set_one | set_two\n    return union_set", "line_number": null, "bug_type": null}
{"code": "def remove_whitespace(s):\n    return s.replace(\" \", \"\")\n\nprint(remove_whitespace(\"This is a string with whitespaces\"))", "line_number": null, "bug_type": null}
{"code": "def is_leap(year):\n    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n        return True\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "my_str = \"Hello World\"\n\nfor i in range(len(my_str)-1, -1, -1):\n    print(my_str[i], end=\"\")", "line_number": null, "bug_type": null}
{"code": "for i in range(5):\n    for j in range(i):\n        print(\"*\", end=\"\")\n    print(\"\")", "line_number": null, "bug_type": null}
{"code": "class Person:\n    def __init__(self, name):\n        self.name = name\n\n    def __str__(self):\n        return self.name\n\np = Person('John Doe')\nprint(p)", "line_number": null, "bug_type": null}
{"code": "def extract_unique_words(sentence):\n    words_list = sentence.split()\n    unique_words_list = set(words_list)\n    return unique_words_list", "line_number": null, "bug_type": null}
{"code": "str1 = \"Hello \"\nstr2 = \"World\"\nresult = str1 + str2\nprint(\"Concatenated string: \", result)", "line_number": null, "bug_type": null}
{"code": "def convert_to_ymd(days):\n  years = days // 365\n  months = (days % 365) // 30\n  days = (days % 365) % 30\n  return years, months, days", "line_number": null, "bug_type": null}
{"code": "def calculate_mean(nums):\n    mean = 0\n    for num in nums:\n        mean += num\n    mean /= len(nums)\n    return mean", "line_number": null, "bug_type": null}
{"code": "my_dict = {\"a\":1, \"b\":2, \"c\":3, \"d\":4}\n\nfor key, value in my_dict.items():\n    print(value)", "line_number": null, "bug_type": null}
{"code": "def limit_string(s):\n    if len(s) >= 6:\n        return s[:6]\n    else:\n        return s\n\nresult = limit_string(\"Hello World\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n        \n    def area(self):\n        return self.length * self.width", "line_number": null, "bug_type": null}
{"code": "num1 = 5\nnum2 = 10\ntotal = num1 + num2\n\nprint(total)", "line_number": null, "bug_type": null}
{"code": "def add_numbers(a, b):\n    \"\"\"Returns the sum of two numbers\"\"\"\n    return a + b\n\nif __name__ == '__main__':\n    print(add_numbers(2, 3))", "line_number": null, "bug_type": null}
{"code": "import datetime\n\ndef date_string_to_datetime(date_str):\n  return datetime.datetime.strptime(date_str, \"%Y-%m-%d\").date()", "line_number": null, "bug_type": null}
{"code": "def divisible(x, y):\n    if x % y == 0:\n        return True\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "def celsius_to_fahrenheit(celsius):\n    \"\"\"Converts a temperature in Celsius to Fahrenheit\"\"\"\n    return celsius * 9/5 + 32", "line_number": null, "bug_type": null}
{"code": "def sumTwo(a, b):\n  return a + b\n\nprint(sumTwo(2, 3))", "line_number": null, "bug_type": null}
{"code": "import json\n\njson_string = '{\"name\": \"James\",\"age\": 27}'\ndata = json.loads(json_string)\nprint(data[\"name\"], data[\"age\"])", "line_number": null, "bug_type": null}
{"code": "def detect_item(items, item):\n  if item in items:\n    return True\n  else:\n    return False", "line_number": null, "bug_type": null}
{"code": "def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5/9\n    return celsius", "line_number": null, "bug_type": null}
{"code": "def digit_sum(n):\n    if n == 0:\n        return 0\n\n    return (n % 10) + digit_sum(n // 10)\n\nn = 123\nprint(digit_sum(n))", "line_number": null, "bug_type": null}
{"code": "def count_characters(string):\n    chars = {}\n    for char in string:\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    return chars", "line_number": null, "bug_type": null}
{"code": "def rotate_array(array, n):\n    '''\n    This function takes in an array and an integer n and rotates the elements of the array by n positions.\n    '''\n    return array[n:] + array[:n]", "line_number": null, "bug_type": null}
{"code": "my_list = [(x, y) for x in range(5) for y in range(5)]\nprint(my_list)", "line_number": null, "bug_type": null}
{"code": "def reverse_string(string):\n    reversed_string = \"\"\n    for c in string:\n        reversed_string = c + reversed_string\n    return reversed_string\n\nstring = \"Hello\"\nprint(reverse_string(string))", "line_number": null, "bug_type": null}
{"code": "def sum_list(list):\n if not list:\n  return 0\n\n return list[0] + sum_list(list[1:])", "line_number": null, "bug_type": null}
{"code": "def even_number_list(a, b):\n    return list(i for i in range(a, b+1) if i%2 == 0)", "line_number": null, "bug_type": null}
{"code": "# Take input from the user\nstring = input(\"Enter string : \")\n\n# Reverse the string \nrev_str = string[::-1]\n\n# Print the reversed string\nprint(\"Reverse string :\", rev_str)", "line_number": null, "bug_type": null}
{"code": "import sys\n\narg1 = sys.argv[1]\narg2 = sys.argv[2]\n\nif arg1 == arg2:\n print('equal')\nelse:\n print('not equal')", "line_number": null, "bug_type": null}
{"code": "divisible_by_four = [i for i in range(1,11) if i%4 == 0]", "line_number": null, "bug_type": null}
{"code": "from functools import reduce\n\n# initialize the loop\nnum = 5\n\n# call reduce()\nsolution = reduce(lambda i, _: i - 1, range(num + 1))\n\n# print the result\nprint(solution)", "line_number": null, "bug_type": null}
{"code": "def find_missing_number(arr):\n    n = len(arr)\n    total = (n+1)*(arr[0] + arr[n-1]) / 2\n    sum_arr = sum(arr)\n    return total - sum_arr", "line_number": null, "bug_type": null}
{"code": "words = [\"red\", \"apple\"]\n\nsentence = words[0] + \" \" + words[1]\nprint(sentence)", "line_number": null, "bug_type": null}
{"code": "def circumference_of_circle(diameter):\n    circumference = 3.14 * diameter\n    return circumference", "line_number": null, "bug_type": null}
{"code": "def make_dict_from_list(list_key): \n    dictionary = {}\n    for element in list_key:\n        dictionary[element] = []\n    return dictionary", "line_number": null, "bug_type": null}
{"code": "import requests\n\ndef fetch_data_from_web_service(url):\n    response = requests.get(url)\n    return response.json()", "line_number": null, "bug_type": null}
{"code": "# Create an empty string \nseq = \"\"\n\n# Loop through the alphabet \nfor i in range(65, 75):\n    # Convert the ASCII code to a character \n    seq += chr(i)\n# Print the output \nprint(seq)", "line_number": null, "bug_type": null}
{"code": "def memoize(f, k):\n    memo = dict()\n \n    def helper(x):\n        if x not in memo:            \n            memo[x] = f(x)\n        return memo[x]\n \n    return helper(k)", "line_number": null, "bug_type": null}
{"code": "def format_date(date):\n    splitted_date = date.split(\"-\")\n    reformatted_date = splitted_date[::-1]\n    return \"-\".join(reformatted_date)\n\nformat_date(\"10-05-2020\")", "line_number": null, "bug_type": null}
{"code": "arr = [1,5,8,-3]\n\n# Compute the sum\ntotal = 0\nfor num in arr:\n    total += num\n\n# Print the sum\nprint(total)", "line_number": null, "bug_type": null}
{"code": "import base64\n\nencoded_string = 'aGVsbG8='\ndecoded_string = base64.b64decode(encoded_string)\nprint(decoded_string) # prints b'hello'", "line_number": null, "bug_type": null}
{"code": "import praw\n\nreddit = praw.Reddit('bot1')\n\nlatest_posts = [] \nfor submission in reddit.subreddit('all').new(limit=10):\n latest_posts.append(submission.title)\n \nprint(latest_posts)", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(text):\n    reverse = text[::-1] # reverse the string\n    return text == reverse", "line_number": null, "bug_type": null}
{"code": "def is_list_unique(list):\n    unique_list = list(dict.fromkeys(list))\n    return len(list) == len(unique_list)", "line_number": null, "bug_type": null}
{"code": "def check_type(variable, class_name):\n    if isinstance(variable, class_name):\n        print(\"It is an instance of the class\")\n    else:\n        print(\"It is not an instance of the class\")", "line_number": null, "bug_type": null}
{"code": "def find_sequence(list_a, pattern):\n    result = []\n    for i in range(len(list_a)-len(pattern)+1):\n        if list_a[i:i+len(pattern)] == pattern:\n            result.append(i)\n    return result", "line_number": null, "bug_type": null}
{"code": "def classify_num(num):\n    if (num % 2 == 0):\n        return \"Even\"\n    else:\n        return \"Odd\"", "line_number": null, "bug_type": null}
{"code": "def kth_smallest(input_array, k):\n    input_array.sort()\n    return input_array[k-1]", "line_number": null, "bug_type": null}
{"code": "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y", "line_number": null, "bug_type": null}
{"code": "import random\n\nnums = random.sample(range(100), 10)\ntotal = 0\n\nfor num in nums:\n    total += num\n\nprint(total)", "line_number": null, "bug_type": null}
{"code": "def list_to_string(int_list):\n  return ' '.join(str(x) for x in int_list)\n\nint_list = [56, 23, 7]\nprint(list_to_string(int_list))", "line_number": null, "bug_type": null}
{"code": "import re\n\ntext = \"hey this is a string to match for a pattern\"\npattern = \"match\"\n\n# Find all matches\nmatches = re.findall(pattern, text)\n\n# Print the matches\nprint(matches)\n# Output: ['match']", "line_number": null, "bug_type": null}
{"code": "def count_number_divisors(x): \n    count = 0\n    for i in range(1, x+1): \n        if x % i == 0: \n            count = count + 1\n    return count", "line_number": null, "bug_type": null}
{"code": "def reverseStrings(data):\n return [string[::-1] for string in data]\n\n reversedStrings = reverseStrings(data)\n print(reversedStrings) # [\"olleH\", \"dlroW\", \"ooF\", \"raB\"]", "line_number": null, "bug_type": null}
{"code": "def repeat(n, w):\n    for i in range(n):\n        print(w)\n\nrepeat(3, \"Hello\")  # Output: Hello Hello Hello", "line_number": null, "bug_type": null}
{"code": "from collections import Counter\n\ndef most_frequent_words(passage):\n    word_list = passage.split() \n    word_freq = Counter(word_list) \n  \n    most_freq_word = word_freq.most_common(1) \n    return most_freq_word", "line_number": null, "bug_type": null}
{"code": "def has_special_characters(string):\n    import re\n    return bool(re.search('[^a-zA-Z0-9]', string))", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n    \n    return n * factorial(n-1)", "line_number": null, "bug_type": null}
{"code": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width", "line_number": null, "bug_type": null}
{"code": "def ascii_repr_str(str):\n    ans = ''\n    for ch in str:\n        ans += str(ord(ch))\n    return ans\n\nprint(ascii_repr_str(\"Python\")) # result: 080 121 116 104 111 110", "line_number": null, "bug_type": null}
{"code": "def sum_sqr(a, b):\n    return a*a + b*b\n\nprint(sum_sqr(2, 3))", "line_number": null, "bug_type": null}
{"code": "total = 0\nfor x in range(2, 21, 2):\n    total += x\n    \nprint(total)", "line_number": null, "bug_type": null}
{"code": "def limit_chars(string):\n    # Limit the number of character to 6\n    limited_string = string[:6]\n    return limited_string\n\nstring = \"Hello World\"\nresult = limit_chars(string)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def string_to_list(string, delimiter):\n list = string.split(delimiter)\n return list\n\nstring = \"red, blue, green\"\ndelimiter = \",\"\nprint(string_to_list(string, delimiter))", "line_number": null, "bug_type": null}
{"code": "def fast_operation(n):\n    result = (n * (n + 1)) // 2\n    return result", "line_number": null, "bug_type": null}
{"code": "def nameLength(name): \n    return len(name) \n\nname = \"Jane\"\nprint(\"Length of the name is:\", nameLength(name))", "line_number": null, "bug_type": null}
{"code": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age", "line_number": null, "bug_type": null}
{"code": "user_input = input(\"Enter a number:\")\nif user_input.isdigit():\n   print(\"You have entered an integer.\")", "line_number": null, "bug_type": null}
{"code": "import requests\n\nurl = \"https://example.com\" \nr = requests.get(url)\ndata = r.content\n\nwith open(\"example_website.html\", \"wb\") as file:\n    file.write(data)\n\nprint(\"File downloaded successfully.\")", "line_number": null, "bug_type": null}
{"code": "def prerequisitesCourses(courses):\n    requiredCourses = []\n    for course in courses:\n        if course[1] != \"none\":\n            requiredCourses.append(course[1])\n    return requiredCourses", "line_number": null, "bug_type": null}
{"code": "input_string = \"ABC 123 XYZ 456\"\noutput_string = \"\"\n\nfor char in input_string:\n    if char.isalpha():\n        output_string += char.lower()\n    else:\n        output_string += char\n\nprint(output_string)", "line_number": null, "bug_type": null}
{"code": "def get_values(dictionary):\n    return [value for key, value in dictionary.items() if value > 0]", "line_number": null, "bug_type": null}
{"code": "odd_numbers = [x for x in range(0, 11) if x % 2 != 0]", "line_number": null, "bug_type": null}
{"code": "import re\n\ndef isUrl(string): \n    urlPattern = re.compile(r'https?://(www\\.)?(\\w+)(\\.\\w+)') \n    match = urlPattern.search(string) \n    return bool(match)", "line_number": null, "bug_type": null}
{"code": "def str_to_int(string):\n    return int(string)\n  \ndef int_to_str(integer):\n    return str(integer)", "line_number": null, "bug_type": null}
{"code": "x = 1\nprint(\"x is\", (\"0\" if x == 0 else \"1\" if x == 1 else \"not 0 or 1\"))", "line_number": null, "bug_type": null}
{"code": "def count_characters(s, c):\n count = 0\n for ch in s:\n  if ch == c:\n   count += 1\n return count", "line_number": null, "bug_type": null}
{"code": "text = \"Today it is a beautiful day.\"\nwords = text.split()\nprint(\"Number of words in the given text:\", len(words))", "line_number": null, "bug_type": null}
{"code": "def verify_input(user_input):\n    # Define the accepted characters\n    allowed_chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0987654321_\"\n    for char in user_input:\n        if char not in allowed_chars:\n            return False\n    return True", "line_number": null, "bug_type": null}
{"code": "import json\n\ndef json_string_to_dict(json_string):\n    '''Converts a JSON string to a Python dictionary.'''\n    return json.loads(json_string)", "line_number": null, "bug_type": null}
{"code": "def findElement(arr, element):\n    for i in range(0, len(arr)):\n        if arr[i] == element:\n            return True\n    return False", "line_number": null, "bug_type": null}
{"code": "def table(n): \n    for i in range(1, 11): # for 1 to 10\n        print(n,'x',i,'=',n*i) \n  \n# Driver Code \nn = 5\ntable(n)", "line_number": null, "bug_type": null}
{"code": "def encode_string(s):\n    # Function to encode a string\n    encoded_string = ''\n    for c in s:\n        encoded_string += hex(ord(c)).upper()[2:]\n    return encoded_string", "line_number": null, "bug_type": null}
{"code": "# Read two integer values\na = int(input())\nb = int(input())\n\n# Swap their values\ntemp = a\na = b\nb = temp\n\n# Print the variables\nprint(\"a =\", a)\nprint(\"b =\", b)", "line_number": null, "bug_type": null}
{"code": "def mySum(list):\n    total = 0\n    for num in list:\n        total += num\n    return total", "line_number": null, "bug_type": null}
{"code": "words = ['The', 'quick', 'brown', 'fox']\n\nsentence = \" \".join(words)\nprint(sentence)\n# Output: The quick brown fox", "line_number": null, "bug_type": null}
{"code": "class GroceryItem:\n    def __init__(self, name, price, quantity):\n        self.name = name\n        self.price = price\n        self.quantity = quantity", "line_number": null, "bug_type": null}
{"code": "list = [('dog', 6), ('cat', 4), ('rabbit', 2)]\n\nlist.sort(key=lambda x: x[1])\n\nprint(list)", "line_number": null, "bug_type": null}
{"code": "import random \n  \ndef shuffle_list(list_nums):\n    random.shuffle(list_nums)\n    print(\"Shuffled list :\",  list_nums)\n\nlist_nums = [1, 2, 3, 4, 5]\nshuffle_list(list_nums)", "line_number": null, "bug_type": null}
{"code": "unsorted_list = [44, 23, 11, 33, 5]\nsorted_list = sorted(unsorted_list, reverse=True)\n\nprint(sorted_list)", "line_number": null, "bug_type": null}
{"code": "import requests\n\n# Get the webpage\nurl = 'https://example.com'\nr = requests.get(url)\n\n# Save the webpage to a file \nwith open('webpage.html', 'wb') as f:\n f.write(r.content)", "line_number": null, "bug_type": null}
{"code": "def sum_list(nums):\n return sum(nums)\n\nnums = [1, 2, 3, 4, 5]", "line_number": null, "bug_type": null}
{"code": "x = 0\n\nfor i in range(1,11):\n    x += i**3\n\nprint(x)", "line_number": null, "bug_type": null}
{"code": "class Circle:\n\n    def __init__(self, radius):\n        self.radius = radius\n\n    def calculateArea(self):\n        return 3.14159 * self.radius * self.radius", "line_number": null, "bug_type": null}
{"code": "def remove_vowels(text):\n    no_vowels = \"\"\n    for character in text:\n        if character not in \"aeiouAEIOU\":\n            no_vowels += character\n    return no_vowels", "line_number": null, "bug_type": null}
{"code": "countries_cities = {\n    \"UK\": \"London\", \n    \"France\": \"Paris\", \n    \"Spain\": \"Madrid\", \n    \"Germany\": \"Berlin\", \n    \"Italy\": \"Rome\"\n    }", "line_number": null, "bug_type": null}
{"code": "class Stack:\n  def __init__(self):\n    self.items = []\n    \n  def push(self, item):\n    self.items.append(item)\n    \n  def pop(self):\n    return self.items.pop()", "line_number": null, "bug_type": null}
{"code": "def clear_whitespace(s):\n        s = s.strip() # Remove leading and trailing whitespaces\n        s = \"\".join(s.split()) # Remove middle whitespaces\n        return s\n\nprint(clear_whitespace(\" Hello World    \"))", "line_number": null, "bug_type": null}
{"code": "words = [\"Hello\",\"World\",\"Beautiful\",\"Day\"]\n\nlengths = [len(word) for word in words]\navg_length = sum(lengths) / len(lengths)\n\nprint(\"Average word length is {:.2f}\".format(avg_length))", "line_number": null, "bug_type": null}
{"code": "def sum(alist):\n    total = 0\n    for i in alist:\n        total += i\n    return total", "line_number": null, "bug_type": null}
{"code": "import random\n\nlist = [\"apple\", \"banana\", \"orange\", \"strawberry\", \"grape\"]\nrandom.shuffle(list)\n\nfor item in list[:3]:\n print(item)", "line_number": null, "bug_type": null}
{"code": "def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5 / 9\n    return celsius", "line_number": null, "bug_type": null}
{"code": "dictionary = {'key1':1, 'key2': 3, 'key3': 2}\nsorted_dict = {key: value for key, value in sorted(dictionary.items(), key=lambda item: item[1])}", "line_number": null, "bug_type": null}
{"code": "def sum_nums(a, b):\n    \"\"\"Returns the sum of two numbers a and b.\"\"\"\n    return a + b", "line_number": null, "bug_type": null}
{"code": "def absolute_value(num):\n    if num < 0:\n        return -num\n    else:\n        return num", "line_number": null, "bug_type": null}
{"code": "class Singleton:\n    _instance = None\n\n    def __new__(cls):\n        if not cls._instance:\n            cls._instance = super(Singleton, cls).__new__(cls)\n        return cls._instance", "line_number": null, "bug_type": null}
{"code": "import datetime\n\ndef day_of_week(year): \n date = datetime.datetime(year, 1, 1)\n return date.strftime(\"%A\")\n\nprint(day_of_week(2018)) # Output: Monday", "line_number": null, "bug_type": null}
{"code": "import http.server\n\nserver_address = ('', 8000) \nhttpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)\nhttpd.serve_forever()", "line_number": null, "bug_type": null}
{"code": "def sorted_descending(list_of_ints):\n  result = sorted(list_of_ints, reverse=True)\n  return result", "line_number": null, "bug_type": null}
{"code": "def reverse_string(s):\n    return s[::-1]\n\nprint(reverse_string(\"This is an example\"))", "line_number": null, "bug_type": null}
{"code": "def startWithA(list): \n\tnew_list = [] \n\tfor el in list: \n\t\tif el[0] == 'A': \n\t\t\tnew_list.append(el) \n\treturn new_list", "line_number": null, "bug_type": null}
{"code": "def calculate_average(numbers):\n    total = sum(numbers)\n    length = len(numbers)\n    return total / length\n\nnumbers = [1, 2, 3, 4, 5]\naverage = calculate_average(numbers)\nprint(average)", "line_number": null, "bug_type": null}
{"code": "def count_words(string):\n  words = string.split()\n  return len(words)\n\nstring = \"Python is a powerful programming language\"\nprint(count_words(string))", "line_number": null, "bug_type": null}
{"code": "def find_max(arr):\n  max_val = max(arr)\n  for i in range(len(arr)):\n    if arr[i] == max_val:\n      return i", "line_number": null, "bug_type": null}
{"code": "import random\nlst = random.sample(range(10, 21), 10)\nprint(lst)", "line_number": null, "bug_type": null}
{"code": "def convertDateFormat(inputDate):\n    dateList = inputDate.split('-')\n    newFormat = dateList[1] + \"-\" + dateList[0] + \"-\" + dateList[2]\n    return newFormat", "line_number": null, "bug_type": null}
{"code": "a, b = 0, 1\nfor i in range(10):\n    print(a)\n    a, b = b, a + b", "line_number": null, "bug_type": null}
{"code": "def sort_tuples_by_second(tuples):\n tuple_order = sorted(tuples, key=lambda x: x[1])\n return tuple_order", "line_number": null, "bug_type": null}
{"code": "lastTwoElements = [1, 2, 3, 4, 5][-2:]\n\nprint(lastTwoElements)\n#Output: [4, 5]", "line_number": null, "bug_type": null}
{"code": "def series_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n\nprint(series_sum(5))", "line_number": null, "bug_type": null}
{"code": "def hex_to_binary(h): \n    return bin(int(h, 16)) \n  \nprint(hex_to_binary('0x56'))", "line_number": null, "bug_type": null}
{"code": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nperson = Person('John', 34)", "line_number": null, "bug_type": null}
{"code": "def compound_interest(principal, rate, time):\n    return principal * (1 + rate/100)**time", "line_number": null, "bug_type": null}
{"code": "def factorial(n): \n    if n == 0 or n == 1: \n        return 1\n    else: \n       return n * factorial(n - 1)\n\nresult = factorial(7)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "import sys\n\nname = sys.argv[1]\nprint(\"Hello {}\".format(name)) # Output: Hello John", "line_number": null, "bug_type": null}
{"code": "def find_shortest_word(words):\n    shortest_length = float('inf')\n    for word in words:\n        if len(word) < shortest_length:\n            shortest_word = word\n            shortest_length = len(word)\n\n    return shortest_word", "line_number": null, "bug_type": null}
{"code": "def fibonacci(n):\n if n == 0:\n  return 0\n elif n == 1:\n  return 1\n else:\n  return fibonacci(n-1) + fibonacci(n-2)", "line_number": null, "bug_type": null}
{"code": "def reverseString(s): \n    return s[::-1] \n  \nstring = \"hello world\"\n\nprint(\"Original String:\", string) \nprint(\"Reversed String:\", reverseString(string))", "line_number": null, "bug_type": null}
{"code": "def add(x, y):\n    return x + y\n\nsum = add(10, 20)\nprint(sum)", "line_number": null, "bug_type": null}
{"code": "def long_function(lst):\n    counter = 0\n    for i in lst:\n        counter += i\n    return counter", "line_number": null, "bug_type": null}
{"code": "total_row_sum = [sum(row) for row in [[1, 2, 3], [4, 5, 6], [7, 8, 9]]]\n\nprint(total_row_sum)", "line_number": null, "bug_type": null}
{"code": "def reverse_string(string):\n  reversed_string = \"\"\n  \n  for char in string:\n    reversed_string = char + reversed_string\n  \n  return reversed_string", "line_number": null, "bug_type": null}
{"code": "class SumArray:\n    def __init__(self, numbers):\n        self.numbers = numbers\n    \n    def get_sum(self):\n        sum = 0 \n        for number in self.numbers:\n            sum += number\n        return sum", "line_number": null, "bug_type": null}
{"code": "# Lambda expression to return the square of the given number \nsquare = lambda x: x * x \n  \n# calling the lambda expression  \nresult = square(5) \n  \n#Printing the result \nprint(result) \n\n# Output: 25", "line_number": null, "bug_type": null}
{"code": "def days_to_seconds(days):\n    return days * 86400\n\nresult = days_to_seconds(3)\nprint(result) # Outputs: 259200", "line_number": null, "bug_type": null}
{"code": "class Display():\n  def __init__(self, message):\n    self.message = message\n    \n  def display_message(self):\n    print(self.message)\n    \nmessage = input('Enter a message: ')\ndisplay_obj = Display(message)\ndisplay_obj.display_message()", "line_number": null, "bug_type": null}
{"code": "def sumOdd(lst):\n    sum = 0\n    for ele in lst:\n        if ele%2 == 1:\n            sum+=ele\n    return sum", "line_number": null, "bug_type": null}
{"code": "def find_max(nums):\n    max_val = nums[0]\n    for num in nums[1:]:\n        if num > max_val:\n            max_val = num\n    return max_val", "line_number": null, "bug_type": null}
{"code": "def even_number_generator():\n    num = 0\n    while True:\n        if num % 2 == 0:\n            yield num\n        num += 1", "line_number": null, "bug_type": null}
{"code": "def sort_dict_by_key(dict_list, key):\n    return sorted(dict_list, key=lambda k: k[key])", "line_number": null, "bug_type": null}
{"code": "import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_webpage(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    return soup", "line_number": null, "bug_type": null}
{"code": "def add_multiple_items(data, key, items):\n  data[key] = items\n  \n  return data", "line_number": null, "bug_type": null}
{"code": "def first_index(str, keyword):\n    for i in range(len(str)):\n        if str[i] == keyword:\n            return i\n    return -1", "line_number": null, "bug_type": null}
{"code": "def reverse_array(arr):\n    for i in range(len(arr)//2):\n        arr[i], arr[len(arr)-i-1] = arr[len(arr)-i-1], arr[i]", "line_number": null, "bug_type": null}
{"code": "class User:\n    def __init__(self, username, password, email):\n        self.username = username\n        self.password = password\n        self.email = email", "line_number": null, "bug_type": null}
{"code": "def sort_list_of_dicts(list_of_dicts, key):\n    sorted_list = sorted(list_of_dicts, key=lambda i: i[key])\n    return sorted_list", "line_number": null, "bug_type": null}
{"code": "input_list = [1, 2, 3, 4]\noutput_dict = {}\n\nfor item in input_list:\n  output_dict[item] = None\n\nprint(output_dict)", "line_number": null, "bug_type": null}
{"code": "def find_duplicates(data):\n    seen = set()\n    duplicates = []\n    \n    for item in data:\n        if item not in seen:\n            seen.add(item)\n        else:\n            duplicates.append(item)\n    return duplicates", "line_number": null, "bug_type": null}
{"code": "def getKthLargest(arr, k): \n    arr.sort() \n  \n    # Return the k'th largest element\n    return arr[len(arr)-k]", "line_number": null, "bug_type": null}
{"code": "class Dog:\n    def __init__(self, name):\n        self.name = name\n\n    def get_name(self):\n        return self.name", "line_number": null, "bug_type": null}
{"code": "student_grades = {\n    \"Bob\": \"A\",\n    \"Carol\": \"B\",\n    \"Ted\": \"C\",\n    \"Alice\": \"A\"\n}", "line_number": null, "bug_type": null}
{"code": "def check_substring(String, SubString):\n    if SubString in String : \n        return True\n    else: \n        return False", "line_number": null, "bug_type": null}
{"code": "import requests\n\nurl = 'http://example.com'\nresp = requests.get(url)\ndata = resp.json()\nprint(data)", "line_number": null, "bug_type": null}
{"code": "list = [5, 2, 8, 1]\nlist.sort() \nprint(list)", "line_number": null, "bug_type": null}
{"code": "import json\n\ndef handler(event, context):\n x = event[\"x\"]\n y = event[\"y\"]\n res = x + y\n return {\n \"statusCode\": 200,\n \"body\": json.dumps({\"result\": res})\n }", "line_number": null, "bug_type": null}
{"code": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com'\n\nresp = requests.get(url)\nsoup = BeautifulSoup(resp.text, 'html.parser')\ntitle = soup.find('title').get_text()\n\nprint(title)", "line_number": null, "bug_type": null}
{"code": "def list_sum(list):\n    sum = 0\n    for num in list:\n        sum += num\n    return sum", "line_number": null, "bug_type": null}
{"code": "def sort_list_of_tuples(input_list):\n    sorted_list = sorted(input_list, key=lambda tup: tup[1])\n    return sorted_list", "line_number": null, "bug_type": null}
{"code": "def find_max(arr):\n    '''This function returns the maximum element in the given array.'''\n    maxval = arr[0]\n    for num in arr:\n        if num > maxval:\n            maxval = num\n    return maxval", "line_number": null, "bug_type": null}
{"code": "num1 = 12\nnum2 = 44\n\nif (num1 > num2):\n    print(num1)\nelif (num2 > num1):\n    print(num2)\nelse:\n    print(\"Both numbers are equal\")", "line_number": null, "bug_type": null}
{"code": "n = 5\n\n# printing the multiplication table\nfor i in range(1, 11): \n    print(n, 'x', i, '=', n * i)", "line_number": null, "bug_type": null}
{"code": "sentence = 'This is an example sentence'\nwords = [word for word in sentence.split() if len(word) > 3]\nprint (words)\n# Output: ['This', 'example', 'sentence']", "line_number": null, "bug_type": null}
{"code": "def drawTriangle(n):\n    for i in range(n):\n        for j in range(i+1):\n            print(\"*\", end=\"\")\n        print(\"\\r\")\n\ndrawTriangle(5)", "line_number": null, "bug_type": null}
{"code": "def optimizeCode():\n  n = 10\n  arr = [i * i for i in range(n)]\n  print(arr)\n\noptimizeCode()", "line_number": null, "bug_type": null}
{"code": "animal_list = [\"dog\", \"cat\", \"mouse\", \"snake\"] \n\nfor animal in animal_list:\n    print(animal)", "line_number": null, "bug_type": null}
{"code": "my_list = [1, 5, 7, 2, 8]\nmy_list.sort()\nprint(my_list)", "line_number": null, "bug_type": null}
{"code": "def calculateSumSquare(lst):\n    sum = 0\n    for element in lst:\n        sum += element**2\n    return sum\n\nlst = [3, 5, 7]\nprint(calculateSumSquare(lst))", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result", "line_number": null, "bug_type": null}
{"code": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef rand_list(n):\n\trand_num_list = []\n\tfor _ in range(n):\n\t\trand_num_list.append(random.randint(1,100))\n\treturn rand_num_list", "line_number": null, "bug_type": null}
{"code": "def isPerfectSquare(n):\n    root =  n ** 0.5\n    return root == int(root)\n\nresult = isPerfectSquare(36)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "objectMap = {\n\"a\": \"apple\",\n\"b\": \"banana\",\n\"c\": \"carrot\",\n\"d\": \"date\",\n\"e\": \"eggplant\"\n}", "line_number": null, "bug_type": null}
{"code": "def factor_of_three(n):\n  return len([i for i in range(1, n+1) if i % 3 == 0])\n  \nfactor_of_three(50)", "line_number": null, "bug_type": null}
{"code": "def add_numbers(a, b):\n    '''This function will return the sum of two numbers'''\n    return a + b", "line_number": null, "bug_type": null}
{"code": "num1 = 14\nnum2 = 25\nnum3 = 6\n\nlargest = max(num1, num2, num3)\n\nprint(\"The largest number is\", largest)", "line_number": null, "bug_type": null}
{"code": "import random\n\nlist = [\"Apple\", \"Orange\", \"Banana\", \"Strawberry\"]\nrandom.shuffle(list)\n\nfor item in list:\n    print(item)", "line_number": null, "bug_type": null}
{"code": "def replace_all(orig_str, pattern, replacement):\n\treturn orig_str.replace(pattern, replacement)\n\nprint(replace_all(orig_str=\"Today is a beautiful day\", pattern=\"a\", replacement=\"the\"))", "line_number": null, "bug_type": null}
{"code": "def sort_strings(s):\n    return sorted(s)\n\nprint(sort_strings(['apple', 'banana', 'pear', 'mango']))", "line_number": null, "bug_type": null}
{"code": "class Car():\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year", "line_number": null, "bug_type": null}
{"code": "def search_list(lst, elem):\n  for i in range(len(lst)): \n    if lst[i] == elem: \n      return i \n  return -1", "line_number": null, "bug_type": null}
{"code": "class AreaCalculator:\n    def __init__(self):\n        pass\n    \n    def square_area(self, side_length):\n        return side_length * side_length\n\n    def rectangle_area(self, length, width):\n        return length * width", "line_number": null, "bug_type": null}
{"code": "def gcf(m, n):\n    while m != 0:\n        m, n = n % m, m \n    return n\n\nprint(gcf(15, 25))", "line_number": null, "bug_type": null}
{"code": "for i in range(1, 11):\n    if i % 2 != 0:\n        print(i)", "line_number": null, "bug_type": null}
{"code": "def removeItem(lst, item):\n    if item in lst:\n        lst.remove(item)\n    return lst\n\nprint(removeItem([2, 3, 4], 4))", "line_number": null, "bug_type": null}
{"code": "import urllib.request\n \nurl = 'http://www.example.org/'\n\nresponse = urllib.request.urlopen(url)\n\nprint(response.read())", "line_number": null, "bug_type": null}
{"code": "def convert_to_integer(my_list):\n    my_integer = int(\"\".join(map(str, my_list))) \n    return my_integer", "line_number": null, "bug_type": null}
{"code": "def filter_list(list): \n  filtered_list = [] \n\n  for i in list: \n    if i not in filtered_list: \n      filtered_list.append(i) \n  \n  return filtered_list", "line_number": null, "bug_type": null}
{"code": "def multiply_list(l): \n\tfrom functools import reduce\n\treturn reduce((lambda x, y: x * y), l)", "line_number": null, "bug_type": null}
{"code": "class Sentence:\n  def __init__(self, text):\n    self.text = text\n    self.words = self.text.split()\n    \n  def get_num_words(self):\n    return len(self.words)", "line_number": null, "bug_type": null}
{"code": "def descendingSort(nums):\n    # sort list in reverse order\n    nums.sort(reverse=True)\n    return nums\n\nprint(descendingSort([2, 4, 1, 6, 9, 8]))", "line_number": null, "bug_type": null}
{"code": "def triangle_area(base_length, height):\n    area = 0.5 * base_length * height\n    return area", "line_number": null, "bug_type": null}
{"code": "def myFunc(arr): \n    arr.sort()\n    return arr\n  \narr = [8, 16, 7, 15, 1]\nx = myFunc(arr)\nprint(x)", "line_number": null, "bug_type": null}
{"code": "sentence = \"I am learning Python\"\n\ndef count_words(sentence):\n    words = sentence.split()\n    return len(words)\n\nword_count = count_words(sentence)\nprint(word_count)", "line_number": null, "bug_type": null}
{"code": "dict = {\n    \"car\" : \"Ford\", \n    \"bike\" : \"Honda\"\n}", "line_number": null, "bug_type": null}
{"code": "def get_slice(mylist, start, end):\n    return mylist[start:end]\n\nresult = get_slice([1,2,3,4,5,6], 2, 5)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "import base64\nfrom cryptography.fernet import Fernet\n\ndef encrypt(plaintext):\n key = Fernet.generate_key()\n f = Fernet(key)\n encrypted_data = f.encrypt(plaintext.encode())\n return base64.b64encode(encrypted_data)", "line_number": null, "bug_type": null}
{"code": "def remove_trailing_zeros(num): \n  num = str(num) \n  return float(num.rstrip('0').rstrip('.')) \n  \nresult = remove_trailing_zeros(123.4500) \nprint(result)", "line_number": null, "bug_type": null}
{"code": "def harmonic_mean(x, y, z):\n return 3/((1/x + 1/y + 1/z))", "line_number": null, "bug_type": null}
{"code": "def sum_1_to_n(n):\n  sum = 0\n  for i in range(1, n+1):\n    sum += i\n  return sum", "line_number": null, "bug_type": null}
{"code": "def eval_expr(expr):\n  return eval(expr)\n\nprint(eval_expr(\"2 + (3 * 5)\"))\n\n# Output\n# 17", "line_number": null, "bug_type": null}
{"code": "def calc_avg(nums):\n    total = 0\n    for item in nums:\n        total += item\n    avg = total / len(nums)\n    return avg", "line_number": null, "bug_type": null}
{"code": "def last_occurrence(arr, item):\n    for i in range(len(arr)-1,-1,-1):\n        if arr[i] == item:\n            return i\n    return -1", "line_number": null, "bug_type": null}
{"code": "def find_words(string):\n    words = string.split()\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result", "line_number": null, "bug_type": null}
{"code": "sample_dict = {\"key1\": 1, \"key2\": 2, \"key3\": 3, \"key4\": 4, \"key5\": 5}", "line_number": null, "bug_type": null}
{"code": "arr = ['Apple', 'Orange', 'Banana']\nlast_element = arr[-1]\nprint(last_element)  # Result: Banana", "line_number": null, "bug_type": null}
{"code": "def sortDescending(arr):\n    return sorted(arr, reverse=True)\n\nprint(sortDescending([1, 12, 3, 8]))", "line_number": null, "bug_type": null}
{"code": "def remove_elem(string, elem):\n    \"\"\"This function removes a specified element from the given string of words\"\"\"\n    return ' '.join([word for word in string.split() if word != elem])", "line_number": null, "bug_type": null}
{"code": "def find_index(arr, target):\n for i in range(len(arr)):\n  if arr[i] == target:\n   return i\n return -1", "line_number": null, "bug_type": null}
{"code": "def addNumbers(a, b):\n    product = 10 * a + b\n    return product", "line_number": null, "bug_type": null}
{"code": "def prime_numbers():\n    primes = [2]\n    for num in range(3, 101):\n        if all(num % prime != 0 for prime in primes):\n            primes.append(num)\n    print(primes)\n\nprime_numbers()", "line_number": null, "bug_type": null}
{"code": "import string\n\ndef rm_punctuation(text): \n    translator = text.maketrans(\"\", \"\", string.punctuation) \n    return text.translate(translator) \n  \ntext = \"This, is a string.\"\nprint(rm_punctuation(text))", "line_number": null, "bug_type": null}
{"code": "def mean_squared_error(y_true, y_pred):\n    squared_errors = (y_true - y_pred)**2 # calculation of squared errors \n    mse = sum(squared_errors) / len(y_true) # mean of squared errors  \n    return mse", "line_number": null, "bug_type": null}
{"code": "def calculate_sum():\n    sum = 0\n    for i in range(1, 101):\n        sum += i\n    return sum", "line_number": null, "bug_type": null}
{"code": "class Laptop:\n    def __init__(self, brand, model):\n        self.brand = brand\n        self.model = model", "line_number": null, "bug_type": null}
{"code": "def convert_f_to_c(temperature):\n    return (temperature - 32) * 5.0/9.0\n\nresult = convert_f_to_c(64)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "class Player:\n    \n    def __init__(self):\n        pass\n    \n    def attack(self):\n        print(\"The Player is attacking!\")\n    \n    def defend(self):\n        print(\"The Player is defending!\")", "line_number": null, "bug_type": null}
{"code": "def multiply_between(start, end):\n    result = 1\n    for i in range(start, end + 1):\n        result *= i\n    return result\n\nprint(multiply_between(2, 10))", "line_number": null, "bug_type": null}
{"code": "def add_numbers(num1, num2):\n    print(f\"The sum of two numbers is : {num1 + num2}\")", "line_number": null, "bug_type": null}
{"code": "def factorial(number): \n    if number == 0: \n        return 1\n    else:\n        return number * factorial(number - 1)", "line_number": null, "bug_type": null}
{"code": "list = [7, 2, 3, 6, 5]\nprint(\"Max element is:\", max(list))", "line_number": null, "bug_type": null}
{"code": "def filter_long_words(words):\n  return [word for word in words if len(word) > 5]", "line_number": null, "bug_type": null}
{"code": "def FibonacciNumber(index):\n    if index == 0:\n        return 0\n    elif index == 1:\n        return 1\n    else: \n        return FibonacciNumber(index - 1) + FibonacciNumber(index - 2)", "line_number": null, "bug_type": null}
{"code": "def fib_sum(n):\n  if n <= 1:\n    return n\n  else:\n    return fib_sum(n-1) + fib_sum(n-2) + n\n\nprint(fib_sum(5))", "line_number": null, "bug_type": null}
{"code": "# sort a list of tuples by the second item in each tuple\ndef sort_tuple(tuples):\n    # sort in ascending order\n    tuples.sort(key=lambda x: x[1])\n    # return the list\n    return tuples", "line_number": null, "bug_type": null}
{"code": "def sum_natural_numbers(n):\n    return (n * (n + 1)) / 2", "line_number": null, "bug_type": null}
{"code": "my_list = [0, 2, 3, 0, 4]\nmy_list[:] = [val for val in my_list if val != 0]\nprint(my_list)", "line_number": null, "bug_type": null}
{"code": "sum = 0\n\nfor num in [1, 2, 3]:\n    sum += num\n\nprint(sum)", "line_number": null, "bug_type": null}
{"code": "def filter_A_columns(df): \n    col_list = [col for col in df.columns if col[0] == 'A']\n    return df[col_list]", "line_number": null, "bug_type": null}
{"code": "import base64\n\ndef encode_string(input_string):\n    encoded_bytes = base64.b64encode(input_string.encode('utf-8'))\n    return encoded_bytes.decode('utf-8')", "line_number": null, "bug_type": null}
{"code": "for i in range(2, 101):\n    for j in range(2, i):\n        if i % j == 0:\n            break\n    else:\n        print(i)", "line_number": null, "bug_type": null}
{"code": "def mean(lst):\n    total = 0\n    for x in lst:\n        total += x\n    return total / len(lst)", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_password(length):\n    password_characters = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(password_characters) for i in range(length))\n\nprint(generate_password(8))", "line_number": null, "bug_type": null}
{"code": "def add_list(list_of_numbers):\n    sum = 0\n    for i in list_of_numbers:\n        sum += i\n    return sum\n\nlist = [2, 5, 9]\nresult = add_list(list)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def find_max_element(arr):\n    max_element = arr[0]\n    for num in arr[1:]:\n        if num > max_element:\n            max_element = num\n    return max_element", "line_number": null, "bug_type": null}
{"code": "def extract_abce(string):\n  output = \"\"\n  for char in string:\n                    if ord(char) >= 97 and ord(char) <= 101:\n                                    output += char + \"\\n\"\n  print(output)", "line_number": null, "bug_type": null}
{"code": "sentence = input(\"Please enter a sentence: \")\n\nrev_sentence = sentence[::-1]\n\nprint(rev_sentence)", "line_number": null, "bug_type": null}
{"code": "def sentence_to_words(sentence):\n    words = sentence.split()\n    return words \n\nresult = sentence_to_words(\"This is a test sentence.\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def max_number(a,b,c):\n  max = a\n  if b > max:\n    max = b\n  if c > max:\n    max = c\n  return max\n\nprint(max_number(1,5,3))", "line_number": null, "bug_type": null}
{"code": "import re\n\npattern = r\"\\b[aA]\\w+\"\n\n# call the function\nprint(re.findall(pattern))", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(input_str):\n  len_input = len(input_str)\n\n  for i in range(len_input // 2):\n    if input_str[i] != input_str[len_input - i - 1]:\n      return False\n  \n  return True", "line_number": null, "bug_type": null}
{"code": "def split_string(string): \n return string.split() \n\nprint(split_string(\"Hello, World!\")) # [\"Hello,\", \"World!\"]", "line_number": null, "bug_type": null}
{"code": "numbers = [20, 5, 2, 15, 7, 10]\nnumbers = [x for x in numbers if x <= 10]\nprint(numbers)", "line_number": null, "bug_type": null}
{"code": "def common_elements(set1, set2):\n set_common = set1.intersection(set2)\n return set_common", "line_number": null, "bug_type": null}
{"code": "def unique_list(list):\n    unique_list = []\n    for item in list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list", "line_number": null, "bug_type": null}
{"code": "import re\n\ndef is_spam(email):\n    pattern = r'viagra|cialis|pharmacy'\n    if re.search(pattern, email):\n        return True\n    else:\n        return False", "line_number": null, "bug_type": null}
{"code": "def swap_dict_keys_values(d):\n  d_new = dict()\n  for key, value in d.items():\n    d_new.setdefault(value,[]).append(key)\n  return d_new", "line_number": null, "bug_type": null}
{"code": "def reverseList(list):\n    list.reverse()\n    return list\n\nlist = [\"Apple\", \"Banana\", \"Carrot\", \"Durian\"]\n\nreverseList(list)", "line_number": null, "bug_type": null}
{"code": "def get_sum(list_nums):\n    sum = 0\n    for num in list_nums:\n        sum += num\n    return sum", "line_number": null, "bug_type": null}
{"code": "def find_palindromes(lst):\n    palindromes = []\n    for item in lst:\n        if item == item[::-1]:\n            palindromes.append(item)\n    return palindromes", "line_number": null, "bug_type": null}
{"code": "def reverseList(List):\n    revList = []\n    for i in range(len(List)):\n        revList.append(List[len(List) - i - 1])\n    return revList", "line_number": null, "bug_type": null}
{"code": "import math\n\ndef area_circle(radius):\n    return math.pi * (radius ** 2)\n    \nprint(area_circle(3))", "line_number": null, "bug_type": null}
{"code": "import random\n\nnumber = random.randint(1000, 9999)\nprint(number) # e.g. 3874", "line_number": null, "bug_type": null}
{"code": "def sum(n): \n    sum = 0\n    for i in range(1,n+1): \n        sum = sum + i \n    return sum", "line_number": null, "bug_type": null}
{"code": "max_value = max([1, 4, 8, 2, 6])\nprint(max_value)", "line_number": null, "bug_type": null}
{"code": "def search(list_tmp, value): \n    for index, item in enumerate(list_tmp): \n        if item == value: \n            return index \n\n    return -1", "line_number": null, "bug_type": null}
{"code": "def distinct_words(sentence):\n words = sentence.split()\n distinct_words = []\n for word in words:\n  if word not in distinct_words:\n   distinct_words.append(word)\n return distinct_words", "line_number": null, "bug_type": null}
{"code": "try:\n  x = 10\n  y = 0\n  z = x/y\nexcept ZeroDivisionError:\n  print(\"ZeroDivisionError occurred: Cannot divide a number by 0\")", "line_number": null, "bug_type": null}
{"code": "class Process:\n    def start(self):\n        # code to start the process \n        pass\n\n    def stop(self):\n        # code to stop the process \n        pass", "line_number": null, "bug_type": null}
{"code": "import sys\n\n# Get the command line arguments\na = int(sys.argv[1])\nb = int(sys.argv[2])\n\n# Calculate the sum\nsum = a + b\n\n# Print the result\nprint(sum)", "line_number": null, "bug_type": null}
{"code": "def is_contained(list_a, list_b):\n    for x in list_b: \n        if x not in list_a: \n            return False \n  \n    return True", "line_number": null, "bug_type": null}
{"code": "import json\n\njson_string = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\nparsed_json = json.loads(json_string)\n\nprint(parsed_json)", "line_number": null, "bug_type": null}
{"code": "x = 10\ny = 20\n\nsum = x + y\n\nprint(sum) # Output: 30", "line_number": null, "bug_type": null}
{"code": "def sort_descending(arr):\n    arr.sort(reverse=True)\n    return arr\n\narr = [9, 2, 7, 1]\nres = sort_descending(arr) \nprint (str(res))", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_4_digit_random_number():\n    return random.randint(1000, 9999)\n\nif __name__ == '__main__':\n    print(generate_4_digit_random_number())", "line_number": null, "bug_type": null}
{"code": "def compare_sum(a, b):\n  if a + b == 10:\n    return True\n  else:\n    return False", "line_number": null, "bug_type": null}
{"code": "def largest_element(list1): \n    max = list1[0] \n    for item in list1: \n        if item > max: \n            max = item\n    return max", "line_number": null, "bug_type": null}
{"code": "def search(nums, target):\n    for i, num in enumerate(nums):\n        if target == num:\n            return i\n    return -1", "line_number": null, "bug_type": null}
{"code": "def convert_to_upper_case(string):\n    '''This function will take a string as input and convert it to upper case'''\n    return string.upper()\n\nconverted_string = convert_to_upper_case(\"hello world\")\nprint(converted_string)", "line_number": null, "bug_type": null}
{"code": "i = 0\nwhile i < 5:\n    print(i)\n    i += 1", "line_number": null, "bug_type": null}
{"code": "import numpy as np\n\ndef normalize(arr):\n  return (arr - np.mean(arr)) / np.std(arr)\n\nnormalize([1,2,3,4]) # [-1.,  0.,  1.,  2.]", "line_number": null, "bug_type": null}
{"code": "def filter_string(str):\n    str = ''.join(x for x in str if x.isdigit())\n    return str  \n\nmy_string = \"hey3this5is4my2string1\"\nprint(filter_string(my_string))", "line_number": null, "bug_type": null}
{"code": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "line_number": null, "bug_type": null}
{"code": "def capitalize_first_letter(word):\n    return word[0].upper() + word[1:]\n\n# main\nword = \"python\"\ncapitalized = capitalize_first_letter(word)\nprint(capitalized)", "line_number": null, "bug_type": null}
{"code": "import random\n \nrandom_nums = [random.randint(1, 10) for _ in range(100)]\n \nprint(random_nums)", "line_number": null, "bug_type": null}
{"code": "def list_to_dict(keys, values):\n result = {}\n for i in range(len(keys)):\n  result[keys[i]] = values[i] \n return result", "line_number": null, "bug_type": null}
{"code": "# Create an empty 2D list\nn = 10\narr = [[0 for j in range(n)] for i in range(n)]\n\n# Print the array\nprint(arr)", "line_number": null, "bug_type": null}
{"code": "import random\n\nfor i in range(10):\n ip_address = \"192.168.1.\" + str(random.randrange(0, 255))\n print(ip_address)", "line_number": null, "bug_type": null}
{"code": "import math\nx = 81.0\n# calculate the square root\nprint('The square root of %0.1f is %0.1f'%(x, math.sqrt(x)))", "line_number": null, "bug_type": null}
{"code": "i = 0\nwhile i < 10:\n    print(i)\n    i += 1", "line_number": null, "bug_type": null}
{"code": "words = [\"apple\", \"pie\", \"is\", \"delicious\"]\n\nfor word in words:\n print(len(word))", "line_number": null, "bug_type": null}
{"code": "import calendar\n\ndef days_in_month(year, month):\n    return calendar.monthrange(year, month)[1]", "line_number": null, "bug_type": null}
{"code": "class Student:\n    def __init__(self, course_name, grades):\n        self.course_name = course_name\n        self.grades = grades\n        \n    def get_grade(self):\n        return sum(self.grades) / len(self.grades)", "line_number": null, "bug_type": null}
{"code": "arr = [4,7,1,10,3]\n\narr.sort(reverse=True)\n\nprint(arr)\n# Output: [10, 7, 4, 3, 1]", "line_number": null, "bug_type": null}
{"code": "input_type = type(\"123\") # str\n\nconverted_int = int(\"123\") # 123", "line_number": null, "bug_type": null}
{"code": "def split_string(s, delimiter): \n return s.split(delimiter)\n\nstring = 'Hello,World'\ndelimiter = ','\n\nresult = split_string(string, delimiter)\n\n# Outputs ['Hello', 'World']", "line_number": null, "bug_type": null}
{"code": "arr = [10, 20, 30, 40]\n\nfor num in arr:\n    print(num)", "line_number": null, "bug_type": null}
{"code": "import numpy as np\n\n# Generate a 3D array\nx = np.zeros((2, 3, 2))\n\n# Print the array\nprint(x)", "line_number": null, "bug_type": null}
{"code": "def replace_list_items(list_X,value):\n    new_list=[]\n    for element in list_X:\n        new_list.append(value)\n    return new_list", "line_number": null, "bug_type": null}
{"code": "def measure_temperature(data):\n    temp_c = data[0]\n    temp_f = data[1]\n    temp_k = data[2]\n    return temp_c, temp_f, temp_k", "line_number": null, "bug_type": null}
{"code": "def reverse_list(strings):\n    return [s[::-1] for s in strings]\n\nstrings = [\"Hello\", \"World\"]\nprint(reverse_list(strings))", "line_number": null, "bug_type": null}
{"code": "class StringChecker:\n    def containsVowels(self, s):\n        vowels = set('aeiouAEIOU')\n        for letter in s:\n            if letter in vowels:\n                return True\n        return False", "line_number": null, "bug_type": null}
{"code": "def remove_dict_element(dictionary, key):\n    # Check if the key is present in the dictionary\n    if key in dictionary:\n        # If yes, remove the key\n        del dictionary[key]\n    # Return the updated dictionary     \n    return dictionary", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nresult = factorial(5)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "import subprocess\n\ncommand = 'ls'\nprocess = subprocess.run([command], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)\n\nfor line in process.stdout.splitlines():\n    print( line )", "line_number": null, "bug_type": null}
{"code": "def palindrome(word): \n    if word == word[::-1]: \n        return True\n    else: \n        return False", "line_number": null, "bug_type": null}
{"code": "class ArrayContainer:\n  def __init__(self, arr):\n    self.arr = arr\n\n  def get_array(self):\n    return self.arr", "line_number": null, "bug_type": null}
{"code": "def largest_element(x):\n    max_element = x[0]\n    for number in x:\n        if number > max_element:\n            max_element = number\n    return max_element", "line_number": null, "bug_type": null}
{"code": "import json\n\nobj = {\n  \"name\": \"John\",\n  \"age\": 42\n}\n\njson_string = json.dumps(obj)", "line_number": null, "bug_type": null}
{"code": "my_dict = {\"cat\": [1], \"dog\": [2], \"mouse\": [3]}", "line_number": null, "bug_type": null}
{"code": "def fibonacci(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\nnum = fibonacci(10)\nprint(num)", "line_number": null, "bug_type": null}
{"code": "import requests\nfrom bs4 import BeautifulSoup\n \nurl = 'https://example.com'\ncontent = requests.get(url).content\nsoup = BeautifulSoup(content, 'html.parser')\n \nfor element in soup.find_all('h2'):\n    print(element.text)", "line_number": null, "bug_type": null}
{"code": "def evaluate_formula(x, y, z):\n return 2*x + 4*y - z == 10", "line_number": null, "bug_type": null}
{"code": "def descending_sort(list): \n    list.sort(reverse=True) \n    return list\n\nlist = [3, 8, 1, 5]\nresult = descending_sort(list)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def find_smallest(num1, num2, num3):\n    return min(num1, num2, num3)\n\n# Example\nprint(find_smallest(2, 5, 8))  # Prints 2", "line_number": null, "bug_type": null}
{"code": "arr = [1, 2, 3, 4, 5, 6] \nnew_arr = [i**2 for i in arr if i % 2 == 0]", "line_number": null, "bug_type": null}
{"code": "def print_matrix(matrix):\n    \"\"\"\n    Function to print out a matrix of numbers.\n    \"\"\"\n    for row in matrix:\n        for num in row:\n            print(str(num).ljust(4), end=\"\")\n        print()", "line_number": null, "bug_type": null}
{"code": "for i in range(1, 11):\n    for j in range(1, i+1):\n        print(i+(j-1)*i, end=\" \")\n    print()", "line_number": null, "bug_type": null}
{"code": "def replace_e(arr): \n    return [i.replace('e','@') for i in arr] \n  \narr = ['abc','xyz','111']\nprint(replace_e(arr))", "line_number": null, "bug_type": null}
{"code": "def average(a, b, c, d, e):\n    \"\"\"This program computes the average of 5 numbers\"\"\"\n    return (a+b+c+d+e)/5", "line_number": null, "bug_type": null}
{"code": "words = [\"correct\", \"tango\", \"apple\", \"banana\"] \n\n# Sort words in reverse alphabetical order \nwords.sort(reverse=True) \n\n# Print list in descending order \nprint(words)", "line_number": null, "bug_type": null}
{"code": "def sortStringByLength(string_list):\n    string_list.sort(key = lambda x:len(x)) \n    return string_list", "line_number": null, "bug_type": null}
{"code": "def calculate_interest_rate(principal, rate, period):\n  return principal * (rate / 100) * period\n  \ncalculate_interest_rate(2000, 4.5, 5) #900", "line_number": null, "bug_type": null}
{"code": "def find_books_with_alice(books):\n    found_books = []\n    for book in books:\n        if \"Alice in Wonderland\" in book.Text:\n            found_books.append(book)\n    return found_books", "line_number": null, "bug_type": null}
{"code": "squares = []\nfor i in range(1, 11):\n squares.append(i*i)\nprint(squares)", "line_number": null, "bug_type": null}
{"code": "def print_multiplication_table(number): \n    for i in range(1, 11): \n        print(number,\"X\",i,\"=\",number*i)", "line_number": null, "bug_type": null}
{"code": "def search(head, key): \n    current = head \n    while current is not None: \n        if current.data == key: \n            return current \n        current = current.next\n    return None", "line_number": null, "bug_type": null}
{"code": "def factorial(x):\n    if x <= 1:\n        return 1\n    return x * factorial(x - 1)", "line_number": null, "bug_type": null}
{"code": "import random\n\nlis = [1, 2, 3, 4, 5]\nrandom.shuffle(lis)\nprint(lis)", "line_number": null, "bug_type": null}
{"code": "def count_vowels(str):\n count = 0\n vowels = set(\"aeiou\")\n for i in str:\n  if i in vowels:\n   count += 1\n return count", "line_number": null, "bug_type": null}
{"code": "def sum_list(my_list):\n\ttotal = 0\n\tfor i in my_list:\n\t\ttotal += i\n\treturn total", "line_number": null, "bug_type": null}
{"code": "def is_sorted(arr):\n    return arr == sorted(arr)\n\nprint(is_sorted([1, 2, 3, 4]))", "line_number": null, "bug_type": null}
{"code": "def intersection(list1, list2): \n    return list(set(list1) & set(list2))", "line_number": null, "bug_type": null}
{"code": "# calculate the number of elements in a set\n\nmy_set = {1, 2, 3, 4, 5}\nnum_elements = len(my_set)\n\nprint(\"Number of elements in the set:\", num_elements)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_list(length):\n    lst = []\n    for i in range(length):\n        lst.append(random.randint(0, 100))\n    return lst", "line_number": null, "bug_type": null}
{"code": "number_list = [-5, 0, 4, 78, -3]\nresult = [num ** 2 for num in number_list if num >= 0]", "line_number": null, "bug_type": null}
{"code": "Str = \"apple, banana, orange, grapes\"\nmy_list = Str.split(\", \")\n\n# Output\nmy_list = [\"apple\",\"banana\",\"orange\",\"grapes\"]", "line_number": null, "bug_type": null}
{"code": "for i in range(0, 11):\n if i % 2 != 0:\n  print(i)", "line_number": null, "bug_type": null}
{"code": "def concat_strings(str1, str2, str3):\n  return str1 + str2 + str3", "line_number": null, "bug_type": null}
{"code": "def lambda_handler(event, context):\n    numbers = event['numbers']\n    result = [num ** 2 for num in numbers if num % 2 == 0]\n    return {'result': result}", "line_number": null, "bug_type": null}
{"code": "def read_csv(filename):\n    try:\n        with open(filename, 'r') as f: \n            data = f.readlines()\n            return data\n    except FileNotFoundError: \n        print(\"File not found. Please provide a valid filename\")", "line_number": null, "bug_type": null}
{"code": "def factorial(n): \n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nresult = factorial(5)\nprint(result) # prints 120", "line_number": null, "bug_type": null}
{"code": "import tkinter as tk\n\nroot = tk.Tk()\n\ndef displayMessage():\n    print(\"Button was pressed!\")\n\nbutton = tk.Button(root,text=\"Press Me\",width=25,command=displayMessage)\nbutton.pack()\n\nroot.mainloop()", "line_number": null, "bug_type": null}
{"code": "def find_common_elements(set1, set2):\n    result = []\n    for element in set1:\n        if element in set2:\n            result.append(element)\n    \n    return result", "line_number": null, "bug_type": null}
{"code": "def addDecimals(a, b):\n    return a + b\n\nx = 3.4\ny = 2.6\nprint (addDecimals(x, y)) # 6.0", "line_number": null, "bug_type": null}
{"code": "sequence = [\"Hello\", \"world\", \"Welcome\", \"to\", \"the\", \"Coding\", \"Revolution\"]\n\nsorted_sequence = sorted(sequence)\n\nfor word in sorted_sequence:\n    print(word)", "line_number": null, "bug_type": null}
{"code": "def create_dict(L):\n    dict = {}\n    for i in range(len(L)): \n        dict[L[i]] = i\n    return dict\n\ndict_list = dict(create_dict([\"a\",\"b\",\"c\"]))\nprint(dict_list)", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)", "line_number": null, "bug_type": null}
{"code": "def checkEqual(arr):\n    if len(arr) == 0:\n        return False\n    return all(arr[0] == x for x in arr)", "line_number": null, "bug_type": null}
{"code": "miles = 10\nkilometers = miles * 1.60934\nprint(f\"{miles} miles is equal to {kilometers} kilometers\")", "line_number": null, "bug_type": null}
{"code": "def avg_elements(list_of_lists):\n    total_elements = 0\n    for sublist in list_of_lists:\n        total_elements += len(sublist)\n    return total_elements / len(list_of_lists)", "line_number": null, "bug_type": null}
{"code": "def add_numbers(num1, num2):\n  return num1 + num2\n  \nresult = add_numbers(8, 10)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def removeRepeatedChars(str):\n    result = \"\"\n    for c in str:\n        if c not in result:\n            result += c\n    return result\n\nprint(removeRepeatedChars(\"aaabbccddeeff\"))", "line_number": null, "bug_type": null}
{"code": "def length_of_string(string): \n    count = 0\n    for char in string: \n        count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "def square(num):\n    if num < 0:\n        raise ValueError('Cannot square negative numbers.')\n    return num**2", "line_number": null, "bug_type": null}
{"code": "def calculate_average(numbers):\n  return sum(numbers)/len(numbers)\n\nnumbers = [2, 4, 5, 7, 8]\nprint(calculate_average(numbers)) # Output: 5.6", "line_number": null, "bug_type": null}
{"code": "import pyttsx3\n\nengine = pyttsx3.init()\nengine.say(\"Hello world!\")\nengine.runAndWait()", "line_number": null, "bug_type": null}
{"code": "def printDivisorsOfNumber(n): \n    print(\"The divisors of the number are: \")\n    for x in range(1, n+1):\n        if n%x == 0: \n            print(x)", "line_number": null, "bug_type": null}
{"code": "def is_present(arr, number):\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return True\n    return False", "line_number": null, "bug_type": null}
{"code": "# Take input\ntext = input('Enter a string: ')\n\n# Split string into words\nwords = text.split(' ') \n\n# Reverse order\nwords.reverse() \n\n# Print\nfor word in words:\n print(word)", "line_number": null, "bug_type": null}
{"code": "def intersection(listOne, listTwo):\n    return list(set(listOne).intersection(set(listTwo)))", "line_number": null, "bug_type": null}
{"code": "def max_value(int_arr):\n    max_val = int_arr[0]\n    for i in int_arr:\n        if i > max_val:\n            max_val = i\n    return max_val", "line_number": null, "bug_type": null}
{"code": "def sortTuples(tuples):\n    tuples.sort(key=lambda x: x[1],reverse=True)\n    return tuples", "line_number": null, "bug_type": null}
{"code": "def unique_list(input_list):\n    uniques = []\n    for i in input_list:\n        if i not in uniques:\n            uniques.append(i)\n\n    return uniques", "line_number": null, "bug_type": null}
{"code": "def reverser(string):\n    reversed_string = []\n    words = string.split()\n    for word in words:\n        reversed_string.append(word[::-1])\n    return \" \".join(reversed_string)", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(word):\n  rev_word = word[::-1]\n  if rev_word == word:\n    return True\n  else:\n    return False\n  \nword = \"racecar\"\nprint(is_palindrome(word)) # True", "line_number": null, "bug_type": null}
{"code": "import pymysql\n\n# Create connection to database\nconn = pymysql.connect(host=\"localhost\",\n                       user=\"admin\",\n                       passwd=\"admin123\",\n                       db=\"test\")\n\n# Create a cursor and execute a query\ncur = conn.cursor()", "line_number": null, "bug_type": null}
{"code": "word = input('Enter a word or phrase: ')\n\ncharacters = sorted(list(word))\n\nfor character in characters:\n    print(character)", "line_number": null, "bug_type": null}
{"code": "lst = []\nfor num in range(1,11):\n   if all(num%i!=0 for i in range(2,num)):\n       lst.append(num)", "line_number": null, "bug_type": null}
{"code": "class MyClass:\n    def say_hello(self):\n        print(\"Hello world!\")\n    \n    def say_goodbye(self):\n        print(\"Goodbye!\")", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return (n*factorial(n-1))", "line_number": null, "bug_type": null}
{"code": "def main():\n    result = [item * item for item in range(10) if item % 3 == 0]\n    return result", "line_number": null, "bug_type": null}
{"code": "# Fibonacci Sequence up to 20\na, b = 0, 1\nwhile a < 20:\n    print(a)\n    a, b = b, a+b", "line_number": null, "bug_type": null}
{"code": "n = 10\n\nlist_numbers = []\nfor i in range(0,n+1):\n    list_numbers.append(i)\n\nprint(list_numbers)", "line_number": null, "bug_type": null}
{"code": "largest = 0\nlist = [3, 6, 8, 11, 12]\n\nfor i in list:\n  if i > largest:\n    largest = i\n\nprint(largest)", "line_number": null, "bug_type": null}
{"code": "list_of_names= [\"Asher\", \"Aster\", \"Athena\", \"Robert\"]\nlist_of_names.sort()\n\nprint(list_of_names)", "line_number": null, "bug_type": null}
{"code": "# Print all prime numbers up to 100\n\nfor num in range(2,101):  \n   if all(num%i!=0 for i in range(2,num)):\n      print(num)", "line_number": null, "bug_type": null}
{"code": "def print_even_numbers(n):\n    for i in range(0, n+1):\n        if i % 2 == 0:\n            print(i)\n\nprint_even_numbers(10)", "line_number": null, "bug_type": null}
{"code": "import requests\n\nsite_urls = [\"http://www.example1.com\" , \"http://www.example2.com\"]\n\nfor url in site_urls:\n response = requests.get(url)\n page_source = response.content\n print(page_source)", "line_number": null, "bug_type": null}
{"code": "name = input(\"Enter your name:\") \n \nprint(\"Welcome to my program \" + name + \"!\")", "line_number": null, "bug_type": null}
{"code": "import requests\nimport bs4\n\ndef webscraper(url):\n    page = requests.get(url)\n    soup = bs4.BeautifulSoup(page.text, \"html.parser\")\n    return soup", "line_number": null, "bug_type": null}
{"code": "def sort_descending(list):\n    sorted_list = sorted(list, reverse=True)\n    return sorted_list", "line_number": null, "bug_type": null}
{"code": "import json\n\ndata = [{'name': 'John', 'age': '22'}, {'name': 'Bob', 'age': '33'}]\n\njson_str = json.dumps(data)\nprint(json_str)", "line_number": null, "bug_type": null}
{"code": "import uuid\n\ndef generateUniqueId():\n return str(uuid.uuid4())\n\nuniqueId = generateUniqueId()\nprint(uniqueId)", "line_number": null, "bug_type": null}
{"code": "def find_min(a, b):\n    return min(a, b)\n\nresult = find_min(5, 3)\nprint(result) # 3", "line_number": null, "bug_type": null}
{"code": "def classifyNumber(num): \n    if num % 2 == 0: \n        return \"even\"\n    else: \n        return \"odd\" \n  \nprint(classifyNumber(3))", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n  factorial = 1\n  while n > 0:\n    factorial *= n\n    n -= 1\n  return factorial", "line_number": null, "bug_type": null}
{"code": "the_list = [1,2,3,4,5]\n\nfor i in range (len(the_list)):\n    print(the_list[i])", "line_number": null, "bug_type": null}
{"code": "def double_list(numbers):\n    doubled_list = []\n    for num in numbers:\n        doubled_list.append(num*2)\n    return doubled_list", "line_number": null, "bug_type": null}
{"code": "def stringLength(string):\n    return len(string)\n\nresult = stringLength(\"Hello World\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def find_all_substrings(string):\n    substrings = []\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            substrings.append(string[i:j])\n    return substrings", "line_number": null, "bug_type": null}
{"code": "def sort_list_by_first_char(strings):\n    return sorted(strings, key=lambda s: s[0])\n\nstrings = [\"yesterday\", \"today\", \"tomorrow\"]\nprint(sort_list_by_first_char(strings))", "line_number": null, "bug_type": null}
{"code": "try:\n  name = input('What is your name? ')\n  print('Hello, ' + name)\nexcept:\n  print('There was an error parsing your name.')", "line_number": null, "bug_type": null}
{"code": "import string\n\nstr = \"This, is a test-string.\"\nstr = str.translate(str.maketrans('', '', string.punctuation))\nprint(str)", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_random_numbers():\n    random_numbers = set()\n    while len(random_numbers) < 100: \n        random_numbers.add(random.randint(1, 100)) \n\n    return random_numbers", "line_number": null, "bug_type": null}
{"code": "def parse_url(url): \n    res = dict()\n    elems = url.split(\"?\")[1].split(\"&\")\n    for elem in elems: \n        k, v = elem.split(\"=\")\n        res[k] = v\n    return res", "line_number": null, "bug_type": null}
{"code": "def getAbsoluteValue(number):\n    if (number < 0):\n        return number * -1\n    else:\n        return number\n\nprint(getAbsoluteValue(-3)) # Outputs 3", "line_number": null, "bug_type": null}
{"code": "for num in [2, 4, 7, 14, 21]: \n    if num % 2 == 0: \n        print(num, end = \" \")", "line_number": null, "bug_type": null}
{"code": "def create_sequence():\n    i = 0\n    while i < 8:\n        yield i\n        i += 1", "line_number": null, "bug_type": null}
{"code": "class Person:\n def __init__(self, name, age):\n  self.name = name\n  self.age = age\n\ndef describe_person(self): \n print(f\"Name: {self.name}, Age: {self.age}\")", "line_number": null, "bug_type": null}
{"code": "import re\n\nHEX_COLOR_REGEX = re.compile(r'^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$')", "line_number": null, "bug_type": null}
{"code": "def harmonic_mean(x, y):\n    return 2.0 * (x * y) / (x + y)\n\nharmonic_mean_value = harmonic_mean(7, 9)\n\nprint(harmonic_mean_value)", "line_number": null, "bug_type": null}
{"code": "def reverse_string(str):\n    str_rev = ''\n    i = len(str) - 1\n\n    while i >= 0:\n        str_rev += str[i]\n        i -= 1\n\n    return str_rev", "line_number": null, "bug_type": null}
{"code": "lst=[1,2,3,4]\nfor i in range(len(lst)):\n    lst[i] = lst[i]*10\nprint(lst)", "line_number": null, "bug_type": null}
{"code": "def calculate_average(numbers):\n    total = 0\n    for number in numbers:\n        total = total + number\n    return total / len(numbers)", "line_number": null, "bug_type": null}
{"code": "def calculate_sum(a,b):\n    return (b*(b+1))//2 - ((a-1)*a)//2\n\nsum = calculate_sum(1, 10)\nprint(sum)", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n  if n <= 1:\n    return 1\n  else:\n    return n * factorial(n-1)\n\nprint(factorial(5)) # 120", "line_number": null, "bug_type": null}
{"code": "def toBinary(num):\n    if num > 1:\n        toBinary(num // 2)\n    print(num % 2, end = '')\n\ntoBinary(7)", "line_number": null, "bug_type": null}
{"code": "def sum_of_even_numbers(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n \n    return sum", "line_number": null, "bug_type": null}
{"code": "dictionary = {1: 'default', 2: 'default', 3: 'default'}", "line_number": null, "bug_type": null}
{"code": "def count_unique(lst):\n    unique_count = 0\n    seen = set()\n    for element in lst:\n        if element not in seen:\n            unique_count += 1\n            seen.add(element)\n    return unique_count", "line_number": null, "bug_type": null}
{"code": "i = 0\n\nwhile i < 20:\n    # do something useful\n    i += 1", "line_number": null, "bug_type": null}
{"code": "def is_prime(num):\n    if num > 1: \n        for i in range(2,num):\n            if (num % i) == 0: \n                return False\n        return True \n    else: \n        return False", "line_number": null, "bug_type": null}
{"code": "colors = [\"red\", \"green\", \"blue\"]\n\ncolor_dictionary = {i : colors[i] for i in range(len(colors))} \n\nprint(color_dictionary)", "line_number": null, "bug_type": null}
{"code": "for num in range(2,101):\n   for i in range(2,num):\n       if (num % i ) == 0:\n           break\n   else:\n       print(num, end = ' ')", "line_number": null, "bug_type": null}
{"code": "def expand_range(value):\n  return [x for x in range(int(value[0]), int(value[2]) + 1)]", "line_number": null, "bug_type": null}
{"code": "def find_greatest(param1, param2):\n  if param1 > param2:\n      greater = param1\n  else:\n      greater = param2\n  return greater", "line_number": null, "bug_type": null}
{"code": "def search_list(lst, num):\n    for i in range(len(lst)):\n        if lst[i] == num:\n            return i\n    return -1", "line_number": null, "bug_type": null}
{"code": "def my_list(list):\n  new_list = []\n  for item in list:\n    new_list.append(item * 2)\n  return new_list", "line_number": null, "bug_type": null}
{"code": "def sum_odd_digits(num):\n    sum = 0\n    for x in str(num):\n        if int(x) % 2 != 0:\n            sum += int(x)\n \n    return sum\n\nprint(sum_odd_digits(2243))", "line_number": null, "bug_type": null}
{"code": "def sortReverseString(string):\n char_list = list(string)\n char_list.sort(reverse=True)\n return ''.join(char_list)\n\n# Usage:\nstring = \"Hello\"\nsortedString = sortReverseString(string)\nprint(sortedString) # Output: olleH", "line_number": null, "bug_type": null}
{"code": "def combine_lists_to_dict(keys, values):\n    my_dict = dict(zip(keys, values))\n    return my_dict", "line_number": null, "bug_type": null}
{"code": "def get_largest_sum(nums):\n  nums.sort()\n  return nums[-1] + nums[-2]", "line_number": null, "bug_type": null}
{"code": "def search_substring(string, substring):\n  if substring in string:\n    return \"Substring found!\"\n  else:\n    return \"Substring not found.\"", "line_number": null, "bug_type": null}
{"code": "def fill_blanks(string): \n    return string.replace(\" \", \".\") \n  \n# Driver code \nstring = \"Python Programming\"\nprint(fill_blanks(string))", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef roll_dice():\n    dice_roll = random.randint(1, 6)\n    print(\"You rolled a\", dice_roll)\n\nroll_dice()", "line_number": null, "bug_type": null}
{"code": "def concatenate_strings(list_of_strings):\n    result = \"\"\n    for string in list_of_strings:\n        result += string\n    return result", "line_number": null, "bug_type": null}
{"code": "def divide_without_operator(a, b):\n    return a // b + (a % b != 0)\n\nprint(divide_without_operator(9, 3))", "line_number": null, "bug_type": null}
{"code": "def mean(lst):\n    total = 0\n    for n in lst:\n        total += n\n    return total / len(lst)\n\nresult = mean([1, 5, 8, 9])\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def encrypt_string(string):\n    letters = {}\n    for i in range(len(string)):\n        letters[string[i]] = i\n    encrypted_text = \"\"\n    for char in string:\n        encrypted_text += str(letters[char])\n    return encrypted_text", "line_number": null, "bug_type": null}
{"code": "def print_set(s):\n    result = []\n    for x in s:\n        if x not in result:\n            result.append(x)\n    print(result)", "line_number": null, "bug_type": null}
{"code": "# Import library\nimport random\n\n# Generate random numbers\nrandom_nums = []\n\nfor i in range(5):\n    random_nums.append(random.randint(0,100))\n\n# Print random numbers\nprint(random_nums)", "line_number": null, "bug_type": null}
{"code": "import math\n\ndef find_primes(n):\n  primes = [i for i in range(2, n) if all(i % j for j in range(2, int(math.sqrt(i))+1))]\n  return primes", "line_number": null, "bug_type": null}
{"code": "def linear_search(arr, N):\n  for i in range(len(arr)):\n    if arr[i] == N:\n      return i+1\n  return -1", "line_number": null, "bug_type": null}
{"code": "multiples_of_3 = [num for num in range(0, 101) if num % 3 == 0]", "line_number": null, "bug_type": null}
{"code": "def count_people_in_age_range(ageGroup1, ageGroup2):\n total = 0\n for age in ageGroup1 + ageGroup2:\n  if age >= 10 and age <= 20:\n   total += 1\n return total", "line_number": null, "bug_type": null}
{"code": "def swap(a, b):\n    # Store a in temp\n    temp = a\n\n    # Copy b to a\n    a = b\n\n    # Copy temp to b\n    b = temp", "line_number": null, "bug_type": null}
{"code": "def find_indices(list, string):\n    indices = []\n    for i,item in enumerate(list):\n        if item == string:\n            indices.append(i)\n\n    return indices", "line_number": null, "bug_type": null}
{"code": "import sqlite3\n\ndb = sqlite3.connect('database.db')\ncursor = db.cursor()\n\nsql = 'SELECT * FROM table'\n\ncursor.execute(sql)\nresult = cursor.fetchall()\n\nfor row in result:\n    print(row)\n\ndb.close()", "line_number": null, "bug_type": null}
{"code": "import numpy as np\n\ndef random_array():\n return np.random.random((4, 4, 4, 4))", "line_number": null, "bug_type": null}
{"code": "import random\n\nchar_list = ['A', 'B', 'C', 'D']\nrandom_char = random.choice(char_list)\nprint(random_char)", "line_number": null, "bug_type": null}
{"code": "def find_unique_elements(lst):\n    unique_list = []\n    for item in lst:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list", "line_number": null, "bug_type": null}
{"code": "age = 32\nif age > 18 and age < 65:\n    print('You are an adult!')", "line_number": null, "bug_type": null}
{"code": "class Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model", "line_number": null, "bug_type": null}
{"code": "def calculate_discount(price, discount):\n    '''This function takes price and discount as input and returns the discounted price'''\n    discount = min(max(0, discount), 1)\n    return round(price * (1 - discount), 2)", "line_number": null, "bug_type": null}
{"code": "def printNumbers(n): \n  for i in range(1,n+1): \n    print(i, end =\" \") \n\nprintNumbers(5)", "line_number": null, "bug_type": null}
{"code": "def calculate_sum(numbers):\n      sum = 0\n      for num in numbers: # the colon is missing\n         sum += num\n      return sum", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(word):\n    reverse_word = word[::-1]\n    if word == reverse_word:\n        return True\n    else:\n        return False\n\nresult = is_palindrome(\"madam\")\nprint(result)", "line_number": null, "bug_type": null}
{"code": "def abs_sort(arr):\n    return sorted(arr, key=abs)\n\nabs_sort([2,-5, -1, 3])", "line_number": null, "bug_type": null}
{"code": "import requests\n\ndef make_web_request(url):\n    '''This function makes an HTTP request to the given URL and returns the response.'''\n    response = requests.get(url)\n    return response.text", "line_number": null, "bug_type": null}
{"code": "import random\n\ndef generate_random_numbers(start, end):\n    random_numbers = []\n    for i in range(start, end+1):\n        random_number = random.randint(start, end)\n        random_numbers.append(random_number)\n\n    return random_numbers", "line_number": null, "bug_type": null}
{"code": "OldList = [5,5,5,2,1,2,3,5]\nNewList = []\n\nfor Num in OldList:\n    if Num not in NewList:\n        NewList.append(Num)\n\nprint(NewList)", "line_number": null, "bug_type": null}
{"code": "price = 22\ntax_percentage = 5\n\ntotal_cost = price * (1 + tax_percentage/100)\nprint('The total cost is: ', total_cost)", "line_number": null, "bug_type": null}
{"code": "def evaluate_expression(x):\n    return 3*x**2 + 4*x - 2\n\nx = 5\nresult = evaluate_expression(x)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "import sys\n\nif __name__ == \"__main__\":\n    arg = sys.argv[1]\n    print(arg)", "line_number": null, "bug_type": null}
{"code": "def print_dict_items(dct):\n  for key, value in dct.items():\n    print(\"Key: {}, Value: {}\".format(key, value))", "line_number": null, "bug_type": null}
{"code": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nprint(gcd(4, 8)) # Output: 4", "line_number": null, "bug_type": null}
{"code": "for i in range(5):\n    for j in range(5):\n        print(\"*\", end=\" \")\n    print()", "line_number": null, "bug_type": null}
{"code": "def reverse_string(s): \n    return s[::-1]\n\nresult = reverse_string(\"Hello\") \nprint(result)", "line_number": null, "bug_type": null}
{"code": "def factorial(x):\n    result = 1\n    for num in range(1,x+1):\n        result *= num\n    return result", "line_number": null, "bug_type": null}
{"code": "lst = [3, 1, 4, 5, 2]\n\nfor number in sorted(lst):\n    print(number)", "line_number": null, "bug_type": null}
{"code": "def maxElement(arr):\n    return max(arr)\n\narray = [2, 78, 34, 55]\n\nprint(maxElement(array)) # 78", "line_number": null, "bug_type": null}
{"code": "array_2d = [[1,2,3], [4,5,6], [7,8,9]]", "line_number": null, "bug_type": null}
{"code": "def create_histogram(list):\n    hist = dict()\n    \n    for i in list:\n        if i not in hist:\n            hist[i] = 1\n        else:\n            hist[i] += 1\n    \n    return hist", "line_number": null, "bug_type": null}
{"code": "def calculate_cost(item_cost, quantity):\n return item_cost * quantity\n\ncost = calculate_cost(10, 5)\nprint('The total cost of your order is:', cost)  # The total cost of your order is: 50", "line_number": null, "bug_type": null}
{"code": "unsortedDict = {\"Red\":120,\"Blue\":90,\"Yellow\":50,\"Purple\":75}\n\nsortedList = sorted(unsortedDict.items(), key=lambda x: x[1])\nprint(sortedList)", "line_number": null, "bug_type": null}
{"code": "def count_occurrences(array, element): \n    count = 0\n    for i in range(len(array)): \n        if array[i] == element: \n            count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "def round_up(num): \n    if num == int(num): \n        return int(num) \n    return int(num + 1) \n\nnum = 5.6\nprint(round_up(num))", "line_number": null, "bug_type": null}
{"code": "def slugify(string):\n    slug = string.lower().strip().replace(' ', '-')\n    return slug\n\nslug = slugify(\"This Is a Test\")\nprint(slug)", "line_number": null, "bug_type": null}
{"code": "arr = [\"python\", \"c++\", \"java\", \"java-script\"]\n\nresult = []\nfor item in arr:\n    if item.startswith(\"java\"):\n        result.append(item)\nprint(result)", "line_number": null, "bug_type": null}
{"code": "import random\n\nn = random.randint(1, 10)\narray = [random.randint(0, 1000) for i in range(n)]\nprint(array)", "line_number": null, "bug_type": null}
{"code": "for i in range(1, 31):\n if(i%2 != 0):\n  print(i)", "line_number": null, "bug_type": null}
{"code": "numbers = input(\"Please enter a sequence of comma-separated numbers:\")\n\nnum_list = numbers.split(',')\n\nnum_list = list(map(int, num_list))\n\nprint(num_list)", "line_number": null, "bug_type": null}
{"code": "dictionary = {\n    \"x\" : 7,\n    \"y\" : 8\n}", "line_number": null, "bug_type": null}
{"code": "import random\n\nrandom_numbers = []\n\nfor _ in range(5):\n  random_numbers.append(random.random()) \n\nprint(random_numbers)", "line_number": null, "bug_type": null}
{"code": "# define variables\na = 5\nb = 7\nx = 3\ny = 4\n\n# calculate x\nx = (0 - (b*y))/a\n\nprint(x)", "line_number": null, "bug_type": null}
{"code": "def getStringsWithLength(array):\n    output = []\n    for x in array:\n        if len(x) > 6:\n            output.append(x)\n    return output\n\nprint(getStringsWithLength([\"testing\", \"this\",\"array\"]))", "line_number": null, "bug_type": null}
{"code": "def is_sorted(nums):\n    for i, num in enumerate(nums[:-1]):\n        if num > nums[i + 1]:\n            return False\n    return True", "line_number": null, "bug_type": null}
{"code": "def list_multiplication(nums):\n    output_list = []\n    for i in range(len(nums)):\n        output_list.append(nums[i] * 2)\n    return output_list", "line_number": null, "bug_type": null}
{"code": "def max_in_dictionary(dic):\n    max_value = float('-inf')\n    for key,value in dic.items():\n        if value > max_value:\n            max_value = value\n    return max_value", "line_number": null, "bug_type": null}
{"code": "import matplotlib.pyplot as plt\n\ndef histogram (data): \n    plt.hist(data)\n    plt.title(\"Frequency Histogram\")\n    plt.xlabel('Data')\n    plt.ylabel('Frequency')\n    plt.show()", "line_number": null, "bug_type": null}
{"code": "def remove_duplicates(nums):\n    new_list = []\n    for num in nums:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list", "line_number": null, "bug_type": null}
{"code": "import numpy as np\n\n# Generate an array of 10 random values between 0 and 1\narray = np.random.random(10)\n\nprint(array)", "line_number": null, "bug_type": null}
{"code": "for num in range(1,11):\n for i in range(1,11):\n  print(num,\"X\",i,\"=\",num*i)\n  print(\"\")", "line_number": null, "bug_type": null}
{"code": "import requests\n\ndef getRequest(url):\n response = requests.get(url)\n return response\n\nres = getRequest('http://www.example.com/')\nprint(res.text)", "line_number": null, "bug_type": null}
{"code": "def print_multiplication_table(num):\n    for i in range(1, 11):\n        print(f\"{num} x {i} = {num*i}\")", "line_number": null, "bug_type": null}
{"code": "def count_characters(string, character):\n    count = 0\n    for char in string:\n        if char == character:\n            count += 1\n    return count", "line_number": null, "bug_type": null}
{"code": "def reverse_string(str):\n    rev_str = \"\"\n    for ch in str: \n        rev_str = ch + rev_str \n    return rev_str\n  \nstring = \"Hello World\"\nprint(reverse_string(string))", "line_number": null, "bug_type": null}
{"code": "import string\nimport random\n\ndef generate_password():\n    characters = string.ascii_letters + string.digits\n    return ''.join(random.choice(characters) for i in range (8)) \n\nprint(generate_password())", "line_number": null, "bug_type": null}
{"code": "def factorial(n):\n    ans = 1\n    while(n > 1):\n        ans *= n\n        n -= 1\n    return ans\n\nnum = 4\nprint(factorial(num))", "line_number": null, "bug_type": null}
{"code": "def solve_expression(exp):\n # Solve the expression\n return eval(exp)\n\nexp = '4+2/3'\nres = solve_expression(exp)\nprint(res) # Output: 4.666666666666667", "line_number": null, "bug_type": null}
{"code": "num_list = [1, 2, 3, 4, 5]\n\nfor num in num_list:\n print(\"Square of\", num, \"is\", num*num)", "line_number": null, "bug_type": null}
{"code": "while True:\n  num = input(\"Please enter a valid number: \")\n  if num.isdigit():\n    print(\"Valid number entered: \" + num)\n    break\n  else:\n    print(\"Invalid number entered - please try again.\")", "line_number": null, "bug_type": null}
{"code": "def print_values(n):\n    if n == 0:\n        return\n    else:\n        print(n)\n        print_values(n-1)\n\nprint_values(5)", "line_number": null, "bug_type": null}
{"code": "class Counter:\n def __init__(self):\n  self.count = 0\n \n def increment(self):\n  self.count += 1\n \n def get_count(self):\n  return self.count", "line_number": null, "bug_type": null}
{"code": "def is_palindrome(inp):\n    rev_inp = inp[::-1]\n    if inp == rev_inp:\n        return True\n    else:\n        return False", "line_number": null, "bug_type": null}
